
adaptive_freq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cdc  08004cdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce4  08004ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08004cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08004cf8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106f0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f73  00000000  00000000  0003072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000326a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00033558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264e5  00000000  00000000  00034348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001151f  00000000  00000000  0005a82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f05a6  00000000  00000000  0006bd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c2f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de4  00000000  00000000  0015c344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c74 	.word	0x08004c74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004c74 	.word	0x08004c74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <CPU_set_freq>:
extern void Error_Handler(void);
extern HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct);
extern void MX_USART1_UART_Init(void);	//<< UWAGA! nie moze byc static w mainie!

// freq range: 1-80 MHz
void CPU_set_freq(uint8_t freq, UART_HandleTypeDef *uart_to_reset){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b098      	sub	sp, #96	; 0x60
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]

	//DEINIT + DEFAULT
	HAL_RCC_DeInit();
 80004d8:	f001 fade 	bl	8001a98 <HAL_RCC_DeInit>
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004dc:	f107 031c 	add.w	r3, r7, #28
 80004e0:	2244      	movs	r2, #68	; 0x44
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f004 fbbd 	bl	8004c64 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)	  {		Error_Handler();	  }
 80004fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004fe:	f001 fa75 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <CPU_set_freq+0x40>
 8000508:	f000 fbf0 	bl	8000cec <Error_Handler>


	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050c:	2302      	movs	r3, #2
 800050e:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000516:	2310      	movs	r3, #16
 8000518:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051a:	2300      	movs	r3, #0
 800051c:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)	  {		Error_Handler();	  }
 800051e:	f107 031c 	add.w	r3, r7, #28
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fb5a 	bl	8001bdc <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <CPU_set_freq+0x66>
 800052e:	f000 fbdd 	bl	8000cec <Error_Handler>


	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	60bb      	str	r3, [r7, #8]
								  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000536:	2301      	movs	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)	  {		Error_Handler();	  }
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f001 ff21 	bl	8002394 <HAL_RCC_ClockConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <CPU_set_freq+0x90>
 8000558:	f000 fbc8 	bl	8000cec <Error_Handler>


	if( (freq >= 0)  &  (freq <= 5) ){
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b05      	cmp	r3, #5
 8000560:	d859      	bhi.n	8000616 <CPU_set_freq+0x14a>
		 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)			  {				Error_Handler();			  }
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f001 fa41 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <CPU_set_freq+0xa8>
 8000570:	f000 fbbc 	bl	8000cec <Error_Handler>


			  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
			  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
			  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
			  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
			  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
			  RCC_OscInitStruct.PLL.PLLM = 4;
 800058a:	2304      	movs	r3, #4
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
			  switch(freq){
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	3b02      	subs	r3, #2
 8000592:	2b03      	cmp	r3, #3
 8000594:	d816      	bhi.n	80005c4 <CPU_set_freq+0xf8>
 8000596:	a201      	add	r2, pc, #4	; (adr r2, 800059c <CPU_set_freq+0xd0>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005ad 	.word	0x080005ad
 80005a0:	080005b3 	.word	0x080005b3
 80005a4:	080005b9 	.word	0x080005b9
 80005a8:	080005bf 	.word	0x080005bf
			  case 2:
				  RCC_OscInitStruct.PLL.PLLN = 32;
 80005ac:	2320      	movs	r3, #32
 80005ae:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 80005b0:	e00a      	b.n	80005c8 <CPU_set_freq+0xfc>
			  case 3:
				  RCC_OscInitStruct.PLL.PLLN = 48;
 80005b2:	2330      	movs	r3, #48	; 0x30
 80005b4:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 80005b6:	e007      	b.n	80005c8 <CPU_set_freq+0xfc>
			  case 4:
				  RCC_OscInitStruct.PLL.PLLN = 64;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 80005bc:	e004      	b.n	80005c8 <CPU_set_freq+0xfc>
			  case 5:
				  RCC_OscInitStruct.PLL.PLLN = 80;
 80005be:	2350      	movs	r3, #80	; 0x50
 80005c0:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 80005c2:	e001      	b.n	80005c8 <CPU_set_freq+0xfc>
			  default:
				  RCC_OscInitStruct.PLL.PLLN = 16;
 80005c4:	2310      	movs	r3, #16
 80005c6:	653b      	str	r3, [r7, #80]	; 0x50
			  }
			  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	657b      	str	r3, [r7, #84]	; 0x54
			  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	65bb      	str	r3, [r7, #88]	; 0x58
			  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)			  {				Error_Handler();			  }
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 faff 	bl	8001bdc <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <CPU_set_freq+0x11c>
 80005e4:	f000 fb82 	bl	8000cec <Error_Handler>


			  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60bb      	str	r3, [r7, #8]
										  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
			  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2303      	movs	r3, #3
 80005ee:	60fb      	str	r3, [r7, #12]
			  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80005f0:	23a0      	movs	r3, #160	; 0xa0
 80005f2:	613b      	str	r3, [r7, #16]
			  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
			  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]

			  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)			  {				Error_Handler();			  }
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fec6 	bl	8002394 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	f000 81bf 	beq.w	800098e <CPU_set_freq+0x4c2>
 8000610:	f000 fb6c 	bl	8000cec <Error_Handler>
 8000614:	e1bb      	b.n	800098e <CPU_set_freq+0x4c2>

	}else if( (freq >= 6) & (freq <= 16)){
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b05      	cmp	r3, #5
 800061a:	bf8c      	ite	hi
 800061c:	2301      	movhi	r3, #1
 800061e:	2300      	movls	r3, #0
 8000620:	b2da      	uxtb	r2, r3
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b10      	cmp	r3, #16
 8000626:	bf94      	ite	ls
 8000628:	2301      	movls	r3, #1
 800062a:	2300      	movhi	r3, #0
 800062c:	b2db      	uxtb	r3, r3
 800062e:	4013      	ands	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d07a      	beq.n	800072c <CPU_set_freq+0x260>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 8000636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063a:	f001 f9d7 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <CPU_set_freq+0x17c>
 8000644:	f000 fb52 	bl	8000cec <Error_Handler>

		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2310      	movs	r3, #16
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
		  switch(freq){
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	3b06      	subs	r3, #6
 8000666:	2b0a      	cmp	r3, #10
 8000668:	d839      	bhi.n	80006de <CPU_set_freq+0x212>
 800066a:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <CPU_set_freq+0x1a4>)
 800066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000670:	0800069d 	.word	0x0800069d
 8000674:	080006a3 	.word	0x080006a3
 8000678:	080006a9 	.word	0x080006a9
 800067c:	080006af 	.word	0x080006af
 8000680:	080006b5 	.word	0x080006b5
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006c1 	.word	0x080006c1
 800068c:	080006c7 	.word	0x080006c7
 8000690:	080006cd 	.word	0x080006cd
 8000694:	080006d3 	.word	0x080006d3
 8000698:	080006d9 	.word	0x080006d9
		  case 6:
			  RCC_OscInitStruct.PLL.PLLN = 24;
 800069c:	2318      	movs	r3, #24
 800069e:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006a0:	e01d      	b.n	80006de <CPU_set_freq+0x212>
		  case 7:
			  RCC_OscInitStruct.PLL.PLLN = 28;
 80006a2:	231c      	movs	r3, #28
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006a6:	e01a      	b.n	80006de <CPU_set_freq+0x212>
		  case 8:
			  RCC_OscInitStruct.PLL.PLLN = 32;
 80006a8:	2320      	movs	r3, #32
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006ac:	e017      	b.n	80006de <CPU_set_freq+0x212>
		  case 9:
			  RCC_OscInitStruct.PLL.PLLN = 36;
 80006ae:	2324      	movs	r3, #36	; 0x24
 80006b0:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006b2:	e014      	b.n	80006de <CPU_set_freq+0x212>
		  case 10:
			  RCC_OscInitStruct.PLL.PLLN = 40;
 80006b4:	2328      	movs	r3, #40	; 0x28
 80006b6:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006b8:	e011      	b.n	80006de <CPU_set_freq+0x212>
		  case 11:
			  RCC_OscInitStruct.PLL.PLLN = 44;
 80006ba:	232c      	movs	r3, #44	; 0x2c
 80006bc:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006be:	e00e      	b.n	80006de <CPU_set_freq+0x212>
		  case 12:
			  RCC_OscInitStruct.PLL.PLLN = 48;
 80006c0:	2330      	movs	r3, #48	; 0x30
 80006c2:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006c4:	e00b      	b.n	80006de <CPU_set_freq+0x212>
		  case 13:
			  RCC_OscInitStruct.PLL.PLLN = 52;
 80006c6:	2334      	movs	r3, #52	; 0x34
 80006c8:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006ca:	e008      	b.n	80006de <CPU_set_freq+0x212>
		  case 14:
			  RCC_OscInitStruct.PLL.PLLN = 56;
 80006cc:	2338      	movs	r3, #56	; 0x38
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006d0:	e005      	b.n	80006de <CPU_set_freq+0x212>
		  case 15:
			  RCC_OscInitStruct.PLL.PLLN = 60;
 80006d2:	233c      	movs	r3, #60	; 0x3c
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006d6:	e002      	b.n	80006de <CPU_set_freq+0x212>
		  case 16:
			  RCC_OscInitStruct.PLL.PLLN = 64;
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80006dc:	bf00      	nop
		  }
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006de:	2307      	movs	r3, #7
 80006e0:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80006e6:	2308      	movs	r3, #8
 80006e8:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fa74 	bl	8001bdc <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <CPU_set_freq+0x232>
 80006fa:	f000 faf7 	bl	8000cec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)		  {		    Error_Handler();		  }
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fe3b 	bl	8002394 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	f000 8134 	beq.w	800098e <CPU_set_freq+0x4c2>
 8000726:	f000 fae1 	bl	8000cec <Error_Handler>
 800072a:	e130      	b.n	800098e <CPU_set_freq+0x4c2>
	}else if( (freq >= 17) & (freq <= 33)){
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b10      	cmp	r3, #16
 8000730:	bf8c      	ite	hi
 8000732:	2301      	movhi	r3, #1
 8000734:	2300      	movls	r3, #0
 8000736:	b2da      	uxtb	r2, r3
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b21      	cmp	r3, #33	; 0x21
 800073c:	bf94      	ite	ls
 800073e:	2301      	movls	r3, #1
 8000740:	2300      	movhi	r3, #0
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4013      	ands	r3, r2
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d03e      	beq.n	80007ca <CPU_set_freq+0x2fe>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 800074c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000750:	f001 f94c 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <CPU_set_freq+0x292>
 800075a:	f000 fac7 	bl	8000cec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800077c:	2307      	movs	r3, #7
 800077e:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000784:	2304      	movs	r3, #4
 8000786:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fa25 	bl	8001bdc <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <CPU_set_freq+0x2d0>
 8000798:	f000 faa8 	bl	8000cec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2303      	movs	r3, #3
 80007a2:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)		  {		    Error_Handler();		  }
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fdec 	bl	8002394 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 80e5 	beq.w	800098e <CPU_set_freq+0x4c2>
 80007c4:	f000 fa92 	bl	8000cec <Error_Handler>
 80007c8:	e0e1      	b.n	800098e <CPU_set_freq+0x4c2>
	}else if( (freq >= 34) & (freq <= 49)){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b21      	cmp	r3, #33	; 0x21
 80007ce:	bf8c      	ite	hi
 80007d0:	2301      	movhi	r3, #1
 80007d2:	2300      	movls	r3, #0
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b31      	cmp	r3, #49	; 0x31
 80007da:	bf94      	ite	ls
 80007dc:	2301      	movls	r3, #1
 80007de:	2300      	movhi	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4013      	ands	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d03e      	beq.n	8000868 <CPU_set_freq+0x39c>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 80007ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ee:	f001 f8fd 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <CPU_set_freq+0x330>
 80007f8:	f000 fa78 	bl	8000cec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2310      	movs	r3, #16
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800081a:	2307      	movs	r3, #7
 800081c:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000822:	2304      	movs	r3, #4
 8000824:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f9d6 	bl	8001bdc <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <CPU_set_freq+0x36e>
 8000836:	f000 fa59 	bl	8000cec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)		  {		    Error_Handler();		  }
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2102      	movs	r1, #2
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fd9d 	bl	8002394 <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 8096 	beq.w	800098e <CPU_set_freq+0x4c2>
 8000862:	f000 fa43 	bl	8000cec <Error_Handler>
 8000866:	e092      	b.n	800098e <CPU_set_freq+0x4c2>
	}else if( (freq >= 50) & (freq <= 64)){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b31      	cmp	r3, #49	; 0x31
 800086c:	bf8c      	ite	hi
 800086e:	2301      	movhi	r3, #1
 8000870:	2300      	movls	r3, #0
 8000872:	b2da      	uxtb	r2, r3
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b40      	cmp	r3, #64	; 0x40
 8000878:	bf94      	ite	ls
 800087a:	2301      	movls	r3, #1
 800087c:	2300      	movhi	r3, #0
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4013      	ands	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d03d      	beq.n	8000904 <CPU_set_freq+0x438>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 8000888:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088c:	f001 f8ae 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <CPU_set_freq+0x3ce>
 8000896:	f000 fa29 	bl	8000cec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b8:	2307      	movs	r3, #7
 80008ba:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 f987 	bl	8001bdc <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <CPU_set_freq+0x40c>
 80008d4:	f000 fa0a 	bl	8000cec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2303      	movs	r3, #3
 80008de:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)		  {		    Error_Handler();		  }
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2103      	movs	r1, #3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fd4e 	bl	8002394 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d047      	beq.n	800098e <CPU_set_freq+0x4c2>
 80008fe:	f000 f9f5 	bl	8000cec <Error_Handler>
 8000902:	e044      	b.n	800098e <CPU_set_freq+0x4c2>
	}else if( (freq >= 65) /*& (freq <= 80)*/){
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b40      	cmp	r3, #64	; 0x40
 8000908:	d941      	bls.n	800098e <CPU_set_freq+0x4c2>
		if(freq > 80) freq = 80;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b50      	cmp	r3, #80	; 0x50
 800090e:	d901      	bls.n	8000914 <CPU_set_freq+0x448>
 8000910:	2350      	movs	r3, #80	; 0x50
 8000912:	71fb      	strb	r3, [r7, #7]
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 8000914:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000918:	f001 f868 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <CPU_set_freq+0x45a>
 8000922:	f000 f9e3 	bl	8000cec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2310      	movs	r3, #16
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000944:	2307      	movs	r3, #7
 8000946:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800094c:	2304      	movs	r3, #4
 800094e:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f941 	bl	8001bdc <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <CPU_set_freq+0x498>
 8000960:	f000 f9c4 	bl	8000cec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2303      	movs	r3, #3
 800096a:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)		  {		    Error_Handler();		  }
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2104      	movs	r1, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fd08 	bl	8002394 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <CPU_set_freq+0x4c2>
 800098a:	f000 f9af 	bl	8000cec <Error_Handler>
	}

		SystemCoreClockUpdate();
 800098e:	f000 fae5 	bl	8000f5c <SystemCoreClockUpdate>
		HAL_UART_Abort(uart_to_reset);
 8000992:	6838      	ldr	r0, [r7, #0]
 8000994:	f003 fbdf 	bl	8004156 <HAL_UART_Abort>
		HAL_UART_DeInit(uart_to_reset);
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f003 fb0f 	bl	8003fbc <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 800099e:	f000 f8fd 	bl	8000b9c <MX_USART1_UART_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3760      	adds	r7, #96	; 0x60
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t test_word[] = "abc123";
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <main+0x50>)
 80009b4:	463b      	mov	r3, r7
 80009b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ba:	6018      	str	r0, [r3, #0]
 80009bc:	3304      	adds	r3, #4
 80009be:	8019      	strh	r1, [r3, #0]
 80009c0:	3302      	adds	r3, #2
 80009c2:	0c0a      	lsrs	r2, r1, #16
 80009c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fba1 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f81d 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f000 f915 	bl	8000bfc <MX_GPIO_Init>
  MX_TIM17_Init();
 80009d2:	f000 f86b 	bl	8000aac <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80009d6:	f000 f8e1 	bl	8000b9c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80009da:	2100      	movs	r1, #0
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <main+0x54>)
 80009de:	f002 fc71 	bl	80032c4 <HAL_TIM_PWM_Start>
 // HAL_UART_Transmit(&huart1, test_word, 7, 1000);



  CPU_set_freq(80, &huart1);
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <main+0x58>)
 80009e4:	2050      	movs	r0, #80	; 0x50
 80009e6:	f7ff fd71 	bl	80004cc <CPU_set_freq>


  while (1)
  {
	  HAL_UART_Transmit(&huart1, test_word, 7, 1000);
 80009ea:	4639      	mov	r1, r7
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	2207      	movs	r2, #7
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <main+0x58>)
 80009f4:	f003 fb1b 	bl	800402e <HAL_UART_Transmit>
 80009f8:	e7f7      	b.n	80009ea <main+0x3e>
 80009fa:	bf00      	nop
 80009fc:	08004c8c 	.word	0x08004c8c
 8000a00:	20000028 	.word	0x20000028
 8000a04:	20000074 	.word	0x20000074

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b096      	sub	sp, #88	; 0x58
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2244      	movs	r2, #68	; 0x44
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 f924 	bl	8004c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a2e:	f000 ffdd 	bl	80019ec <HAL_PWREx_ControlVoltageScaling>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a38:	f000 f958 	bl	8000cec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a46:	2310      	movs	r3, #16
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 17;
 8000a56:	2311      	movs	r3, #17
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f8b6 	bl	8001bdc <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a76:	f000 f939 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	603b      	str	r3, [r7, #0]
          	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fc7e 	bl	8002394 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a9e:	f000 f925 	bl	8000cec <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3758      	adds	r7, #88	; 0x58
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b092      	sub	sp, #72	; 0x48
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	222c      	movs	r2, #44	; 0x2c
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 f8c9 	bl	8004c64 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000ad4:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <MX_TIM17_Init+0xec>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000afe:	4825      	ldr	r0, [pc, #148]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000b00:	f002 fb28 	bl	8003154 <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000b0a:	f000 f8ef 	bl	8000cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000b0e:	4821      	ldr	r0, [pc, #132]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000b10:	f002 fb77 	bl	8003202 <HAL_TIM_PWM_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000b1a:	f000 f8e7 	bl	8000cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 499;
 8000b22:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000b46:	f002 fcc3 	bl	80034d0 <HAL_TIM_PWM_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000b50:	f000 f8cc 	bl	8000cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000b78:	f003 f954 	bl	8003e24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000b82:	f000 f8b3 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM17_Init+0xe8>)
 8000b88:	f000 f8fa 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 8000b8c:	bf00      	nop
 8000b8e:	3748      	adds	r7, #72	; 0x48
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000028 	.word	0x20000028
 8000b98:	40014800 	.word	0x40014800

08000b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000ba2:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <MX_USART1_UART_Init+0x5c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000ba8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART1_UART_Init+0x58>)
 8000be0:	f003 f99e 	bl	8003f20 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 f87f 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000074 	.word	0x20000074
 8000bf8:	40013800 	.word	0x40013800

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a33      	ldr	r2, [pc, #204]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a27      	ldr	r2, [pc, #156]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_GPIO_Init+0xe8>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2120      	movs	r1, #32
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f000 fe91 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <MX_GPIO_Init+0xec>)
 8000c96:	f000 fbe5 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000caa:	2307      	movs	r3, #7
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fbd4 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fbc5 	bl	8001464 <HAL_GPIO_Init>

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000800 	.word	0x48000800

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <Error_Handler+0x8>
	...

08000cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x44>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_MspInit+0x44>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x44>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6593      	str	r3, [r2, #88]	; 0x58
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_TIM_Base_MspInit+0x38>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_TIM_Base_MspInit+0x3c>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40014800 	.word	0x40014800
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_TIM_MspPostInit+0x64>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d11c      	bne.n	8000ddc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000dca:	230e      	movs	r3, #14
 8000dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fb44 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40014800 	.word	0x40014800
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ac      	sub	sp, #176	; 0xb0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2288      	movs	r2, #136	; 0x88
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 ff29 	bl	8004c64 <memset>
  if(huart->Instance==USART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_UART_MspInit+0xb4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d13c      	bne.n	8000e96 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fcd7 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e34:	f7ff ff5a 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6613      	str	r3, [r2, #96]	; 0x60
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0xb8>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e82:	2307      	movs	r3, #7
 8000e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e92:	f000 fae7 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	37b0      	adds	r7, #176	; 0xb0
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_UART_MspDeInit+0x34>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_UART_MspDeInit+0x38>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_UART_MspDeInit+0x38>)
 8000ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000ec6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f000 fc73 	bl	80017b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f948 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000f62:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d107      	bne.n	8000f7e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8000f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e005      	b.n	8000f8a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000f7e:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000f8a:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <SystemCoreClockUpdate+0x148>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f94:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b0c      	cmp	r3, #12
 8000f9e:	d866      	bhi.n	800106e <SystemCoreClockUpdate+0x112>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <SystemCoreClockUpdate+0x4c>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fdd 	.word	0x08000fdd
 8000fac:	0800106f 	.word	0x0800106f
 8000fb0:	0800106f 	.word	0x0800106f
 8000fb4:	0800106f 	.word	0x0800106f
 8000fb8:	08000fe5 	.word	0x08000fe5
 8000fbc:	0800106f 	.word	0x0800106f
 8000fc0:	0800106f 	.word	0x0800106f
 8000fc4:	0800106f 	.word	0x0800106f
 8000fc8:	08000fed 	.word	0x08000fed
 8000fcc:	0800106f 	.word	0x0800106f
 8000fd0:	0800106f 	.word	0x0800106f
 8000fd4:	0800106f 	.word	0x0800106f
 8000fd8:	08000ff5 	.word	0x08000ff5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000fdc:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <SystemCoreClockUpdate+0x14c>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	6013      	str	r3, [r2, #0]
      break;
 8000fe2:	e048      	b.n	8001076 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <SystemCoreClockUpdate+0x14c>)
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <SystemCoreClockUpdate+0x150>)
 8000fe8:	601a      	str	r2, [r3, #0]
      break;
 8000fea:	e044      	b.n	8001076 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <SystemCoreClockUpdate+0x14c>)
 8000fee:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <SystemCoreClockUpdate+0x154>)
 8000ff0:	601a      	str	r2, [r3, #0]
      break;
 8000ff2:	e040      	b.n	8001076 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	3301      	adds	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d003      	beq.n	800101a <SystemCoreClockUpdate+0xbe>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d006      	beq.n	8001026 <SystemCoreClockUpdate+0xca>
 8001018:	e00b      	b.n	8001032 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800101a:	4a24      	ldr	r2, [pc, #144]	; (80010ac <SystemCoreClockUpdate+0x150>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	613b      	str	r3, [r7, #16]
          break;
 8001024:	e00b      	b.n	800103e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <SystemCoreClockUpdate+0x154>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	613b      	str	r3, [r7, #16]
          break;
 8001030:	e005      	b.n	800103e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	613b      	str	r3, [r7, #16]
          break;
 800103c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0e5b      	lsrs	r3, r3, #25
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	3301      	adds	r3, #1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <SystemCoreClockUpdate+0x14c>)
 800106a:	6013      	str	r3, [r2, #0]
      break;
 800106c:	e003      	b.n	8001076 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <SystemCoreClockUpdate+0x14c>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	6013      	str	r3, [r2, #0]
      break;
 8001074:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <SystemCoreClockUpdate+0x144>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <SystemCoreClockUpdate+0x158>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <SystemCoreClockUpdate+0x14c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <SystemCoreClockUpdate+0x14c>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	08004cac 	.word	0x08004cac
 80010a8:	20000000 	.word	0x20000000
 80010ac:	00f42400 	.word	0x00f42400
 80010b0:	007a1200 	.word	0x007a1200
 80010b4:	08004c94 	.word	0x08004c94

080010b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010bc:	f7ff ff3c 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	; (80010f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <LoopForever+0xe>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	; (8001104 <LoopForever+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e6:	f003 fd99 	bl	8004c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ea:	f7ff fc5f 	bl	80009ac <main>

080010ee <LoopForever>:

LoopForever:
    b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010fc:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 8001100:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001104:	200000fc 	.word	0x200000fc

08001108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_2_IRQHandler>
	...

0800110c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_Init+0x3c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_Init+0x3c>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f920 	bl	8001368 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f80f 	bl	800114c <HAL_InitTick>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	e001      	b.n	800113e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800113a:	f7ff fddd 	bl	8000cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113e:	79fb      	ldrb	r3, [r7, #7]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <HAL_InitTick+0x6c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d023      	beq.n	80011a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_InitTick+0x70>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_InitTick+0x6c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f91d 	bl	80013b6 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10f      	bne.n	80011a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d809      	bhi.n	800119c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f8f5 	bl	800137e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_InitTick+0x74>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e007      	b.n	80011ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e004      	b.n	80011ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e001      	b.n	80011ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	200000f8 	.word	0x200000f8

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200000f8 	.word	0x200000f8

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	; (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f1c3 0307 	rsb	r3, r3, #7
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	bf28      	it	cs
 80012da:	2304      	movcs	r3, #4
 80012dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3304      	adds	r3, #4
 80012e2:	2b06      	cmp	r3, #6
 80012e4:	d902      	bls.n	80012ec <NVIC_EncodePriority+0x30>
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	e000      	b.n	80012ee <NVIC_EncodePriority+0x32>
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	401a      	ands	r2, r3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa01 f303 	lsl.w	r3, r1, r3
 800130e:	43d9      	mvns	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	4313      	orrs	r3, r2
         );
}
 8001316:	4618      	mov	r0, r3
 8001318:	3724      	adds	r7, #36	; 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001334:	d301      	bcc.n	800133a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001336:	2301      	movs	r3, #1
 8001338:	e00f      	b.n	800135a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SysTick_Config+0x40>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001342:	210f      	movs	r1, #15
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f7ff ff8e 	bl	8001268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x40>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff47 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff5c 	bl	800124c <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff8e 	bl	80012bc <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5d 	bl	8001268 <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffb0 	bl	8001324 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d008      	beq.n	80013f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2204      	movs	r2, #4
 80013ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e022      	b.n	800143e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 020e 	bic.w	r2, r2, #14
 8001406:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	f003 021c 	and.w	r2, r3, #28
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f202 	lsl.w	r2, r1, r2
 800142a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e17f      	b.n	8001774 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8171 	beq.w	800176e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d118      	bne.n	8001544 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001518:	2201      	movs	r2, #1
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	f003 0201 	and.w	r2, r3, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b03      	cmp	r3, #3
 800154e:	d017      	beq.n	8001580 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d123      	bne.n	80015d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	6939      	ldr	r1, [r7, #16]
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80ac 	beq.w	800176e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <HAL_GPIO_Init+0x330>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	4a5e      	ldr	r2, [pc, #376]	; (8001794 <HAL_GPIO_Init+0x330>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6613      	str	r3, [r2, #96]	; 0x60
 8001622:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <HAL_GPIO_Init+0x330>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800162e:	4a5a      	ldr	r2, [pc, #360]	; (8001798 <HAL_GPIO_Init+0x334>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001658:	d025      	beq.n	80016a6 <HAL_GPIO_Init+0x242>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4f      	ldr	r2, [pc, #316]	; (800179c <HAL_GPIO_Init+0x338>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01f      	beq.n	80016a2 <HAL_GPIO_Init+0x23e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4e      	ldr	r2, [pc, #312]	; (80017a0 <HAL_GPIO_Init+0x33c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0x23a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4d      	ldr	r2, [pc, #308]	; (80017a4 <HAL_GPIO_Init+0x340>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_GPIO_Init+0x236>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4c      	ldr	r2, [pc, #304]	; (80017a8 <HAL_GPIO_Init+0x344>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00d      	beq.n	8001696 <HAL_GPIO_Init+0x232>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4b      	ldr	r2, [pc, #300]	; (80017ac <HAL_GPIO_Init+0x348>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d007      	beq.n	8001692 <HAL_GPIO_Init+0x22e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4a      	ldr	r2, [pc, #296]	; (80017b0 <HAL_GPIO_Init+0x34c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_GPIO_Init+0x22a>
 800168a:	2306      	movs	r3, #6
 800168c:	e00c      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 800168e:	2307      	movs	r3, #7
 8001690:	e00a      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 8001692:	2305      	movs	r3, #5
 8001694:	e008      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 8001696:	2304      	movs	r3, #4
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 800169a:	2303      	movs	r3, #3
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 80016a6:	2300      	movs	r3, #0
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b8:	4937      	ldr	r1, [pc, #220]	; (8001798 <HAL_GPIO_Init+0x334>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_GPIO_Init+0x350>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HAL_GPIO_Init+0x350>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_GPIO_Init+0x350>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <HAL_GPIO_Init+0x350>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_GPIO_Init+0x350>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800173e:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_GPIO_Init+0x350>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_GPIO_Init+0x350>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_GPIO_Init+0x350>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f ae78 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40010000 	.word	0x40010000
 800179c:	48000400 	.word	0x48000400
 80017a0:	48000800 	.word	0x48000800
 80017a4:	48000c00 	.word	0x48000c00
 80017a8:	48001000 	.word	0x48001000
 80017ac:	48001400 	.word	0x48001400
 80017b0:	48001800 	.word	0x48001800
 80017b4:	40010400 	.word	0x40010400

080017b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017c6:	e0cd      	b.n	8001964 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017c8:	2201      	movs	r2, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80c0 	beq.w	800195e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80017de:	4a68      	ldr	r2, [pc, #416]	; (8001980 <HAL_GPIO_DeInit+0x1c8>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001806:	d025      	beq.n	8001854 <HAL_GPIO_DeInit+0x9c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a5e      	ldr	r2, [pc, #376]	; (8001984 <HAL_GPIO_DeInit+0x1cc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d01f      	beq.n	8001850 <HAL_GPIO_DeInit+0x98>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a5d      	ldr	r2, [pc, #372]	; (8001988 <HAL_GPIO_DeInit+0x1d0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d019      	beq.n	800184c <HAL_GPIO_DeInit+0x94>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a5c      	ldr	r2, [pc, #368]	; (800198c <HAL_GPIO_DeInit+0x1d4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d013      	beq.n	8001848 <HAL_GPIO_DeInit+0x90>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a5b      	ldr	r2, [pc, #364]	; (8001990 <HAL_GPIO_DeInit+0x1d8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d00d      	beq.n	8001844 <HAL_GPIO_DeInit+0x8c>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a5a      	ldr	r2, [pc, #360]	; (8001994 <HAL_GPIO_DeInit+0x1dc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d007      	beq.n	8001840 <HAL_GPIO_DeInit+0x88>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a59      	ldr	r2, [pc, #356]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d101      	bne.n	800183c <HAL_GPIO_DeInit+0x84>
 8001838:	2306      	movs	r3, #6
 800183a:	e00c      	b.n	8001856 <HAL_GPIO_DeInit+0x9e>
 800183c:	2307      	movs	r3, #7
 800183e:	e00a      	b.n	8001856 <HAL_GPIO_DeInit+0x9e>
 8001840:	2305      	movs	r3, #5
 8001842:	e008      	b.n	8001856 <HAL_GPIO_DeInit+0x9e>
 8001844:	2304      	movs	r3, #4
 8001846:	e006      	b.n	8001856 <HAL_GPIO_DeInit+0x9e>
 8001848:	2303      	movs	r3, #3
 800184a:	e004      	b.n	8001856 <HAL_GPIO_DeInit+0x9e>
 800184c:	2302      	movs	r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_DeInit+0x9e>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_GPIO_DeInit+0x9e>
 8001854:	2300      	movs	r3, #0
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	429a      	cmp	r2, r3
 8001864:	d132      	bne.n	80018cc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001866:	4b4d      	ldr	r3, [pc, #308]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	494b      	ldr	r1, [pc, #300]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 8001870:	4013      	ands	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001874:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	4947      	ldr	r1, [pc, #284]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 800187e:	4013      	ands	r3, r2
 8001880:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	4944      	ldr	r1, [pc, #272]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 800188c:	4013      	ands	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	4940      	ldr	r1, [pc, #256]	; (800199c <HAL_GPIO_DeInit+0x1e4>)
 800189a:	4013      	ands	r3, r2
 800189c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80018ae:	4a34      	ldr	r2, [pc, #208]	; (8001980 <HAL_GPIO_DeInit+0x1c8>)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43da      	mvns	r2, r3
 80018be:	4830      	ldr	r0, [pc, #192]	; (8001980 <HAL_GPIO_DeInit+0x1c8>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	400a      	ands	r2, r1
 80018c6:	3302      	adds	r3, #2
 80018c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2103      	movs	r1, #3
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	08d2      	lsrs	r2, r2, #3
 8001900:	4019      	ands	r1, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2103      	movs	r1, #3
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	2101      	movs	r1, #1
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2103      	movs	r1, #3
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	401a      	ands	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194e:	2101      	movs	r1, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	401a      	ands	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f af2b 	bne.w	80017c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40010000 	.word	0x40010000
 8001984:	48000400 	.word	0x48000400
 8001988:	48000800 	.word	0x48000800
 800198c:	48000c00 	.word	0x48000c00
 8001990:	48001000 	.word	0x48001000
 8001994:	48001400 	.word	0x48001400
 8001998:	48001800 	.word	0x48001800
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fa:	d130      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	d038      	beq.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a12:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2232      	movs	r2, #50	; 0x32
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	0c9b      	lsrs	r3, r3, #18
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a30:	e002      	b.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a38:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a44:	d102      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f2      	bne.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a58:	d110      	bne.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e00f      	b.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6a:	d007      	beq.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	20000000 	.word	0x20000000
 8001a94:	431bde83 	.word	0x431bde83

08001a98 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001aaa:	f7ff fb9f 	bl	80011ec <HAL_GetTick>
 8001aae:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fb9b 	bl	80011ec <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e07c      	b.n	8001bbe <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac4:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8001ad0:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad8:	4a3b      	ldr	r2, [pc, #236]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001ada:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ade:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_DeInit+0x134>)
 8001ae8:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <HAL_RCC_DeInit+0x138>)
 8001aea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <HAL_RCC_DeInit+0x13c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fb2b 	bl	800114c <HAL_InitTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e05e      	b.n	8001bbe <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001b00:	f7ff fb74 	bl	80011ec <HAL_GetTick>
 8001b04:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff fb70 	bl	80011ec <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04f      	b.n	8001bbe <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ee      	bne.n	8001b08 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4926      	ldr	r1, [pc, #152]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_DeInit+0x140>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001b36:	f7ff fb59 	bl	80011ec <HAL_GetTick>
 8001b3a:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7ff fb55 	bl	80011ec <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e036      	b.n	8001bbe <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f0      	bne.n	8001b3e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b7e:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b90:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_RCC_DeInit+0x130>)
 8001bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	003d0900 	.word	0x003d0900
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	eafef4ff 	.word	0xeafef4ff

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e3ca      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4b97      	ldr	r3, [pc, #604]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4b94      	ldr	r3, [pc, #592]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80e4 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4a>
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	f040 808b 	bne.w	8001d34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	f040 8087 	bne.w	8001d34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x62>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e3a2      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_RCC_OscConfig+0x7c>
 8001c4e:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c56:	e005      	b.n	8001c64 <HAL_RCC_OscConfig+0x88>
 8001c58:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d223      	bcs.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fd55 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e383      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c7c:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a72      	ldr	r2, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	496d      	ldr	r1, [pc, #436]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	4968      	ldr	r1, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
 8001cae:	e025      	b.n	8001cfc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4960      	ldr	r1, [pc, #384]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	495b      	ldr	r1, [pc, #364]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fd15 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e343      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfc:	f000 fc4a 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	4950      	ldr	r1, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fa13 	bl	800114c <HAL_InitTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d052      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	e327      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d032      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d3c:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a42      	ldr	r2, [pc, #264]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fa50 	bl	80011ec <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d50:	f7ff fa4c 	bl	80011ec <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e310      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a36      	ldr	r2, [pc, #216]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4931      	ldr	r1, [pc, #196]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	492c      	ldr	r1, [pc, #176]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
 8001da0:	e01a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fa1d 	bl	80011ec <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db6:	f7ff fa19 	bl	80011ec <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e2dd      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1da>
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d074      	beq.n	8001ece <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x21a>
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d10e      	bne.n	8001e0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d064      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d160      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e2ba      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x24a>
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e026      	b.n	8001e74 <HAL_RCC_OscConfig+0x298>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2e:	d115      	bne.n	8001e5c <HAL_RCC_OscConfig+0x280>
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a02      	ldr	r2, [pc, #8]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x298>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08004c94 	.word	0x08004c94
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	4ba0      	ldr	r3, [pc, #640]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a9f      	ldr	r2, [pc, #636]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b9d      	ldr	r3, [pc, #628]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a9c      	ldr	r2, [pc, #624]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f9b6 	bl	80011ec <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f9b2 	bl	80011ec <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e276      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2a8>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f9a2 	bl	80011ec <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f99e 	bl	80011ec <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e262      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x2d0>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d060      	beq.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x310>
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d119      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d116      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	4b7c      	ldr	r3, [pc, #496]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x328>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e23f      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	4973      	ldr	r1, [pc, #460]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f18:	e040      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d023      	beq.n	8001f6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f22:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f95d 	bl	80011ec <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff f959 	bl	80011ec <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e21d      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f48:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	495f      	ldr	r1, [pc, #380]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5c      	ldr	r2, [pc, #368]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f939 	bl	80011ec <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff f935 	bl	80011ec <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1f9      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01c      	beq.n	8001fea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f914 	bl	80011ec <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f910 	bl	80011ec <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1d4      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x3ec>
 8001fe8:	e01b      	b.n	8002022 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f8f7 	bl	80011ec <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff f8f3 	bl	80011ec <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1b7      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ef      	bne.n	8002002 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d118      	bne.n	800209a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002074:	f7ff f8ba 	bl	80011ec <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7ff f8b6 	bl	80011ec <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e17a      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d8>
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b2:	e029      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d115      	bne.n	80020e8 <HAL_RCC_OscConfig+0x50c>
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a03      	ldr	r2, [pc, #12]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020dc:	e014      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	4b9c      	ldr	r3, [pc, #624]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a9b      	ldr	r2, [pc, #620]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f8:	4b98      	ldr	r3, [pc, #608]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	4a97      	ldr	r2, [pc, #604]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d016      	beq.n	800213e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff f86c 	bl	80011ec <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7ff f868 	bl	80011ec <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e12a      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ed      	beq.n	8002118 <HAL_RCC_OscConfig+0x53c>
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7ff f855 	bl	80011ec <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff f851 	bl	80011ec <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e113      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215c:	4b7f      	ldr	r3, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ed      	bne.n	8002146 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b7a      	ldr	r3, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a79      	ldr	r2, [pc, #484]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80fe 	beq.w	8002382 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	2b02      	cmp	r3, #2
 800218c:	f040 80d0 	bne.w	8002330 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002190:	4b72      	ldr	r3, [pc, #456]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d130      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	3b01      	subs	r3, #1
 80021b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d127      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11f      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021d0:	2a07      	cmp	r2, #7
 80021d2:	bf14      	ite	ne
 80021d4:	2201      	movne	r2, #1
 80021d6:	2200      	moveq	r2, #0
 80021d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021da:	4293      	cmp	r3, r2
 80021dc:	d113      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d06e      	beq.n	80022e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d069      	beq.n	80022e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0ad      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002228:	4b4c      	ldr	r3, [pc, #304]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4b      	ldr	r2, [pc, #300]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800222e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002234:	f7fe ffda 	bl	80011ec <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ffd6 	bl	80011ec <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e09a      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b40      	ldr	r3, [pc, #256]	; (8002360 <HAL_RCC_OscConfig+0x784>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800226a:	3a01      	subs	r2, #1
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002274:	0212      	lsls	r2, r2, #8
 8002276:	4311      	orrs	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800227c:	0852      	lsrs	r2, r2, #1
 800227e:	3a01      	subs	r2, #1
 8002280:	0552      	lsls	r2, r2, #21
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002288:	0852      	lsrs	r2, r2, #1
 800228a:	3a01      	subs	r2, #1
 800228c:	0652      	lsls	r2, r2, #25
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002294:	0912      	lsrs	r2, r2, #4
 8002296:	0452      	lsls	r2, r2, #17
 8002298:	430a      	orrs	r2, r1
 800229a:	4930      	ldr	r1, [pc, #192]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800229c:	4313      	orrs	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2d      	ldr	r2, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a2a      	ldr	r2, [pc, #168]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b8:	f7fe ff98 	bl	80011ec <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe ff94 	bl	80011ec <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e058      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022de:	e050      	b.n	8002382 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e04f      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d148      	bne.n	8002382 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002308:	f7fe ff70 	bl	80011ec <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe ff6c 	bl	80011ec <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e030      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x734>
 800232e:	e028      	b.n	8002382 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d023      	beq.n	800237e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800233c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe ff53 	bl	80011ec <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	e00c      	b.n	8002364 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe ff4f 	bl	80011ec <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d905      	bls.n	8002364 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e013      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
 800235c:	40021000 	.word	0x40021000
 8002360:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_OscConfig+0x7b0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ec      	bne.n	800234a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCC_OscConfig+0x7b0>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4905      	ldr	r1, [pc, #20]	; (800238c <HAL_RCC_OscConfig+0x7b0>)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x7b4>)
 8002378:	4013      	ands	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
 800237c:	e001      	b.n	8002382 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	feeefffc 	.word	0xfeeefffc

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0e7      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b75      	ldr	r3, [pc, #468]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d910      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b72      	ldr	r3, [pc, #456]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4970      	ldr	r1, [pc, #448]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b6e      	ldr	r3, [pc, #440]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0cf      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d908      	bls.n	8002406 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4960      	ldr	r1, [pc, #384]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04c      	beq.n	80024ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	4b5a      	ldr	r3, [pc, #360]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d121      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0a6      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d115      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e09a      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244a:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e08e      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e086      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b46      	ldr	r3, [pc, #280]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4943      	ldr	r1, [pc, #268]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247c:	f7fe feb6 	bl	80011ec <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe feb2 	bl	80011ec <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e06e      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d208      	bcs.n	80024da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	492b      	ldr	r1, [pc, #172]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d210      	bcs.n	800250a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	4923      	ldr	r1, [pc, #140]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e036      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4918      	ldr	r1, [pc, #96]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4910      	ldr	r1, [pc, #64]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002548:	f000 f824 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	490b      	ldr	r1, [pc, #44]	; (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002566:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1fc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fded 	bl	800114c <HAL_InitTick>
 8002572:	4603      	mov	r3, r0
 8002574:	72fb      	strb	r3, [r7, #11]

  return status;
 8002576:	7afb      	ldrb	r3, [r7, #11]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	08004c94 	.word	0x08004c94
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a2:	4b3e      	ldr	r3, [pc, #248]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ac:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x34>
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d121      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d11e      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025f0:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002604:	e00a      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e004      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d101      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800261a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d134      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0xa6>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d003      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0xac>
 8002638:	e005      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800263c:	617b      	str	r3, [r7, #20]
      break;
 800263e:	e005      	b.n	800264c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002642:	617b      	str	r3, [r7, #20]
      break;
 8002644:	e002      	b.n	800264c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	617b      	str	r3, [r7, #20]
      break;
 800264a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	3301      	adds	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	fb03 f202 	mul.w	r2, r3, r2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	0e5b      	lsrs	r3, r3, #25
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	3301      	adds	r3, #1
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800268c:	69bb      	ldr	r3, [r7, #24]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	08004cac 	.word	0x08004cac
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	007a1200 	.word	0x007a1200

080026ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08004ca4 	.word	0x08004ca4

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f4:	f7ff ffda 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0adb      	lsrs	r3, r3, #11
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	08004ca4 	.word	0x08004ca4

0800271c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002734:	f7ff f94c 	bl	80019d0 <HAL_PWREx_GetVoltageRange>
 8002738:	6178      	str	r0, [r7, #20]
 800273a:	e014      	b.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	6593      	str	r3, [r2, #88]	; 0x58
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002754:	f7ff f93c 	bl	80019d0 <HAL_PWREx_GetVoltageRange>
 8002758:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276c:	d10b      	bne.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d919      	bls.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2ba0      	cmp	r3, #160	; 0xa0
 8002778:	d902      	bls.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800277a:	2302      	movs	r3, #2
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e013      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002780:	2301      	movs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e010      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b80      	cmp	r3, #128	; 0x80
 800278a:	d902      	bls.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800278c:	2303      	movs	r3, #3
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e00a      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d102      	bne.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002798:	2302      	movs	r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	e004      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b70      	cmp	r3, #112	; 0x70
 80027a2:	d101      	bne.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0207 	bic.w	r2, r3, #7
 80027b0:	4909      	ldr	r1, [pc, #36]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40022000 	.word	0x40022000

080027dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e4:	2300      	movs	r3, #0
 80027e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d041      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002800:	d02a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002802:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002806:	d824      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280c:	d008      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800280e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002812:	d81e      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281c:	d010      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800281e:	e018      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002820:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a85      	ldr	r2, [pc, #532]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800282c:	e015      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fabb 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800283e:	e00c      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3320      	adds	r3, #32
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fba6 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	74fb      	strb	r3, [r7, #19]
      break;
 8002856:	e000      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002860:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286e:	4973      	ldr	r1, [pc, #460]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002876:	e001      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d041      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800288c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002890:	d02a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002896:	d824      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289c:	d008      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800289e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028a2:	d81e      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d010      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028ae:	e018      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b0:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a61      	ldr	r2, [pc, #388]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028bc:	e015      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa73 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ce:	e00c      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3320      	adds	r3, #32
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fb5e 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e0:	e003      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	74fb      	strb	r3, [r7, #19]
      break;
 80028e6:	e000      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fe:	494f      	ldr	r1, [pc, #316]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002906:	e001      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80a0 	beq.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
 8002940:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294c:	2301      	movs	r3, #1
 800294e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295c:	f7fe fc46 	bl	80011ec <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002962:	e009      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fc42 	bl	80011ec <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	74fb      	strb	r3, [r7, #19]
        break;
 8002976:	e005      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ef      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d15c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800298a:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002994:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01f      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d019      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a20      	ldr	r2, [pc, #128]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fc01 	bl	80011ec <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ec:	e00b      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fbfd 	bl	80011ec <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d902      	bls.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	74fb      	strb	r3, [r7, #19]
            break;
 8002a04:	e006      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ec      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	4904      	ldr	r1, [pc, #16]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a32:	e009      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
 8002a38:	e006      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a48:	7c7b      	ldrb	r3, [r7, #17]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	4a9d      	ldr	r2, [pc, #628]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a66:	4b98      	ldr	r3, [pc, #608]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f023 0203 	bic.w	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	4994      	ldr	r1, [pc, #592]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 020c 	bic.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	498c      	ldr	r1, [pc, #560]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aaa:	4b87      	ldr	r3, [pc, #540]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4983      	ldr	r1, [pc, #524]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002acc:	4b7e      	ldr	r3, [pc, #504]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	497b      	ldr	r1, [pc, #492]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afc:	4972      	ldr	r1, [pc, #456]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b10:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	496a      	ldr	r1, [pc, #424]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b32:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	4961      	ldr	r1, [pc, #388]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b54:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	4959      	ldr	r1, [pc, #356]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b76:	4b54      	ldr	r3, [pc, #336]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	4950      	ldr	r1, [pc, #320]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b98:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	4948      	ldr	r1, [pc, #288]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	493f      	ldr	r1, [pc, #252]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d028      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bea:	4937      	ldr	r1, [pc, #220]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a31      	ldr	r2, [pc, #196]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
 8002c08:	e011      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f8c8 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	491f      	ldr	r1, [pc, #124]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c58:	d106      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c64:	60d3      	str	r3, [r2, #12]
 8002c66:	e011      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f899 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d02b      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb6:	d109      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f867 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02f      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	4928      	ldr	r1, [pc, #160]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	2102      	movs	r1, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f844 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d014      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3320      	adds	r3, #32
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f925 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d76:	490d      	ldr	r1, [pc, #52]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dbe:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10d      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
       ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d047      	beq.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e044      	b.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d018      	beq.n	8002e36 <RCCEx_PLLSAI1_Config+0x86>
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d825      	bhi.n	8002e54 <RCCEx_PLLSAI1_Config+0xa4>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <RCCEx_PLLSAI1_Config+0x62>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d009      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x74>
 8002e10:	e020      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e22:	e01a      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e24:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e013      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e36:	4b57      	ldr	r3, [pc, #348]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e52:	e006      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e004      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	4944      	ldr	r1, [pc, #272]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d17d      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe f9a8 	bl	80011ec <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e9e:	e009      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ea0:	f7fe f9a4 	bl	80011ec <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb2:	e005      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eb4:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ef      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d160      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	0211      	lsls	r1, r2, #8
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	0912      	lsrs	r2, r2, #4
 8002ee4:	0452      	lsls	r2, r2, #17
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	492a      	ldr	r1, [pc, #168]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	610b      	str	r3, [r1, #16]
 8002eee:	e027      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d112      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002efe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	0211      	lsls	r1, r2, #8
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6912      	ldr	r2, [r2, #16]
 8002f0c:	0852      	lsrs	r2, r2, #1
 8002f0e:	3a01      	subs	r2, #1
 8002f10:	0552      	lsls	r2, r2, #21
 8002f12:	430a      	orrs	r2, r1
 8002f14:	491f      	ldr	r1, [pc, #124]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	610b      	str	r3, [r1, #16]
 8002f1a:	e011      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	0211      	lsls	r1, r2, #8
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6952      	ldr	r2, [r2, #20]
 8002f32:	0852      	lsrs	r2, r2, #1
 8002f34:	3a01      	subs	r2, #1
 8002f36:	0652      	lsls	r2, r2, #25
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4916      	ldr	r1, [pc, #88]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe f94e 	bl	80011ec <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f52:	e009      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f54:	f7fe f94a 	bl	80011ec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	73fb      	strb	r3, [r7, #15]
          break;
 8002f66:	e005      	b.n	8002f74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ef      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4904      	ldr	r1, [pc, #16]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fb2:	4b67      	ldr	r3, [pc, #412]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0203 	and.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10d      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fca:	4b61      	ldr	r3, [pc, #388]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d047      	beq.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e044      	b.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d018      	beq.n	800301e <RCCEx_PLLSAI2_Config+0x86>
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d825      	bhi.n	800303c <RCCEx_PLLSAI2_Config+0xa4>
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d002      	beq.n	8002ffa <RCCEx_PLLSAI2_Config+0x62>
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d009      	beq.n	800300c <RCCEx_PLLSAI2_Config+0x74>
 8002ff8:	e020      	b.n	800303c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ffa:	4b55      	ldr	r3, [pc, #340]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11d      	bne.n	8003042 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300a:	e01a      	b.n	8003042 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800300c:	4b50      	ldr	r3, [pc, #320]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e013      	b.n	8003046 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800301e:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800303a:	e006      	b.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e004      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800304a:	bf00      	nop
    }

    if(status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10d      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	430b      	orrs	r3, r1
 8003068:	4939      	ldr	r1, [pc, #228]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d167      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003074:	4b36      	ldr	r3, [pc, #216]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a35      	ldr	r2, [pc, #212]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003080:	f7fe f8b4 	bl	80011ec <HAL_GetTick>
 8003084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003086:	e009      	b.n	800309c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003088:	f7fe f8b0 	bl	80011ec <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d902      	bls.n	800309c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	73fb      	strb	r3, [r7, #15]
        break;
 800309a:	e005      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ef      	bne.n	8003088 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d14a      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d111      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030b4:	4b26      	ldr	r3, [pc, #152]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6892      	ldr	r2, [r2, #8]
 80030c4:	0211      	lsls	r1, r2, #8
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	0912      	lsrs	r2, r2, #4
 80030cc:	0452      	lsls	r2, r2, #17
 80030ce:	430a      	orrs	r2, r1
 80030d0:	491f      	ldr	r1, [pc, #124]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	614b      	str	r3, [r1, #20]
 80030d6:	e011      	b.n	80030fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	0211      	lsls	r1, r2, #8
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6912      	ldr	r2, [r2, #16]
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0652      	lsls	r2, r2, #25
 80030f4:	430a      	orrs	r2, r1
 80030f6:	4916      	ldr	r1, [pc, #88]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fe f870 	bl	80011ec <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310e:	e009      	b.n	8003124 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003110:	f7fe f86c 	bl	80011ec <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d902      	bls.n	8003124 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	73fb      	strb	r3, [r7, #15]
          break;
 8003122:	e005      	b.n	8003130 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ef      	beq.n	8003110 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4904      	ldr	r1, [pc, #16]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e049      	b.n	80031fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fde0 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 fab0 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e049      	b.n	80032a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f841 	bl	80032b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 fa59 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_TIM_PWM_Start+0x24>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e03c      	b.n	8003362 <HAL_TIM_PWM_Start+0x9e>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d109      	bne.n	8003302 <HAL_TIM_PWM_Start+0x3e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	e02f      	b.n	8003362 <HAL_TIM_PWM_Start+0x9e>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d109      	bne.n	800331c <HAL_TIM_PWM_Start+0x58>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e022      	b.n	8003362 <HAL_TIM_PWM_Start+0x9e>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d109      	bne.n	8003336 <HAL_TIM_PWM_Start+0x72>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	e015      	b.n	8003362 <HAL_TIM_PWM_Start+0x9e>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b10      	cmp	r3, #16
 800333a:	d109      	bne.n	8003350 <HAL_TIM_PWM_Start+0x8c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e008      	b.n	8003362 <HAL_TIM_PWM_Start+0x9e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e09c      	b.n	80034a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <HAL_TIM_PWM_Start+0xb6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003378:	e023      	b.n	80033c2 <HAL_TIM_PWM_Start+0xfe>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d104      	bne.n	800338a <HAL_TIM_PWM_Start+0xc6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003388:	e01b      	b.n	80033c2 <HAL_TIM_PWM_Start+0xfe>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d104      	bne.n	800339a <HAL_TIM_PWM_Start+0xd6>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003398:	e013      	b.n	80033c2 <HAL_TIM_PWM_Start+0xfe>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d104      	bne.n	80033aa <HAL_TIM_PWM_Start+0xe6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033a8:	e00b      	b.n	80033c2 <HAL_TIM_PWM_Start+0xfe>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d104      	bne.n	80033ba <HAL_TIM_PWM_Start+0xf6>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033b8:	e003      	b.n	80033c2 <HAL_TIM_PWM_Start+0xfe>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2201      	movs	r2, #1
 80033c8:	6839      	ldr	r1, [r7, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fd04 	bl	8003dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a35      	ldr	r2, [pc, #212]	; (80034ac <HAL_TIM_PWM_Start+0x1e8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_TIM_PWM_Start+0x13e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <HAL_TIM_PWM_Start+0x1ec>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_TIM_PWM_Start+0x13e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a32      	ldr	r2, [pc, #200]	; (80034b4 <HAL_TIM_PWM_Start+0x1f0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_TIM_PWM_Start+0x13e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_TIM_PWM_Start+0x1f4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_TIM_PWM_Start+0x13e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <HAL_TIM_PWM_Start+0x1f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_TIM_PWM_Start+0x142>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_TIM_PWM_Start+0x144>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a22      	ldr	r2, [pc, #136]	; (80034ac <HAL_TIM_PWM_Start+0x1e8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_TIM_PWM_Start+0x19e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d018      	beq.n	8003462 <HAL_TIM_PWM_Start+0x19e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <HAL_TIM_PWM_Start+0x1fc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_TIM_PWM_Start+0x19e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_TIM_PWM_Start+0x200>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIM_PWM_Start+0x19e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_TIM_PWM_Start+0x204>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIM_PWM_Start+0x19e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <HAL_TIM_PWM_Start+0x1ec>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIM_PWM_Start+0x19e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_TIM_PWM_Start+0x1f0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d115      	bne.n	800348e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_TIM_PWM_Start+0x208>)
 800346a:	4013      	ands	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b06      	cmp	r3, #6
 8003472:	d015      	beq.n	80034a0 <HAL_TIM_PWM_Start+0x1dc>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347a:	d011      	beq.n	80034a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	e008      	b.n	80034a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e000      	b.n	80034a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40013400 	.word	0x40013400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40014400 	.word	0x40014400
 80034bc:	40014800 	.word	0x40014800
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	00010007 	.word	0x00010007

080034d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e0ff      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b14      	cmp	r3, #20
 80034fa:	f200 80f0 	bhi.w	80036de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003559 	.word	0x08003559
 8003508:	080036df 	.word	0x080036df
 800350c:	080036df 	.word	0x080036df
 8003510:	080036df 	.word	0x080036df
 8003514:	08003599 	.word	0x08003599
 8003518:	080036df 	.word	0x080036df
 800351c:	080036df 	.word	0x080036df
 8003520:	080036df 	.word	0x080036df
 8003524:	080035db 	.word	0x080035db
 8003528:	080036df 	.word	0x080036df
 800352c:	080036df 	.word	0x080036df
 8003530:	080036df 	.word	0x080036df
 8003534:	0800361b 	.word	0x0800361b
 8003538:	080036df 	.word	0x080036df
 800353c:	080036df 	.word	0x080036df
 8003540:	080036df 	.word	0x080036df
 8003544:	0800365d 	.word	0x0800365d
 8003548:	080036df 	.word	0x080036df
 800354c:	080036df 	.word	0x080036df
 8003550:	080036df 	.word	0x080036df
 8003554:	0800369d 	.word	0x0800369d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f964 	bl	800382c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0204 	bic.w	r2, r2, #4
 8003582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6999      	ldr	r1, [r3, #24]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	619a      	str	r2, [r3, #24]
      break;
 8003596:	e0a5      	b.n	80036e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f9d4 	bl	800394c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6999      	ldr	r1, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	021a      	lsls	r2, r3, #8
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	619a      	str	r2, [r3, #24]
      break;
 80035d8:	e084      	b.n	80036e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa3d 	bl	8003a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0208 	orr.w	r2, r2, #8
 80035f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0204 	bic.w	r2, r2, #4
 8003604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69d9      	ldr	r1, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	61da      	str	r2, [r3, #28]
      break;
 8003618:	e064      	b.n	80036e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 faa5 	bl	8003b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69d9      	ldr	r1, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	021a      	lsls	r2, r3, #8
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	61da      	str	r2, [r3, #28]
      break;
 800365a:	e043      	b.n	80036e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 faee 	bl	8003c44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800369a:	e023      	b.n	80036e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fb32 	bl	8003d0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036dc:	e002      	b.n	80036e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
      break;
 80036e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop

080036f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <TIM_Base_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d00f      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3c      	ldr	r2, [pc, #240]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <TIM_Base_SetConfig+0x114>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d01b      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d017      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a28      	ldr	r2, [pc, #160]	; (8003820 <TIM_Base_SetConfig+0x128>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a27      	ldr	r2, [pc, #156]	; (8003824 <TIM_Base_SetConfig+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0x9a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a26      	ldr	r2, [pc, #152]	; (8003828 <TIM_Base_SetConfig+0x130>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <TIM_Base_SetConfig+0x114>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00f      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <TIM_Base_SetConfig+0x124>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <TIM_Base_SetConfig+0x128>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d007      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <TIM_Base_SetConfig+0x12c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0f      	ldr	r2, [pc, #60]	; (8003828 <TIM_Base_SetConfig+0x130>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	f023 0201 	bic.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 0302 	bic.w	r3, r3, #2
 8003878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <TIM_OC1_SetConfig+0x10c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00f      	beq.n	80038ac <TIM_OC1_SetConfig+0x80>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a2b      	ldr	r2, [pc, #172]	; (800393c <TIM_OC1_SetConfig+0x110>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_OC1_SetConfig+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <TIM_OC1_SetConfig+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_OC1_SetConfig+0x80>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <TIM_OC1_SetConfig+0x118>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC1_SetConfig+0x80>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a28      	ldr	r2, [pc, #160]	; (8003948 <TIM_OC1_SetConfig+0x11c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10c      	bne.n	80038c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0308 	bic.w	r3, r3, #8
 80038b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <TIM_OC1_SetConfig+0x10c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_OC1_SetConfig+0xc2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1a      	ldr	r2, [pc, #104]	; (800393c <TIM_OC1_SetConfig+0x110>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_OC1_SetConfig+0xc2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a19      	ldr	r2, [pc, #100]	; (8003940 <TIM_OC1_SetConfig+0x114>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_OC1_SetConfig+0xc2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a18      	ldr	r2, [pc, #96]	; (8003944 <TIM_OC1_SetConfig+0x118>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC1_SetConfig+0xc2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <TIM_OC1_SetConfig+0x11c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d111      	bne.n	8003912 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40013400 	.word	0x40013400
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800

0800394c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0210 	bic.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0320 	bic.w	r3, r3, #32
 800399a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <TIM_OC2_SetConfig+0x100>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_OC2_SetConfig+0x6c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <TIM_OC2_SetConfig+0x104>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10d      	bne.n	80039d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <TIM_OC2_SetConfig+0x100>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00f      	beq.n	80039fc <TIM_OC2_SetConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <TIM_OC2_SetConfig+0x104>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00b      	beq.n	80039fc <TIM_OC2_SetConfig+0xb0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <TIM_OC2_SetConfig+0x108>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d007      	beq.n	80039fc <TIM_OC2_SetConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <TIM_OC2_SetConfig+0x10c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d003      	beq.n	80039fc <TIM_OC2_SetConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <TIM_OC2_SetConfig+0x110>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d113      	bne.n	8003a24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <TIM_OC3_SetConfig+0xfc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC3_SetConfig+0x6a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <TIM_OC3_SetConfig+0x100>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d10d      	bne.n	8003ae6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <TIM_OC3_SetConfig+0xfc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00f      	beq.n	8003b0e <TIM_OC3_SetConfig+0xae>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <TIM_OC3_SetConfig+0x100>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_OC3_SetConfig+0xae>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <TIM_OC3_SetConfig+0x104>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_OC3_SetConfig+0xae>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <TIM_OC3_SetConfig+0x108>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_OC3_SetConfig+0xae>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <TIM_OC3_SetConfig+0x10c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d113      	bne.n	8003b36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40013400 	.word	0x40013400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800

08003b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <TIM_OC4_SetConfig+0xc0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00f      	beq.n	8003bf4 <TIM_OC4_SetConfig+0x84>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <TIM_OC4_SetConfig+0xc4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00b      	beq.n	8003bf4 <TIM_OC4_SetConfig+0x84>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <TIM_OC4_SetConfig+0xc8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_OC4_SetConfig+0x84>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <TIM_OC4_SetConfig+0xcc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC4_SetConfig+0x84>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <TIM_OC4_SetConfig+0xd0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d109      	bne.n	8003c08 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	019b      	lsls	r3, r3, #6
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	621a      	str	r2, [r3, #32]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40013400 	.word	0x40013400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800

08003c44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <TIM_OC5_SetConfig+0xb4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_OC5_SetConfig+0x7a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <TIM_OC5_SetConfig+0xb8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_OC5_SetConfig+0x7a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <TIM_OC5_SetConfig+0xbc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_OC5_SetConfig+0x7a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <TIM_OC5_SetConfig+0xc0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_OC5_SetConfig+0x7a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <TIM_OC5_SetConfig+0xc4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d109      	bne.n	8003cd2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40013400 	.word	0x40013400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800

08003d0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	051b      	lsls	r3, r3, #20
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <TIM_OC6_SetConfig+0xb8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00f      	beq.n	8003d88 <TIM_OC6_SetConfig+0x7c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <TIM_OC6_SetConfig+0xbc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_OC6_SetConfig+0x7c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <TIM_OC6_SetConfig+0xc0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <TIM_OC6_SetConfig+0x7c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <TIM_OC6_SetConfig+0xc4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_OC6_SetConfig+0x7c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <TIM_OC6_SetConfig+0xc8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d109      	bne.n	8003d9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	029b      	lsls	r3, r3, #10
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40013400 	.word	0x40013400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800

08003dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2201      	movs	r2, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e065      	b.n	8003f0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d115      	bne.n	8003efa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	051b      	lsls	r3, r3, #20
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40013400 	.word	0x40013400

08003f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e040      	b.n	8003fb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc ff52 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	; 0x24
 8003f4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f9f4 	bl	800434c <UART_SetConfig>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e022      	b.n	8003fb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fca0 	bl	80048bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fd27 	bl	8004a00 <UART_CheckIdleState>
 8003fb2:	4603      	mov	r3, r0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02b      	b.n	8004026 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2224      	movs	r2, #36	; 0x24
 8003fd2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fc ff53 	bl	8000ea8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b08a      	sub	sp, #40	; 0x28
 8004032:	af02      	add	r7, sp, #8
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004042:	2b20      	cmp	r3, #32
 8004044:	f040 8082 	bne.w	800414c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_UART_Transmit+0x26>
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e07a      	b.n	800414e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_UART_Transmit+0x38>
 8004062:	2302      	movs	r3, #2
 8004064:	e073      	b.n	800414e <HAL_UART_Transmit+0x120>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2221      	movs	r2, #33	; 0x21
 800407a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407c:	f7fd f8b6 	bl	80011ec <HAL_GetTick>
 8004080:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409a:	d108      	bne.n	80040ae <HAL_UART_Transmit+0x80>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e003      	b.n	80040b6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040be:	e02d      	b.n	800411c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2180      	movs	r1, #128	; 0x80
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fce1 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e039      	b.n	800414e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	881a      	ldrh	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ec:	b292      	uxth	r2, r2
 80040ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	3302      	adds	r3, #2
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e008      	b.n	800410a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	b292      	uxth	r2, r2
 8004102:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1cb      	bne.n	80040c0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	2140      	movs	r1, #64	; 0x40
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 fcad 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e005      	b.n	800414e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b0a0      	sub	sp, #128	; 0x80
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800416c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800416e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004172:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800417c:	66bb      	str	r3, [r7, #104]	; 0x68
 800417e:	667a      	str	r2, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004182:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800418a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e6      	bne.n	800415e <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80041a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041b0:	657a      	str	r2, [r7, #84]	; 0x54
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d118      	bne.n	80041fe <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	f023 0310 	bic.w	r3, r3, #16
 80041e0:	677b      	str	r3, [r7, #116]	; 0x74
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
 80041ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e6      	bne.n	80041cc <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d137      	bne.n	800427c <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3308      	adds	r3, #8
 8004212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	61fb      	str	r3, [r7, #28]
   return(result);
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004222:	673b      	str	r3, [r7, #112]	; 0x70
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3308      	adds	r3, #8
 800422a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800422c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d019      	beq.n	800427c <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424c:	2200      	movs	r2, #0
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004254:	4618      	mov	r0, r3
 8004256:	f7fd f8ba 	bl	80013ce <HAL_DMA_Abort>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004264:	4618      	mov	r0, r3
 8004266:	f7fd f8f0 	bl	800144a <HAL_DMA_GetError>
 800426a:	4603      	mov	r3, r0
 800426c:	2b20      	cmp	r3, #32
 800426e:	d105      	bne.n	800427c <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2210      	movs	r2, #16
 8004274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e062      	b.n	8004342 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d137      	bne.n	80042fa <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	60bb      	str	r3, [r7, #8]
   return(result);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042aa:	61ba      	str	r2, [r7, #24]
 80042ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	613b      	str	r3, [r7, #16]
   return(result);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e5      	bne.n	800428a <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d019      	beq.n	80042fa <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	2200      	movs	r2, #0
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd f87b 	bl	80013ce <HAL_DMA_Abort>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fd f8b1 	bl	800144a <HAL_DMA_GetError>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d105      	bne.n	80042fa <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2210      	movs	r2, #16
 80042f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e023      	b.n	8004342 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	220f      	movs	r2, #15
 8004310:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	8b1b      	ldrh	r3, [r3, #24]
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0208 	orr.w	r2, r2, #8
 8004322:	b292      	uxth	r2, r2
 8004324:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3780      	adds	r7, #128	; 0x80
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b08a      	sub	sp, #40	; 0x28
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	431a      	orrs	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4313      	orrs	r3, r2
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4ba4      	ldr	r3, [pc, #656]	; (800460c <UART_SetConfig+0x2c0>)
 800437c:	4013      	ands	r3, r2
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004384:	430b      	orrs	r3, r1
 8004386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a99      	ldr	r2, [pc, #612]	; (8004610 <UART_SetConfig+0x2c4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	4313      	orrs	r3, r2
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	430a      	orrs	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a90      	ldr	r2, [pc, #576]	; (8004614 <UART_SetConfig+0x2c8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d126      	bne.n	8004424 <UART_SetConfig+0xd8>
 80043d6:	4b90      	ldr	r3, [pc, #576]	; (8004618 <UART_SetConfig+0x2cc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d81b      	bhi.n	800441c <UART_SetConfig+0xd0>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0xa0>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	08004405 	.word	0x08004405
 80043f8:	08004415 	.word	0x08004415
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e116      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e112      	b.n	8004632 <UART_SetConfig+0x2e6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e10e      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e10a      	b.n	8004632 <UART_SetConfig+0x2e6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e106      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7c      	ldr	r2, [pc, #496]	; (800461c <UART_SetConfig+0x2d0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d138      	bne.n	80044a0 <UART_SetConfig+0x154>
 800442e:	4b7a      	ldr	r3, [pc, #488]	; (8004618 <UART_SetConfig+0x2cc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b0c      	cmp	r3, #12
 800443a:	d82d      	bhi.n	8004498 <UART_SetConfig+0x14c>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0xf8>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004479 	.word	0x08004479
 8004448:	08004499 	.word	0x08004499
 800444c:	08004499 	.word	0x08004499
 8004450:	08004499 	.word	0x08004499
 8004454:	08004489 	.word	0x08004489
 8004458:	08004499 	.word	0x08004499
 800445c:	08004499 	.word	0x08004499
 8004460:	08004499 	.word	0x08004499
 8004464:	08004481 	.word	0x08004481
 8004468:	08004499 	.word	0x08004499
 800446c:	08004499 	.word	0x08004499
 8004470:	08004499 	.word	0x08004499
 8004474:	08004491 	.word	0x08004491
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447e:	e0d8      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004480:	2302      	movs	r3, #2
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e0d4      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e0d0      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e0cc      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e0c8      	b.n	8004632 <UART_SetConfig+0x2e6>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a5e      	ldr	r2, [pc, #376]	; (8004620 <UART_SetConfig+0x2d4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d125      	bne.n	80044f6 <UART_SetConfig+0x1aa>
 80044aa:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <UART_SetConfig+0x2cc>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d016      	beq.n	80044e6 <UART_SetConfig+0x19a>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d818      	bhi.n	80044ee <UART_SetConfig+0x1a2>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d00a      	beq.n	80044d6 <UART_SetConfig+0x18a>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d814      	bhi.n	80044ee <UART_SetConfig+0x1a2>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <UART_SetConfig+0x182>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d008      	beq.n	80044de <UART_SetConfig+0x192>
 80044cc:	e00f      	b.n	80044ee <UART_SetConfig+0x1a2>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d4:	e0ad      	b.n	8004632 <UART_SetConfig+0x2e6>
 80044d6:	2302      	movs	r3, #2
 80044d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044dc:	e0a9      	b.n	8004632 <UART_SetConfig+0x2e6>
 80044de:	2304      	movs	r3, #4
 80044e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e4:	e0a5      	b.n	8004632 <UART_SetConfig+0x2e6>
 80044e6:	2308      	movs	r3, #8
 80044e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ec:	e0a1      	b.n	8004632 <UART_SetConfig+0x2e6>
 80044ee:	2310      	movs	r3, #16
 80044f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f4:	e09d      	b.n	8004632 <UART_SetConfig+0x2e6>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4a      	ldr	r2, [pc, #296]	; (8004624 <UART_SetConfig+0x2d8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d125      	bne.n	800454c <UART_SetConfig+0x200>
 8004500:	4b45      	ldr	r3, [pc, #276]	; (8004618 <UART_SetConfig+0x2cc>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800450a:	2bc0      	cmp	r3, #192	; 0xc0
 800450c:	d016      	beq.n	800453c <UART_SetConfig+0x1f0>
 800450e:	2bc0      	cmp	r3, #192	; 0xc0
 8004510:	d818      	bhi.n	8004544 <UART_SetConfig+0x1f8>
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d00a      	beq.n	800452c <UART_SetConfig+0x1e0>
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d814      	bhi.n	8004544 <UART_SetConfig+0x1f8>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <UART_SetConfig+0x1d8>
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d008      	beq.n	8004534 <UART_SetConfig+0x1e8>
 8004522:	e00f      	b.n	8004544 <UART_SetConfig+0x1f8>
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e082      	b.n	8004632 <UART_SetConfig+0x2e6>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e07e      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e07a      	b.n	8004632 <UART_SetConfig+0x2e6>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e076      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e072      	b.n	8004632 <UART_SetConfig+0x2e6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a35      	ldr	r2, [pc, #212]	; (8004628 <UART_SetConfig+0x2dc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d12a      	bne.n	80045ac <UART_SetConfig+0x260>
 8004556:	4b30      	ldr	r3, [pc, #192]	; (8004618 <UART_SetConfig+0x2cc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004564:	d01a      	beq.n	800459c <UART_SetConfig+0x250>
 8004566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456a:	d81b      	bhi.n	80045a4 <UART_SetConfig+0x258>
 800456c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004570:	d00c      	beq.n	800458c <UART_SetConfig+0x240>
 8004572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004576:	d815      	bhi.n	80045a4 <UART_SetConfig+0x258>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <UART_SetConfig+0x238>
 800457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004580:	d008      	beq.n	8004594 <UART_SetConfig+0x248>
 8004582:	e00f      	b.n	80045a4 <UART_SetConfig+0x258>
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e052      	b.n	8004632 <UART_SetConfig+0x2e6>
 800458c:	2302      	movs	r3, #2
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e04e      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004594:	2304      	movs	r3, #4
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e04a      	b.n	8004632 <UART_SetConfig+0x2e6>
 800459c:	2308      	movs	r3, #8
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e046      	b.n	8004632 <UART_SetConfig+0x2e6>
 80045a4:	2310      	movs	r3, #16
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e042      	b.n	8004632 <UART_SetConfig+0x2e6>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a17      	ldr	r2, [pc, #92]	; (8004610 <UART_SetConfig+0x2c4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d13a      	bne.n	800462c <UART_SetConfig+0x2e0>
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <UART_SetConfig+0x2cc>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c4:	d01a      	beq.n	80045fc <UART_SetConfig+0x2b0>
 80045c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ca:	d81b      	bhi.n	8004604 <UART_SetConfig+0x2b8>
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d00c      	beq.n	80045ec <UART_SetConfig+0x2a0>
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d6:	d815      	bhi.n	8004604 <UART_SetConfig+0x2b8>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <UART_SetConfig+0x298>
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	d008      	beq.n	80045f4 <UART_SetConfig+0x2a8>
 80045e2:	e00f      	b.n	8004604 <UART_SetConfig+0x2b8>
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e022      	b.n	8004632 <UART_SetConfig+0x2e6>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e01e      	b.n	8004632 <UART_SetConfig+0x2e6>
 80045f4:	2304      	movs	r3, #4
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e01a      	b.n	8004632 <UART_SetConfig+0x2e6>
 80045fc:	2308      	movs	r3, #8
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e016      	b.n	8004632 <UART_SetConfig+0x2e6>
 8004604:	2310      	movs	r3, #16
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e012      	b.n	8004632 <UART_SetConfig+0x2e6>
 800460c:	efff69f3 	.word	0xefff69f3
 8004610:	40008000 	.word	0x40008000
 8004614:	40013800 	.word	0x40013800
 8004618:	40021000 	.word	0x40021000
 800461c:	40004400 	.word	0x40004400
 8004620:	40004800 	.word	0x40004800
 8004624:	40004c00 	.word	0x40004c00
 8004628:	40005000 	.word	0x40005000
 800462c:	2310      	movs	r3, #16
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a9f      	ldr	r2, [pc, #636]	; (80048b4 <UART_SetConfig+0x568>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d17a      	bne.n	8004732 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800463c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004640:	2b08      	cmp	r3, #8
 8004642:	d824      	bhi.n	800468e <UART_SetConfig+0x342>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <UART_SetConfig+0x300>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004671 	.word	0x08004671
 8004650:	0800468f 	.word	0x0800468f
 8004654:	08004679 	.word	0x08004679
 8004658:	0800468f 	.word	0x0800468f
 800465c:	0800467f 	.word	0x0800467f
 8004660:	0800468f 	.word	0x0800468f
 8004664:	0800468f 	.word	0x0800468f
 8004668:	0800468f 	.word	0x0800468f
 800466c:	08004687 	.word	0x08004687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004670:	f7fe f828 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8004674:	61f8      	str	r0, [r7, #28]
        break;
 8004676:	e010      	b.n	800469a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b8f      	ldr	r3, [pc, #572]	; (80048b8 <UART_SetConfig+0x56c>)
 800467a:	61fb      	str	r3, [r7, #28]
        break;
 800467c:	e00d      	b.n	800469a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7fd ff89 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8004682:	61f8      	str	r0, [r7, #28]
        break;
 8004684:	e009      	b.n	800469a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468a:	61fb      	str	r3, [r7, #28]
        break;
 800468c:	e005      	b.n	800469a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004698:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80fb 	beq.w	8004898 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d305      	bcc.n	80046be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d903      	bls.n	80046c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046c4:	e0e8      	b.n	8004898 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2200      	movs	r2, #0
 80046ca:	461c      	mov	r4, r3
 80046cc:	4615      	mov	r5, r2
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	022b      	lsls	r3, r5, #8
 80046d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046dc:	0222      	lsls	r2, r4, #8
 80046de:	68f9      	ldr	r1, [r7, #12]
 80046e0:	6849      	ldr	r1, [r1, #4]
 80046e2:	0849      	lsrs	r1, r1, #1
 80046e4:	2000      	movs	r0, #0
 80046e6:	4688      	mov	r8, r1
 80046e8:	4681      	mov	r9, r0
 80046ea:	eb12 0a08 	adds.w	sl, r2, r8
 80046ee:	eb43 0b09 	adc.w	fp, r3, r9
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004700:	4650      	mov	r0, sl
 8004702:	4659      	mov	r1, fp
 8004704:	f7fb fd60 	bl	80001c8 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4613      	mov	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d308      	bcc.n	800472a <UART_SetConfig+0x3de>
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800471e:	d204      	bcs.n	800472a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	e0b6      	b.n	8004898 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004730:	e0b2      	b.n	8004898 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473a:	d15e      	bne.n	80047fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800473c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004740:	2b08      	cmp	r3, #8
 8004742:	d828      	bhi.n	8004796 <UART_SetConfig+0x44a>
 8004744:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x400>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fd ffa8 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8004774:	61f8      	str	r0, [r7, #28]
        break;
 8004776:	e014      	b.n	80047a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fd ffba 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 800477c:	61f8      	str	r0, [r7, #28]
        break;
 800477e:	e010      	b.n	80047a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b4d      	ldr	r3, [pc, #308]	; (80048b8 <UART_SetConfig+0x56c>)
 8004782:	61fb      	str	r3, [r7, #28]
        break;
 8004784:	e00d      	b.n	80047a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fd ff05 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800478a:	61f8      	str	r0, [r7, #28]
        break;
 800478c:	e009      	b.n	80047a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	61fb      	str	r3, [r7, #28]
        break;
 8004794:	e005      	b.n	80047a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d077      	beq.n	8004898 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005a      	lsls	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	441a      	add	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d916      	bls.n	80047f2 <UART_SetConfig+0x4a6>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d212      	bcs.n	80047f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f023 030f 	bic.w	r3, r3, #15
 80047d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	8afb      	ldrh	r3, [r7, #22]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	8afa      	ldrh	r2, [r7, #22]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e052      	b.n	8004898 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047f8:	e04e      	b.n	8004898 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d827      	bhi.n	8004852 <UART_SetConfig+0x506>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x4bc>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	08004853 	.word	0x08004853
 8004818:	08004843 	.word	0x08004843
 800481c:	08004853 	.word	0x08004853
 8004820:	08004853 	.word	0x08004853
 8004824:	08004853 	.word	0x08004853
 8004828:	0800484b 	.word	0x0800484b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fd ff4a 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8004830:	61f8      	str	r0, [r7, #28]
        break;
 8004832:	e014      	b.n	800485e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004834:	f7fd ff5c 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8004838:	61f8      	str	r0, [r7, #28]
        break;
 800483a:	e010      	b.n	800485e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483c:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <UART_SetConfig+0x56c>)
 800483e:	61fb      	str	r3, [r7, #28]
        break;
 8004840:	e00d      	b.n	800485e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004842:	f7fd fea7 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8004846:	61f8      	str	r0, [r7, #28]
        break;
 8004848:	e009      	b.n	800485e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484e:	61fb      	str	r3, [r7, #28]
        break;
 8004850:	e005      	b.n	800485e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800485c:	bf00      	nop
    }

    if (pclk != 0U)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d019      	beq.n	8004898 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	085a      	lsrs	r2, r3, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d909      	bls.n	8004892 <UART_SetConfig+0x546>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d205      	bcs.n	8004892 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60da      	str	r2, [r3, #12]
 8004890:	e002      	b.n	8004898 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b2:	bf00      	nop
 80048b4:	40008000 	.word	0x40008000
 80048b8:	00f42400 	.word	0x00f42400

080048bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01a      	beq.n	80049d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ba:	d10a      	bne.n	80049d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a10:	f7fc fbec 	bl	80011ec <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d10e      	bne.n	8004a42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f82d 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e023      	b.n	8004a8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d10e      	bne.n	8004a6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f817 	bl	8004a92 <UART_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e00d      	b.n	8004a8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b09c      	sub	sp, #112	; 0x70
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa2:	e0a5      	b.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	f000 80a1 	beq.w	8004bf0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fc fb9d 	bl	80011ec <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d13e      	bne.n	8004b42 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e6      	bne.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3308      	adds	r3, #8
 8004b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b16:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e067      	b.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d04f      	beq.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	d147      	bne.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b68:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e6      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bbc:	623a      	str	r2, [r7, #32]
 8004bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	69f9      	ldr	r1, [r7, #28]
 8004bc2:	6a3a      	ldr	r2, [r7, #32]
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e010      	b.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	f43f af4a 	beq.w	8004aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3770      	adds	r7, #112	; 0x70
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <__libc_init_array>:
 8004c1c:	b570      	push	{r4, r5, r6, lr}
 8004c1e:	4d0d      	ldr	r5, [pc, #52]	; (8004c54 <__libc_init_array+0x38>)
 8004c20:	4c0d      	ldr	r4, [pc, #52]	; (8004c58 <__libc_init_array+0x3c>)
 8004c22:	1b64      	subs	r4, r4, r5
 8004c24:	10a4      	asrs	r4, r4, #2
 8004c26:	2600      	movs	r6, #0
 8004c28:	42a6      	cmp	r6, r4
 8004c2a:	d109      	bne.n	8004c40 <__libc_init_array+0x24>
 8004c2c:	4d0b      	ldr	r5, [pc, #44]	; (8004c5c <__libc_init_array+0x40>)
 8004c2e:	4c0c      	ldr	r4, [pc, #48]	; (8004c60 <__libc_init_array+0x44>)
 8004c30:	f000 f820 	bl	8004c74 <_init>
 8004c34:	1b64      	subs	r4, r4, r5
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	2600      	movs	r6, #0
 8004c3a:	42a6      	cmp	r6, r4
 8004c3c:	d105      	bne.n	8004c4a <__libc_init_array+0x2e>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c44:	4798      	blx	r3
 8004c46:	3601      	adds	r6, #1
 8004c48:	e7ee      	b.n	8004c28 <__libc_init_array+0xc>
 8004c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c4e:	4798      	blx	r3
 8004c50:	3601      	adds	r6, #1
 8004c52:	e7f2      	b.n	8004c3a <__libc_init_array+0x1e>
 8004c54:	08004ce4 	.word	0x08004ce4
 8004c58:	08004ce4 	.word	0x08004ce4
 8004c5c:	08004ce4 	.word	0x08004ce4
 8004c60:	08004ce8 	.word	0x08004ce8

08004c64 <memset>:
 8004c64:	4402      	add	r2, r0
 8004c66:	4603      	mov	r3, r0
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d100      	bne.n	8004c6e <memset+0xa>
 8004c6c:	4770      	bx	lr
 8004c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c72:	e7f9      	b.n	8004c68 <memset+0x4>

08004c74 <_init>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	bf00      	nop
 8004c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7a:	bc08      	pop	{r3}
 8004c7c:	469e      	mov	lr, r3
 8004c7e:	4770      	bx	lr

08004c80 <_fini>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr
