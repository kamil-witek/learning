
adaptive_freq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007924  08007924  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800792c  0800792c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800792c  0800792c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000084  080079b8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080079b8  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014007  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272f  00000000  00000000  000340bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  000367f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00037970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d31  00000000  00000000  000389f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ccc  00000000  00000000  00060729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6ec4  00000000  00000000  000753f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c2b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e88  00000000  00000000  0016c30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007754 	.word	0x08007754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007754 	.word	0x08007754

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <CPU_set_freq>:
extern void Error_Handler(void);
extern HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct);
extern void MX_USART1_UART_Init(void);	//<< UWAGA! nie moze byc static w mainie!

// freq range: 1-80 MHz
void CPU_set_freq(uint8_t freq, UART_HandleTypeDef *uart_to_reset){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b098      	sub	sp, #96	; 0x60
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]

	//DEINIT + DEFAULT
	HAL_RCC_DeInit();
 80005b0:	f001 fd9e 	bl	80020f0 <HAL_RCC_DeInit>
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2244      	movs	r2, #68	; 0x44
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f006 fbc7 	bl	8006d50 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)	  {		Error_Handler();	  }
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 fd35 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <CPU_set_freq+0x40>
 80005e0:	f000 fd84 	bl	80010ec <Error_Handler>


	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)	  {		Error_Handler();	  }
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fe1a 	bl	8002234 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <CPU_set_freq+0x66>
 8000606:	f000 fd71 	bl	80010ec <Error_Handler>


	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60bb      	str	r3, [r7, #8]
								  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000612:	23a0      	movs	r3, #160	; 0xa0
 8000614:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)	  {		Error_Handler();	  }
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f9e1 	bl	80029ec <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <CPU_set_freq+0x90>
 8000630:	f000 fd5c 	bl	80010ec <Error_Handler>


	if( (freq >= 0)  &  (freq <= 5) ){
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b05      	cmp	r3, #5
 8000638:	d859      	bhi.n	80006ee <CPU_set_freq+0x14a>
		 if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)			  {				Error_Handler();			  }
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f001 fd01 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <CPU_set_freq+0xa8>
 8000648:	f000 fd50 	bl	80010ec <Error_Handler>


			  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
			  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
			  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
			  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
			  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
			  RCC_OscInitStruct.PLL.PLLM = 4;
 8000662:	2304      	movs	r3, #4
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
			  switch(freq){
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	3b02      	subs	r3, #2
 800066a:	2b03      	cmp	r3, #3
 800066c:	d816      	bhi.n	800069c <CPU_set_freq+0xf8>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <CPU_set_freq+0xd0>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000685 	.word	0x08000685
 8000678:	0800068b 	.word	0x0800068b
 800067c:	08000691 	.word	0x08000691
 8000680:	08000697 	.word	0x08000697
			  case 2:
				  RCC_OscInitStruct.PLL.PLLN = 32;
 8000684:	2320      	movs	r3, #32
 8000686:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 8000688:	e00a      	b.n	80006a0 <CPU_set_freq+0xfc>
			  case 3:
				  RCC_OscInitStruct.PLL.PLLN = 48;
 800068a:	2330      	movs	r3, #48	; 0x30
 800068c:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 800068e:	e007      	b.n	80006a0 <CPU_set_freq+0xfc>
			  case 4:
				  RCC_OscInitStruct.PLL.PLLN = 64;
 8000690:	2340      	movs	r3, #64	; 0x40
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 8000694:	e004      	b.n	80006a0 <CPU_set_freq+0xfc>
			  case 5:
				  RCC_OscInitStruct.PLL.PLLN = 80;
 8000696:	2350      	movs	r3, #80	; 0x50
 8000698:	653b      	str	r3, [r7, #80]	; 0x50
				  break;
 800069a:	e001      	b.n	80006a0 <CPU_set_freq+0xfc>
			  default:
				  RCC_OscInitStruct.PLL.PLLN = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	653b      	str	r3, [r7, #80]	; 0x50
			  }
			  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	657b      	str	r3, [r7, #84]	; 0x54
			  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	65bb      	str	r3, [r7, #88]	; 0x58
			  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)			  {				Error_Handler();			  }
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fdbf 	bl	8002234 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <CPU_set_freq+0x11c>
 80006bc:	f000 fd16 	bl	80010ec <Error_Handler>


			  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60bb      	str	r3, [r7, #8]
										  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
			  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2303      	movs	r3, #3
 80006c6:	60fb      	str	r3, [r7, #12]
			  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80006c8:	23a0      	movs	r3, #160	; 0xa0
 80006ca:	613b      	str	r3, [r7, #16]
			  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
			  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

			  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)			  {				Error_Handler();			  }
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 f986 	bl	80029ec <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f000 81bf 	beq.w	8000a66 <CPU_set_freq+0x4c2>
 80006e8:	f000 fd00 	bl	80010ec <Error_Handler>
 80006ec:	e1bb      	b.n	8000a66 <CPU_set_freq+0x4c2>

	}else if( (freq >= 6) & (freq <= 16)){
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	bf8c      	ite	hi
 80006f4:	2301      	movhi	r3, #1
 80006f6:	2300      	movls	r3, #0
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b10      	cmp	r3, #16
 80006fe:	bf94      	ite	ls
 8000700:	2301      	movls	r3, #1
 8000702:	2300      	movhi	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	4013      	ands	r3, r2
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d07a      	beq.n	8000804 <CPU_set_freq+0x260>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 800070e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000712:	f001 fc97 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <CPU_set_freq+0x17c>
 800071c:	f000 fce6 	bl	80010ec <Error_Handler>

		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 8000736:	2304      	movs	r3, #4
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
		  switch(freq){
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3b06      	subs	r3, #6
 800073e:	2b0a      	cmp	r3, #10
 8000740:	d839      	bhi.n	80007b6 <CPU_set_freq+0x212>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <CPU_set_freq+0x1a4>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000775 	.word	0x08000775
 800074c:	0800077b 	.word	0x0800077b
 8000750:	08000781 	.word	0x08000781
 8000754:	08000787 	.word	0x08000787
 8000758:	0800078d 	.word	0x0800078d
 800075c:	08000793 	.word	0x08000793
 8000760:	08000799 	.word	0x08000799
 8000764:	0800079f 	.word	0x0800079f
 8000768:	080007a5 	.word	0x080007a5
 800076c:	080007ab 	.word	0x080007ab
 8000770:	080007b1 	.word	0x080007b1
		  case 6:
			  RCC_OscInitStruct.PLL.PLLN = 24;
 8000774:	2318      	movs	r3, #24
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 8000778:	e01d      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 7:
			  RCC_OscInitStruct.PLL.PLLN = 28;
 800077a:	231c      	movs	r3, #28
 800077c:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 800077e:	e01a      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 8:
			  RCC_OscInitStruct.PLL.PLLN = 32;
 8000780:	2320      	movs	r3, #32
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 8000784:	e017      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 9:
			  RCC_OscInitStruct.PLL.PLLN = 36;
 8000786:	2324      	movs	r3, #36	; 0x24
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 800078a:	e014      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 10:
			  RCC_OscInitStruct.PLL.PLLN = 40;
 800078c:	2328      	movs	r3, #40	; 0x28
 800078e:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 8000790:	e011      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 11:
			  RCC_OscInitStruct.PLL.PLLN = 44;
 8000792:	232c      	movs	r3, #44	; 0x2c
 8000794:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 8000796:	e00e      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 12:
			  RCC_OscInitStruct.PLL.PLLN = 48;
 8000798:	2330      	movs	r3, #48	; 0x30
 800079a:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 800079c:	e00b      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 13:
			  RCC_OscInitStruct.PLL.PLLN = 52;
 800079e:	2334      	movs	r3, #52	; 0x34
 80007a0:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80007a2:	e008      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 14:
			  RCC_OscInitStruct.PLL.PLLN = 56;
 80007a4:	2338      	movs	r3, #56	; 0x38
 80007a6:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80007a8:	e005      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 15:
			  RCC_OscInitStruct.PLL.PLLN = 60;
 80007aa:	233c      	movs	r3, #60	; 0x3c
 80007ac:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80007ae:	e002      	b.n	80007b6 <CPU_set_freq+0x212>
		  case 16:
			  RCC_OscInitStruct.PLL.PLLN = 64;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
			  break;
 80007b4:	bf00      	nop
		  }
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b6:	2307      	movs	r3, #7
 80007b8:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80007be:	2308      	movs	r3, #8
 80007c0:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fd34 	bl	8002234 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <CPU_set_freq+0x232>
 80007d2:	f000 fc8b 	bl	80010ec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2303      	movs	r3, #3
 80007dc:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)		  {		    Error_Handler();		  }
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 f8fb 	bl	80029ec <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f000 8134 	beq.w	8000a66 <CPU_set_freq+0x4c2>
 80007fe:	f000 fc75 	bl	80010ec <Error_Handler>
 8000802:	e130      	b.n	8000a66 <CPU_set_freq+0x4c2>
	}else if( (freq >= 17) & (freq <= 33)){
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b10      	cmp	r3, #16
 8000808:	bf8c      	ite	hi
 800080a:	2301      	movhi	r3, #1
 800080c:	2300      	movls	r3, #0
 800080e:	b2da      	uxtb	r2, r3
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b21      	cmp	r3, #33	; 0x21
 8000814:	bf94      	ite	ls
 8000816:	2301      	movls	r3, #1
 8000818:	2300      	movhi	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4013      	ands	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d03e      	beq.n	80008a2 <CPU_set_freq+0x2fe>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 8000824:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000828:	f001 fc0c 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <CPU_set_freq+0x292>
 8000832:	f000 fc5b 	bl	80010ec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000854:	2307      	movs	r3, #7
 8000856:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800085c:	2304      	movs	r3, #4
 800085e:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fce5 	bl	8002234 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <CPU_set_freq+0x2d0>
 8000870:	f000 fc3c 	bl	80010ec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2303      	movs	r3, #3
 800087a:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)		  {		    Error_Handler();		  }
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f002 f8ac 	bl	80029ec <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	f000 80e5 	beq.w	8000a66 <CPU_set_freq+0x4c2>
 800089c:	f000 fc26 	bl	80010ec <Error_Handler>
 80008a0:	e0e1      	b.n	8000a66 <CPU_set_freq+0x4c2>
	}else if( (freq >= 34) & (freq <= 49)){
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b21      	cmp	r3, #33	; 0x21
 80008a6:	bf8c      	ite	hi
 80008a8:	2301      	movhi	r3, #1
 80008aa:	2300      	movls	r3, #0
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b31      	cmp	r3, #49	; 0x31
 80008b2:	bf94      	ite	ls
 80008b4:	2301      	movls	r3, #1
 80008b6:	2300      	movhi	r3, #0
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4013      	ands	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d03e      	beq.n	8000940 <CPU_set_freq+0x39c>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 80008c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c6:	f001 fbbd 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <CPU_set_freq+0x330>
 80008d0:	f000 fc0c 	bl	80010ec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008de:	2310      	movs	r3, #16
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ea:	2304      	movs	r3, #4
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008f2:	2307      	movs	r3, #7
 80008f4:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4618      	mov	r0, r3
 8000904:	f001 fc96 	bl	8002234 <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <CPU_set_freq+0x36e>
 800090e:	f000 fbed 	bl	80010ec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000912:	230f      	movs	r3, #15
 8000914:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2303      	movs	r3, #3
 8000918:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)		  {		    Error_Handler();		  }
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	2102      	movs	r1, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f002 f85d 	bl	80029ec <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8096 	beq.w	8000a66 <CPU_set_freq+0x4c2>
 800093a:	f000 fbd7 	bl	80010ec <Error_Handler>
 800093e:	e092      	b.n	8000a66 <CPU_set_freq+0x4c2>
	}else if( (freq >= 50) & (freq <= 64)){
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b31      	cmp	r3, #49	; 0x31
 8000944:	bf8c      	ite	hi
 8000946:	2301      	movhi	r3, #1
 8000948:	2300      	movls	r3, #0
 800094a:	b2da      	uxtb	r2, r3
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b40      	cmp	r3, #64	; 0x40
 8000950:	bf94      	ite	ls
 8000952:	2301      	movls	r3, #1
 8000954:	2300      	movhi	r3, #0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4013      	ands	r3, r2
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d03d      	beq.n	80009dc <CPU_set_freq+0x438>
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 8000960:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000964:	f001 fb6e 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <CPU_set_freq+0x3ce>
 800096e:	f000 fbbd 	bl	80010ec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000990:	2307      	movs	r3, #7
 8000992:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000998:	2304      	movs	r3, #4
 800099a:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fc47 	bl	8002234 <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <CPU_set_freq+0x40c>
 80009ac:	f000 fb9e 	bl	80010ec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2303      	movs	r3, #3
 80009b6:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)		  {		    Error_Handler();		  }
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2103      	movs	r1, #3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f80e 	bl	80029ec <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d047      	beq.n	8000a66 <CPU_set_freq+0x4c2>
 80009d6:	f000 fb89 	bl	80010ec <Error_Handler>
 80009da:	e044      	b.n	8000a66 <CPU_set_freq+0x4c2>
	}else if( (freq >= 65) /*& (freq <= 80)*/){
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b40      	cmp	r3, #64	; 0x40
 80009e0:	d941      	bls.n	8000a66 <CPU_set_freq+0x4c2>
		if(freq > 80) freq = 80;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b50      	cmp	r3, #80	; 0x50
 80009e6:	d901      	bls.n	80009ec <CPU_set_freq+0x448>
 80009e8:	2350      	movs	r3, #80	; 0x50
 80009ea:	71fb      	strb	r3, [r7, #7]
		  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)		  {		    Error_Handler();		  }
 80009ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009f0:	f001 fb28 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <CPU_set_freq+0x45a>
 80009fa:	f000 fb77 	bl	80010ec <Error_Handler>


		  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
		  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
		  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
		  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
		  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
		  RCC_OscInitStruct.PLL.PLLN = freq;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	653b      	str	r3, [r7, #80]	; 0x50
		  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	657b      	str	r3, [r7, #84]	; 0x54
		  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	65bb      	str	r3, [r7, #88]	; 0x58
		  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
		  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)		  {		    Error_Handler();		  }
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fc01 	bl	8002234 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <CPU_set_freq+0x498>
 8000a38:	f000 fb58 	bl	80010ec <Error_Handler>


		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60bb      	str	r3, [r7, #8]
	  	  	  	  	  	  	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2303      	movs	r3, #3
 8000a42:	60fb      	str	r3, [r7, #12]
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61bb      	str	r3, [r7, #24]

		  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)		  {		    Error_Handler();		  }
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2104      	movs	r1, #4
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 ffc8 	bl	80029ec <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <CPU_set_freq+0x4c2>
 8000a62:	f000 fb43 	bl	80010ec <Error_Handler>
	}

		SystemCoreClockUpdate();
 8000a66:	f000 fd07 	bl	8001478 <SystemCoreClockUpdate>
		HAL_UART_Abort(uart_to_reset);
 8000a6a:	6838      	ldr	r0, [r7, #0]
 8000a6c:	f004 fe06 	bl	800567c <HAL_UART_Abort>
		HAL_UART_DeInit(uart_to_reset);
 8000a70:	6838      	ldr	r0, [r7, #0]
 8000a72:	f004 fcdf 	bl	8005434 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8000a76:	f000 faaf 	bl	8000fd8 <MX_USART1_UART_Init>
}
 8000a7a:	bf00      	nop
 8000a7c:	3760      	adds	r7, #96	; 0x60
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop

08000a84 <cs_low>:
#define B0_WHO_AM_I		0xBE /*DEFAULT: 0x00*/	// ID register
#define ICM20948_ID 	0xEA					// register value

/// sets CS pin to low to begin transmission
/// returns nothing
void cs_low(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <cs_low+0x14>)
 8000a8e:	f001 fab3 	bl	8001ff8 <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <cs_high>:

/// sets CS pin to high to end transmission
/// returns nothing
void cs_high(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <cs_high+0x14>)
 8000aa6:	f001 faa7 	bl	8001ff8 <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	48000400 	.word	0x48000400

08000ab4 <read_single_icm20948_reg>:

/// simplified register read function found in icm20948's library, excludes bank selection...
uint8_t read_single_icm20948_reg(uint8_t reg){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	uint8_t read_reg = reg;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;

	cs_low();
 8000ac2:	f7ff ffdf 	bl	8000a84 <cs_low>
	HAL_SPI_Transmit(&hspi1, &read_reg, 1, 1000);
 8000ac6:	f107 010f 	add.w	r1, r7, #15
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <read_single_icm20948_reg+0x40>)
 8000ad2:	f002 ff0e 	bl	80038f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &reg_val, 1, 1000);
 8000ad6:	f107 010e 	add.w	r1, r7, #14
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <read_single_icm20948_reg+0x40>)
 8000ae2:	f003 f874 	bl	8003bce <HAL_SPI_Receive>
	cs_high();
 8000ae6:	f7ff ffd9 	bl	8000a9c <cs_high>

	return reg_val;
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000a0 	.word	0x200000a0

08000af8 <test_icm20948_device>:

/// function reads the WHO_AM_I register of icm20948 to check if the read value is correct
/// returns 1 if value is correct
/// returns 0 otherwise
uint8_t test_icm20948_device(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	uint8_t icm_id = read_single_icm20948_reg( B0_WHO_AM_I );
 8000afe:	20be      	movs	r0, #190	; 0xbe
 8000b00:	f7ff ffd8 	bl	8000ab4 <read_single_icm20948_reg>
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
	if ( icm_id == ICM20948_ID ){
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2bea      	cmp	r3, #234	; 0xea
 8000b0c:	d101      	bne.n	8000b12 <test_icm20948_device+0x1a>
		return 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <test_icm20948_device+0x1c>
	}else{
		return 0;
 8000b12:	2300      	movs	r3, #0
	}
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <get_icm20948_id>:

/// function reads the WHO_AM_I register of icm20948 and returns it
uint8_t get_icm20948_id(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	return read_single_icm20948_reg( B0_WHO_AM_I );
 8000b20:	20be      	movs	r0, #190	; 0xbe
 8000b22:	f7ff ffc7 	bl	8000ab4 <read_single_icm20948_reg>
 8000b26:	4603      	mov	r3, r0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxCpltCallback>:
extern void CPU_set_freq(uint8_t freq, UART_HandleTypeDef *uart_to_reset);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	uart_in_buffer[ rx_buffer_position ] = uart_rx_char;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_UART_RxCpltCallback+0x50>)
 8000b3a:	7811      	ldrb	r1, [r2, #0]
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_UART_RxCpltCallback+0x54>)
 8000b3e:	54d1      	strb	r1, [r2, r3]
	if (uart_rx_char == '.' ){
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_RxCpltCallback+0x50>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b2e      	cmp	r3, #46	; 0x2e
 8000b46:	d106      	bne.n	8000b56 <HAL_UART_RxCpltCallback+0x2a>
		buffer_ready_to_read = 1;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_RxCpltCallback+0x58>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
		rx_buffer_position   = 0;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_UART_RxCpltCallback+0x3a>
	}else{
		rx_buffer_position   += 1;								// if text is large enough, the buffer may overflow!
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_UART_RxCpltCallback+0x4c>)
 8000b5e:	6013      	str	r3, [r2, #0]
		buffer_ready_to_read =  0;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_UART_RxCpltCallback+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_char, 1);				// reset it
 8000b66:	2201      	movs	r2, #1
 8000b68:	4904      	ldr	r1, [pc, #16]	; (8000b7c <HAL_UART_RxCpltCallback+0x50>)
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <HAL_UART_RxCpltCallback+0x5c>)
 8000b6c:	f004 fd30 	bl	80055d0 <HAL_UART_Receive_IT>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000200 	.word	0x20000200
 8000b7c:	200001d4 	.word	0x200001d4
 8000b80:	200001d8 	.word	0x200001d8
 8000b84:	20000204 	.word	0x20000204
 8000b88:	20000150 	.word	0x20000150

08000b8c <interpret_user_input>:


void interpret_user_input(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
	if (buffer_ready_to_read == 0)
 8000b92:	4b64      	ldr	r3, [pc, #400]	; (8000d24 <interpret_user_input+0x198>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 80c0 	beq.w	8000d1c <interpret_user_input+0x190>
		return;
	buffer_ready_to_read = 0;
 8000b9c:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <interpret_user_input+0x198>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
	char order[BUFFER_SIZE/2];		// local order buffer
	char argmnt[BUFFER_SIZE/2];	// local argument buffer
	int  index = 0;		// index in buffer
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
	int  phase = 0;		// 0-order 1-argmnt 2-end
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
	int  i;				// itereator


	// divides input in form of "ABC:12." into order ABC, argument 12
	for( i=0 ; i<BUFFER_SIZE ; i++){
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	e04b      	b.n	8000c48 <interpret_user_input+0xbc>
		if( uart_in_buffer[i] == ':' ){
 8000bb0:	4a5d      	ldr	r2, [pc, #372]	; (8000d28 <interpret_user_input+0x19c>)
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b3a      	cmp	r3, #58	; 0x3a
 8000bba:	d10a      	bne.n	8000bd2 <interpret_user_input+0x46>
			phase = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
			order[index] = '\0';
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
			index = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
			continue;
 8000bd0:	e037      	b.n	8000c42 <interpret_user_input+0xb6>
		}else if( uart_in_buffer[i] == '.' ){
 8000bd2:	4a55      	ldr	r2, [pc, #340]	; (8000d28 <interpret_user_input+0x19c>)
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b2e      	cmp	r3, #46	; 0x2e
 8000bdc:	d110      	bne.n	8000c00 <interpret_user_input+0x74>
			if(phase == 0)
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d105      	bne.n	8000bf0 <interpret_user_input+0x64>
				order[index] = '\0';
 8000be4:	f107 020c 	add.w	r2, r7, #12
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	4413      	add	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
			phase = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
			argmnt[index] = '\0';
 8000bf4:	463a      	mov	r2, r7
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e01d      	b.n	8000c3c <interpret_user_input+0xb0>
		}else if (phase == 0){
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10a      	bne.n	8000c1c <interpret_user_input+0x90>
			order[index] = uart_in_buffer[i];
 8000c06:	4a48      	ldr	r2, [pc, #288]	; (8000d28 <interpret_user_input+0x19c>)
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	7819      	ldrb	r1, [r3, #0]
 8000c0e:	f107 020c 	add.w	r2, r7, #12
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	4413      	add	r3, r2
 8000c16:	460a      	mov	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e00f      	b.n	8000c3c <interpret_user_input+0xb0>
		}else if (phase == 1){
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d109      	bne.n	8000c36 <interpret_user_input+0xaa>
			argmnt[index] = uart_in_buffer[i];
 8000c22:	4a41      	ldr	r2, [pc, #260]	; (8000d28 <interpret_user_input+0x19c>)
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	4413      	add	r3, r2
 8000c28:	7819      	ldrb	r1, [r3, #0]
 8000c2a:	463a      	mov	r2, r7
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	4413      	add	r3, r2
 8000c30:	460a      	mov	r2, r1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e002      	b.n	8000c3c <interpret_user_input+0xb0>
		}else if (phase == 2){
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d009      	beq.n	8000c50 <interpret_user_input+0xc4>
			break;
		}
		index++;
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	3301      	adds	r3, #1
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
	for( i=0 ; i<BUFFER_SIZE ; i++){
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	2b13      	cmp	r3, #19
 8000c4c:	ddb0      	ble.n	8000bb0 <interpret_user_input+0x24>
 8000c4e:	e000      	b.n	8000c52 <interpret_user_input+0xc6>
			break;
 8000c50:	bf00      	nop
	}

	if(strcmp(order, order_set_freq) == 0){
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4935      	ldr	r1, [pc, #212]	; (8000d2c <interpret_user_input+0x1a0>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fab9 	bl	80001d0 <strcmp>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d11e      	bne.n	8000ca2 <interpret_user_input+0x116>
		int desired_frequency = atoi(argmnt);
 8000c64:	463b      	mov	r3, r7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f006 f843 	bl	8006cf2 <atoi>
 8000c6c:	61b8      	str	r0, [r7, #24]
		CPU_set_freq(desired_frequency, &huart1);
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <interpret_user_input+0x1a4>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fc95 	bl	80005a4 <CPU_set_freq>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_char, 1);	// reset it
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	492d      	ldr	r1, [pc, #180]	; (8000d34 <interpret_user_input+0x1a8>)
 8000c7e:	482c      	ldr	r0, [pc, #176]	; (8000d30 <interpret_user_input+0x1a4>)
 8000c80:	f004 fca6 	bl	80055d0 <HAL_UART_Receive_IT>
		sprintf(uart_out_buffer, "\nOK\n");
 8000c84:	492c      	ldr	r1, [pc, #176]	; (8000d38 <interpret_user_input+0x1ac>)
 8000c86:	482d      	ldr	r0, [pc, #180]	; (8000d3c <interpret_user_input+0x1b0>)
 8000c88:	f006 f86a 	bl	8006d60 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_out_buffer, strlen(uart_out_buffer), 1000);
 8000c8c:	482b      	ldr	r0, [pc, #172]	; (8000d3c <interpret_user_input+0x1b0>)
 8000c8e:	f7ff faa9 	bl	80001e4 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	4928      	ldr	r1, [pc, #160]	; (8000d3c <interpret_user_input+0x1b0>)
 8000c9c:	4824      	ldr	r0, [pc, #144]	; (8000d30 <interpret_user_input+0x1a4>)
 8000c9e:	f004 fc02 	bl	80054a6 <HAL_UART_Transmit>
	}

	if(strcmp(order, order_get_id) == 0){
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4926      	ldr	r1, [pc, #152]	; (8000d40 <interpret_user_input+0x1b4>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fa91 	bl	80001d0 <strcmp>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d114      	bne.n	8000cde <interpret_user_input+0x152>
		uint8_t read_id = get_icm20948_id();
 8000cb4:	f7ff ff32 	bl	8000b1c <get_icm20948_id>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	75fb      	strb	r3, [r7, #23]
		sprintf(uart_out_buffer, "\nOK\n0x%02x\n", read_id);
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4920      	ldr	r1, [pc, #128]	; (8000d44 <interpret_user_input+0x1b8>)
 8000cc2:	481e      	ldr	r0, [pc, #120]	; (8000d3c <interpret_user_input+0x1b0>)
 8000cc4:	f006 f84c 	bl	8006d60 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_out_buffer, strlen(uart_out_buffer), 1000);
 8000cc8:	481c      	ldr	r0, [pc, #112]	; (8000d3c <interpret_user_input+0x1b0>)
 8000cca:	f7ff fa8b 	bl	80001e4 <strlen>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	4919      	ldr	r1, [pc, #100]	; (8000d3c <interpret_user_input+0x1b0>)
 8000cd8:	4815      	ldr	r0, [pc, #84]	; (8000d30 <interpret_user_input+0x1a4>)
 8000cda:	f004 fbe4 	bl	80054a6 <HAL_UART_Transmit>
	}

	if(strcmp(order, order_get_id01) == 0){
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4919      	ldr	r1, [pc, #100]	; (8000d48 <interpret_user_input+0x1bc>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa73 	bl	80001d0 <strcmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d116      	bne.n	8000d1e <interpret_user_input+0x192>
		uint8_t result = test_icm20948_device();
 8000cf0:	f7ff ff02 	bl	8000af8 <test_icm20948_device>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	75bb      	strb	r3, [r7, #22]
		sprintf(uart_out_buffer, "\nOK\n%d\n", result);
 8000cf8:	7dbb      	ldrb	r3, [r7, #22]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4913      	ldr	r1, [pc, #76]	; (8000d4c <interpret_user_input+0x1c0>)
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <interpret_user_input+0x1b0>)
 8000d00:	f006 f82e 	bl	8006d60 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uart_out_buffer, strlen(uart_out_buffer), 1000);
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <interpret_user_input+0x1b0>)
 8000d06:	f7ff fa6d 	bl	80001e4 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	490a      	ldr	r1, [pc, #40]	; (8000d3c <interpret_user_input+0x1b0>)
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <interpret_user_input+0x1a4>)
 8000d16:	f004 fbc6 	bl	80054a6 <HAL_UART_Transmit>
 8000d1a:	e000      	b.n	8000d1e <interpret_user_input+0x192>
		return;
 8000d1c:	bf00      	nop
	}
}
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000204 	.word	0x20000204
 8000d28:	200001d8 	.word	0x200001d8
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000150 	.word	0x20000150
 8000d34:	200001d4 	.word	0x200001d4
 8000d38:	0800776c 	.word	0x0800776c
 8000d3c:	200001ec 	.word	0x200001ec
 8000d40:	20000008 	.word	0x20000008
 8000d44:	08007774 	.word	0x08007774
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	08007780 	.word	0x08007780

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char test_word[] = "STM32 TEST PLATFORM BOOTUP\r\n";
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <main+0x68>)
 8000d58:	463c      	mov	r4, r7
 8000d5a:	461d      	mov	r5, r3
 8000d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d64:	c407      	stmia	r4!, {r0, r1, r2}
 8000d66:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 fc5e 	bl	8001628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f82c 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f000 f962 	bl	8001038 <MX_GPIO_Init>
  MX_TIM17_Init();
 8000d74:	f000 f8b8 	bl	8000ee8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000d78:	f000 f92e 	bl	8000fd8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000d7c:	f000 f876 	bl	8000e6c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000d80:	2100      	movs	r1, #0
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <main+0x6c>)
 8000d84:	f003 fcda 	bl	800473c <HAL_TIM_PWM_Start>
  HAL_UART_Transmit(&huart1, (uint8_t *)test_word, strlen(test_word), 1000);
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa2a 	bl	80001e4 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4639      	mov	r1, r7
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <main+0x70>)
 8000d9c:	f004 fb83 	bl	80054a6 <HAL_UART_Transmit>



  CPU_set_freq(80, &huart1);
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <main+0x70>)
 8000da2:	2050      	movs	r0, #80	; 0x50
 8000da4:	f7ff fbfe 	bl	80005a4 <CPU_set_freq>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_char, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <main+0x74>)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <main+0x70>)
 8000dae:	f004 fc0f 	bl	80055d0 <HAL_UART_Receive_IT>

  while (1)
  {
	  interpret_user_input();
 8000db2:	f7ff feeb 	bl	8000b8c <interpret_user_input>
 8000db6:	e7fc      	b.n	8000db2 <main+0x62>
 8000db8:	08007788 	.word	0x08007788
 8000dbc:	20000104 	.word	0x20000104
 8000dc0:	20000150 	.word	0x20000150
 8000dc4:	200001d4 	.word	0x200001d4

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b096      	sub	sp, #88	; 0x58
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	2244      	movs	r2, #68	; 0x44
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 ffba 	bl	8006d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dee:	f001 f929 	bl	8002044 <HAL_PWREx_ControlVoltageScaling>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000df8:	f000 f978 	bl	80010ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e06:	2310      	movs	r3, #16
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e12:	2304      	movs	r3, #4
 8000e14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 17;
 8000e16:	2311      	movs	r3, #17
 8000e18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000e22:	2304      	movs	r3, #4
 8000e24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fa02 	bl	8002234 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e36:	f000 f959 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	603b      	str	r3, [r7, #0]
	  	  	  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2101      	movs	r1, #1
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fdca 	bl	80029ec <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e5e:	f000 f945 	bl	80010ec <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3758      	adds	r7, #88	; 0x58
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_SPI1_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000eba:	2207      	movs	r2, #7
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ecc:	f002 fc6e 	bl	80037ac <HAL_SPI_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 f909 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200000a0 	.word	0x200000a0
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b092      	sub	sp, #72	; 0x48
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	222c      	movs	r2, #44	; 0x2c
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 ff21 	bl	8006d50 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f10:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <MX_TIM17_Init+0xec>)
 8000f12:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f26:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f3a:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f3c:	f003 fb46 	bl	80045cc <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000f46:	f000 f8d1 	bl	80010ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f4c:	f003 fb95 	bl	800467a <HAL_TIM_PWM_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000f56:	f000 f8c9 	bl	80010ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 499;
 8000f5e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000f82:	f003 fce1 	bl	8004948 <HAL_TIM_PWM_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8000f8c:	f000 f8ae 	bl	80010ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000fb4:	f004 f972 	bl	800529c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000fbe:	f000 f895 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <MX_TIM17_Init+0xe8>)
 8000fc4:	f000 f91e 	bl	8001204 <HAL_TIM_MspPostInit>

}
 8000fc8:	bf00      	nop
 8000fca:	3748      	adds	r7, #72	; 0x48
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000104 	.word	0x20000104
 8000fd4:	40014800 	.word	0x40014800

08000fd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <MX_USART1_UART_Init+0x5c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_USART1_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_USART1_UART_Init+0x58>)
 800101c:	f004 f9bc 	bl	8005398 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 f861 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000150 	.word	0x20000150
 8001034:	40013800 	.word	0x40013800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <MX_GPIO_Init+0xa8>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <MX_GPIO_Init+0xa8>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_GPIO_Init+0xa8>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_GPIO_Init+0xa8>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <MX_GPIO_Init+0xa8>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_GPIO_Init+0xa8>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_GPIO_Init+0xa8>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <MX_GPIO_Init+0xa8>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_GPIO_Init+0xa8>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2140      	movs	r1, #64	; 0x40
 800109a:	4812      	ldr	r0, [pc, #72]	; (80010e4 <MX_GPIO_Init+0xac>)
 800109c:	f000 ffac 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_GPIO_Init+0xb0>)
 80010b8:	f000 fd00 	bl	8001abc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80010bc:	2340      	movs	r3, #64	; 0x40
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_GPIO_Init+0xac>)
 80010d4:	f000 fcf2 	bl	8001abc <HAL_GPIO_Init>

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000
 80010e4:	48000400 	.word	0x48000400
 80010e8:	48000800 	.word	0x48000800

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_MspInit+0x44>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6613      	str	r3, [r2, #96]	; 0x60
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_MspInit+0x44>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_MspInit+0x44>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_MspInit+0x44>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_SPI_MspInit+0x7c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d128      	bne.n	80011b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_SPI_MspInit+0x80>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <HAL_SPI_MspInit+0x80>)
 8001168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116c:	6613      	str	r3, [r2, #96]	; 0x60
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_SPI_MspInit+0x80>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_SPI_MspInit+0x80>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_SPI_MspInit+0x80>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_SPI_MspInit+0x80>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001192:	23e0      	movs	r3, #224	; 0xe0
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a2:	2305      	movs	r3, #5
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f000 fc84 	bl	8001abc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40013000 	.word	0x40013000
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_TIM_Base_MspInit+0x38>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10b      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_TIM_Base_MspInit+0x3c>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_TIM_Base_MspInit+0x3c>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6613      	str	r3, [r2, #96]	; 0x60
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_TIM_Base_MspInit+0x3c>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40014800 	.word	0x40014800
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_TIM_MspPostInit+0x64>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d11c      	bne.n	8001260 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_TIM_MspPostInit+0x68>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PB9     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8001250:	230e      	movs	r3, #14
 8001252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_TIM_MspPostInit+0x6c>)
 800125c:	f000 fc2e 	bl	8001abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40014800 	.word	0x40014800
 800126c:	40021000 	.word	0x40021000
 8001270:	48000400 	.word	0x48000400

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0ac      	sub	sp, #176	; 0xb0
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2288      	movs	r2, #136	; 0x88
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f005 fd5b 	bl	8006d50 <memset>
  if(huart->Instance==USART1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a26      	ldr	r2, [pc, #152]	; (8001338 <HAL_UART_MspInit+0xc4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d144      	bne.n	800132e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012a8:	2300      	movs	r3, #0
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fdbf 	bl	8002e34 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012bc:	f7ff ff16 	bl	80010ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_UART_MspInit+0xc8>)
 80012c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_UART_MspInit+0xc8>)
 80012c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ca:	6613      	str	r3, [r2, #96]	; 0x60
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_UART_MspInit+0xc8>)
 80012ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_UART_MspInit+0xc8>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_UART_MspInit+0xc8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_UART_MspInit+0xc8>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800130a:	2307      	movs	r3, #7
 800130c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f000 fbcf 	bl	8001abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2025      	movs	r0, #37	; 0x25
 8001324:	f000 fafb 	bl	800191e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001328:	2025      	movs	r0, #37	; 0x25
 800132a:	f000 fb14 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	37b0      	adds	r7, #176	; 0xb0
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40013800 	.word	0x40013800
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_UART_MspDeInit+0x38>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10e      	bne.n	8001370 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_UART_MspDeInit+0x3c>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_UART_MspDeInit+0x3c>)
 8001358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800135c:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800135e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f000 fd53 	bl	8001e10 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800136a:	2025      	movs	r0, #37	; 0x25
 800136c:	f000 fb01 	bl	8001972 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40013800 	.word	0x40013800
 800137c:	40021000 	.word	0x40021000

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013cc:	f000 f988 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <USART1_IRQHandler+0x10>)
 80013da:	f004 fa49 	bl	8005870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000150 	.word	0x20000150

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f005 fc70 	bl	8006cfc <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20018000 	.word	0x20018000
 8001448:	00000400 	.word	0x00000400
 800144c:	20000208 	.word	0x20000208
 8001450:	20000220 	.word	0x20000220

08001454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800147e:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <SystemCoreClockUpdate+0x144>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <SystemCoreClockUpdate+0x144>)
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e005      	b.n	80014a6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <SystemCoreClockUpdate+0x144>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80014a6:	4a46      	ldr	r2, [pc, #280]	; (80015c0 <SystemCoreClockUpdate+0x148>)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014b0:	4b42      	ldr	r3, [pc, #264]	; (80015bc <SystemCoreClockUpdate+0x144>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d866      	bhi.n	800158a <SystemCoreClockUpdate+0x112>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <SystemCoreClockUpdate+0x4c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	0800158b 	.word	0x0800158b
 80014cc:	0800158b 	.word	0x0800158b
 80014d0:	0800158b 	.word	0x0800158b
 80014d4:	08001501 	.word	0x08001501
 80014d8:	0800158b 	.word	0x0800158b
 80014dc:	0800158b 	.word	0x0800158b
 80014e0:	0800158b 	.word	0x0800158b
 80014e4:	08001509 	.word	0x08001509
 80014e8:	0800158b 	.word	0x0800158b
 80014ec:	0800158b 	.word	0x0800158b
 80014f0:	0800158b 	.word	0x0800158b
 80014f4:	08001511 	.word	0x08001511
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80014f8:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <SystemCoreClockUpdate+0x14c>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	6013      	str	r3, [r2, #0]
      break;
 80014fe:	e048      	b.n	8001592 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <SystemCoreClockUpdate+0x14c>)
 8001502:	4a31      	ldr	r2, [pc, #196]	; (80015c8 <SystemCoreClockUpdate+0x150>)
 8001504:	601a      	str	r2, [r3, #0]
      break;
 8001506:	e044      	b.n	8001592 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <SystemCoreClockUpdate+0x14c>)
 800150a:	4a30      	ldr	r2, [pc, #192]	; (80015cc <SystemCoreClockUpdate+0x154>)
 800150c:	601a      	str	r2, [r3, #0]
      break;
 800150e:	e040      	b.n	8001592 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <SystemCoreClockUpdate+0x144>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <SystemCoreClockUpdate+0x144>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	3301      	adds	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <SystemCoreClockUpdate+0xbe>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d006      	beq.n	8001542 <SystemCoreClockUpdate+0xca>
 8001534:	e00b      	b.n	800154e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001536:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <SystemCoreClockUpdate+0x150>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	613b      	str	r3, [r7, #16]
          break;
 8001540:	e00b      	b.n	800155a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001542:	4a22      	ldr	r2, [pc, #136]	; (80015cc <SystemCoreClockUpdate+0x154>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	613b      	str	r3, [r7, #16]
          break;
 800154c:	e005      	b.n	800155a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	613b      	str	r3, [r7, #16]
          break;
 8001558:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <SystemCoreClockUpdate+0x144>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <SystemCoreClockUpdate+0x144>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0e5b      	lsrs	r3, r3, #25
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	3301      	adds	r3, #1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	fbb2 f3f3 	udiv	r3, r2, r3
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <SystemCoreClockUpdate+0x14c>)
 8001586:	6013      	str	r3, [r2, #0]
      break;
 8001588:	e003      	b.n	8001592 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <SystemCoreClockUpdate+0x14c>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	6013      	str	r3, [r2, #0]
      break;
 8001590:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <SystemCoreClockUpdate+0x144>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <SystemCoreClockUpdate+0x158>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <SystemCoreClockUpdate+0x14c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <SystemCoreClockUpdate+0x14c>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	080077c0 	.word	0x080077c0
 80015c4:	20000014 	.word	0x20000014
 80015c8:	00f42400 	.word	0x00f42400
 80015cc:	007a1200 	.word	0x007a1200
 80015d0:	080077a8 	.word	0x080077a8

080015d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800160c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015d8:	f7ff ff3c 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <LoopForever+0x6>)
  ldr r1, =_edata
 80015de:	490d      	ldr	r1, [pc, #52]	; (8001614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <LoopForever+0xe>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <LoopForever+0x12>)
  ldr r4, =_ebss
 80015f4:	4c0a      	ldr	r4, [pc, #40]	; (8001620 <LoopForever+0x16>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001602:	f005 fb81 	bl	8006d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001606:	f7ff fba3 	bl	8000d50 <main>

0800160a <LoopForever>:

LoopForever:
    b LoopForever
 800160a:	e7fe      	b.n	800160a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800160c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001618:	08007934 	.word	0x08007934
  ldr r2, =_sbss
 800161c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001620:	20000220 	.word	0x20000220

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>
	...

08001628 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_Init+0x3c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_Init+0x3c>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 f962 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001644:	2000      	movs	r0, #0
 8001646:	f000 f80f 	bl	8001668 <HAL_InitTick>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	e001      	b.n	800165a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001656:	f7ff fd4f 	bl	80010f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800165a:	79fb      	ldrb	r3, [r7, #7]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40022000 	.word	0x40022000

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_InitTick+0x6c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_InitTick+0x70>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_InitTick+0x6c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f97b 	bl	800198e <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d809      	bhi.n	80016b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f937 	bl	800191e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_InitTick+0x74>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e004      	b.n	80016c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e001      	b.n	80016c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000001c 	.word	0x2000001c
 80016d8:	20000014 	.word	0x20000014
 80016dc:	20000018 	.word	0x20000018

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000001c 	.word	0x2000001c
 8001704:	2000020c 	.word	0x2000020c

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000020c 	.word	0x2000020c

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <__NVIC_EnableIRQ+0x38>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db12      	blt.n	80017f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	490a      	ldr	r1, [pc, #40]	; (8001804 <__NVIC_DisableIRQ+0x44>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	3320      	adds	r3, #32
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017ec:	f3bf 8f4f 	dsb	sy
}
 80017f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f2:	f3bf 8f6f 	isb	sy
}
 80017f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff05 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff1a 	bl	8001768 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff0d 	bl	8001784 <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff1d 	bl	80017c0 <__NVIC_DisableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff94 	bl	80018c4 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d008      	beq.n	80019d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2204      	movs	r2, #4
 80019c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e022      	b.n	8001a16 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 020e 	bic.w	r2, r2, #14
 80019de:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f003 021c 	and.w	r2, r3, #28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d005      	beq.n	8001a46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e029      	b.n	8001a9a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 020e 	bic.w	r2, r2, #14
 8001a54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f003 021c 	and.w	r2, r3, #28
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
    }
  }
  return status;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aca:	e17f      	b.n	8001dcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8171 	beq.w	8001dc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d005      	beq.n	8001afc <HAL_GPIO_Init+0x40>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d118      	bne.n	8001b9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b70:	2201      	movs	r2, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f003 0201 	and.w	r2, r3, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d017      	beq.n	8001bd8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d123      	bne.n	8001c2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	6939      	ldr	r1, [r7, #16]
 8001c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80ac 	beq.w	8001dc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_GPIO_Init+0x330>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	4a5e      	ldr	r2, [pc, #376]	; (8001dec <HAL_GPIO_Init+0x330>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <HAL_GPIO_Init+0x330>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c86:	4a5a      	ldr	r2, [pc, #360]	; (8001df0 <HAL_GPIO_Init+0x334>)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cb0:	d025      	beq.n	8001cfe <HAL_GPIO_Init+0x242>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4f      	ldr	r2, [pc, #316]	; (8001df4 <HAL_GPIO_Init+0x338>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01f      	beq.n	8001cfa <HAL_GPIO_Init+0x23e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <HAL_GPIO_Init+0x33c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_GPIO_Init+0x23a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4d      	ldr	r2, [pc, #308]	; (8001dfc <HAL_GPIO_Init+0x340>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0x236>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4c      	ldr	r2, [pc, #304]	; (8001e00 <HAL_GPIO_Init+0x344>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00d      	beq.n	8001cee <HAL_GPIO_Init+0x232>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	; (8001e04 <HAL_GPIO_Init+0x348>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <HAL_GPIO_Init+0x22e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_GPIO_Init+0x34c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d101      	bne.n	8001ce6 <HAL_GPIO_Init+0x22a>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x244>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x244>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x244>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x244>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x244>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x244>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x244>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d10:	4937      	ldr	r1, [pc, #220]	; (8001df0 <HAL_GPIO_Init+0x334>)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d42:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d6c:	4a27      	ldr	r2, [pc, #156]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d96:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dc0:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <HAL_GPIO_Init+0x350>)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f ae78 	bne.w	8001acc <HAL_GPIO_Init+0x10>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000
 8001df4:	48000400 	.word	0x48000400
 8001df8:	48000800 	.word	0x48000800
 8001dfc:	48000c00 	.word	0x48000c00
 8001e00:	48001000 	.word	0x48001000
 8001e04:	48001400 	.word	0x48001400
 8001e08:	48001800 	.word	0x48001800
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001e1e:	e0cd      	b.n	8001fbc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001e20:	2201      	movs	r2, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80c0 	beq.w	8001fb6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001e36:	4a68      	ldr	r2, [pc, #416]	; (8001fd8 <HAL_GPIO_DeInit+0x1c8>)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e5e:	d025      	beq.n	8001eac <HAL_GPIO_DeInit+0x9c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <HAL_GPIO_DeInit+0x1cc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01f      	beq.n	8001ea8 <HAL_GPIO_DeInit+0x98>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <HAL_GPIO_DeInit+0x1d0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d019      	beq.n	8001ea4 <HAL_GPIO_DeInit+0x94>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a5c      	ldr	r2, [pc, #368]	; (8001fe4 <HAL_GPIO_DeInit+0x1d4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_GPIO_DeInit+0x90>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a5b      	ldr	r2, [pc, #364]	; (8001fe8 <HAL_GPIO_DeInit+0x1d8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00d      	beq.n	8001e9c <HAL_GPIO_DeInit+0x8c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a5a      	ldr	r2, [pc, #360]	; (8001fec <HAL_GPIO_DeInit+0x1dc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_DeInit+0x88>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a59      	ldr	r2, [pc, #356]	; (8001ff0 <HAL_GPIO_DeInit+0x1e0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_GPIO_DeInit+0x84>
 8001e90:	2306      	movs	r3, #6
 8001e92:	e00c      	b.n	8001eae <HAL_GPIO_DeInit+0x9e>
 8001e94:	2307      	movs	r3, #7
 8001e96:	e00a      	b.n	8001eae <HAL_GPIO_DeInit+0x9e>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	e008      	b.n	8001eae <HAL_GPIO_DeInit+0x9e>
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_DeInit+0x9e>
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_DeInit+0x9e>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_DeInit+0x9e>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_DeInit+0x9e>
 8001eac:	2300      	movs	r3, #0
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d132      	bne.n	8001f24 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001ebe:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	494b      	ldr	r1, [pc, #300]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001ecc:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	4947      	ldr	r1, [pc, #284]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4944      	ldr	r1, [pc, #272]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001ee8:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	4940      	ldr	r1, [pc, #256]	; (8001ff4 <HAL_GPIO_DeInit+0x1e4>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220f      	movs	r2, #15
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001f06:	4a34      	ldr	r2, [pc, #208]	; (8001fd8 <HAL_GPIO_DeInit+0x1c8>)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	4830      	ldr	r0, [pc, #192]	; (8001fd8 <HAL_GPIO_DeInit+0x1c8>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	3302      	adds	r3, #2
 8001f20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	4019      	ands	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2103      	movs	r1, #3
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f47f af2b 	bne.w	8001e20 <HAL_GPIO_DeInit+0x10>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	48000400 	.word	0x48000400
 8001fe0:	48000800 	.word	0x48000800
 8001fe4:	48000c00 	.word	0x48000c00
 8001fe8:	48001000 	.word	0x48001000
 8001fec:	48001400 	.word	0x48001400
 8001ff0:	48001800 	.word	0x48001800
 8001ff4:	40010400 	.word	0x40010400

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002014:	e002      	b.n	800201c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_PWREx_GetVoltageRange+0x18>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40007000 	.word	0x40007000

08002044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002052:	d130      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800205c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002060:	d038      	beq.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2232      	movs	r2, #50	; 0x32
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002088:	e002      	b.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3b01      	subs	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d102      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f2      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b0:	d110      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e00f      	b.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d007      	beq.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40007000 	.word	0x40007000
 80020e8:	20000014 	.word	0x20000014
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80020f6:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002102:	f7ff fb01 	bl	8001708 <HAL_GetTick>
 8002106:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800210a:	f7ff fafd 	bl	8001708 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e07c      	b.n	8002216 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211c:	4b40      	ldr	r3, [pc, #256]	; (8002220 <HAL_RCC_DeInit+0x130>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8002128:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_DeInit+0x130>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002130:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <HAL_RCC_DeInit+0x130>)
 8002132:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002136:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8002138:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_RCC_DeInit+0x130>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_DeInit+0x134>)
 8002140:	4a39      	ldr	r2, [pc, #228]	; (8002228 <HAL_RCC_DeInit+0x138>)
 8002142:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002144:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_RCC_DeInit+0x13c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fa8d 	bl	8001668 <HAL_InitTick>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e05e      	b.n	8002216 <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8002158:	f7ff fad6 	bl	8001708 <HAL_GetTick>
 800215c:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800215e:	e00a      	b.n	8002176 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7ff fad2 	bl	8001708 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e04f      	b.n	8002216 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_RCC_DeInit+0x130>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ee      	bne.n	8002160 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_DeInit+0x130>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4926      	ldr	r1, [pc, #152]	; (8002220 <HAL_RCC_DeInit+0x130>)
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_RCC_DeInit+0x140>)
 800218a:	4013      	ands	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800218e:	f7ff fabb 	bl	8001708 <HAL_GetTick>
 8002192:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff fab7 	bl	8001708 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e036      	b.n	8002216 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021c4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	4a13      	ldr	r2, [pc, #76]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d6:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4a0f      	ldr	r2, [pc, #60]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e8:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_RCC_DeInit+0x130>)
 80021fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002202:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_DeInit+0x130>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <HAL_RCC_DeInit+0x130>)
 800220c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	20000014 	.word	0x20000014
 8002228:	003d0900 	.word	0x003d0900
 800222c:	20000018 	.word	0x20000018
 8002230:	eafef4ff 	.word	0xeafef4ff

08002234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e3ca      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002246:	4b97      	ldr	r3, [pc, #604]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002250:	4b94      	ldr	r3, [pc, #592]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80e4 	beq.w	8002430 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_RCC_OscConfig+0x4a>
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b0c      	cmp	r3, #12
 8002272:	f040 808b 	bne.w	800238c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 8087 	bne.w	800238c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x62>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e3a2      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	4b82      	ldr	r3, [pc, #520]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_RCC_OscConfig+0x7c>
 80022a6:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ae:	e005      	b.n	80022bc <HAL_RCC_OscConfig+0x88>
 80022b0:	4b7c      	ldr	r3, [pc, #496]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	4293      	cmp	r3, r2
 80022be:	d223      	bcs.n	8002308 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fd55 	bl	8002d74 <RCC_SetFlashLatencyFromMSIRange>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e383      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d4:	4b73      	ldr	r3, [pc, #460]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a72      	ldr	r2, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b70      	ldr	r3, [pc, #448]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	496d      	ldr	r1, [pc, #436]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f2:	4b6c      	ldr	r3, [pc, #432]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4968      	ldr	r1, [pc, #416]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
 8002306:	e025      	b.n	8002354 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b66      	ldr	r3, [pc, #408]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a65      	ldr	r2, [pc, #404]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4960      	ldr	r1, [pc, #384]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	495b      	ldr	r1, [pc, #364]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fd15 	bl	8002d74 <RCC_SetFlashLatencyFromMSIRange>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e343      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002354:	f000 fc4a 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	4950      	ldr	r1, [pc, #320]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <HAL_RCC_OscConfig+0x278>)
 8002372:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002374:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <HAL_RCC_OscConfig+0x27c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f975 	bl	8001668 <HAL_InitTick>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d052      	beq.n	800242e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	e327      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d032      	beq.n	80023fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002394:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a42      	ldr	r2, [pc, #264]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023a0:	f7ff f9b2 	bl	8001708 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a8:	f7ff f9ae 	bl	8001708 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e310      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a36      	ldr	r2, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4931      	ldr	r1, [pc, #196]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e4:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	492c      	ldr	r1, [pc, #176]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
 80023f8:	e01a      	b.n	8002430 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002406:	f7ff f97f 	bl	8001708 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240e:	f7ff f97b 	bl	8001708 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e2dd      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x1da>
 800242c:	e000      	b.n	8002430 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800242e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d074      	beq.n	8002526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x21a>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d10e      	bne.n	8002466 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d10b      	bne.n	8002466 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d064      	beq.n	8002524 <HAL_RCC_OscConfig+0x2f0>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d160      	bne.n	8002524 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e2ba      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246e:	d106      	bne.n	800247e <HAL_RCC_OscConfig+0x24a>
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e026      	b.n	80024cc <HAL_RCC_OscConfig+0x298>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002486:	d115      	bne.n	80024b4 <HAL_RCC_OscConfig+0x280>
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800248e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a02      	ldr	r2, [pc, #8]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e014      	b.n	80024cc <HAL_RCC_OscConfig+0x298>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	080077a8 	.word	0x080077a8
 80024ac:	20000014 	.word	0x20000014
 80024b0:	20000018 	.word	0x20000018
 80024b4:	4ba0      	ldr	r3, [pc, #640]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a9f      	ldr	r2, [pc, #636]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b9d      	ldr	r3, [pc, #628]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a9c      	ldr	r2, [pc, #624]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f918 	bl	8001708 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f914 	bl	8001708 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e276      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	4b92      	ldr	r3, [pc, #584]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x2a8>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff f904 	bl	8001708 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f900 	bl	8001708 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e262      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002516:	4b88      	ldr	r3, [pc, #544]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x2d0>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d060      	beq.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x310>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d119      	bne.n	8002572 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d116      	bne.n	8002572 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002544:	4b7c      	ldr	r3, [pc, #496]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_OscConfig+0x328>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e23f      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	4973      	ldr	r1, [pc, #460]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002570:	e040      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d023      	beq.n	80025c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257a:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7ff f8bf 	bl	8001708 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7ff f8bb 	bl	8001708 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e21d      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a0:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b62      	ldr	r3, [pc, #392]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	495f      	ldr	r1, [pc, #380]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	e018      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b5d      	ldr	r3, [pc, #372]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80025c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff f89b 	bl	8001708 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7ff f897 	bl	8001708 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1f9      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d03c      	beq.n	800267a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800260a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260e:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff f876 	bl	8001708 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7ff f872 	bl	8001708 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e1d4      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <HAL_RCC_OscConfig+0x3ec>
 8002640:	e01b      	b.n	800267a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002648:	4a3b      	ldr	r2, [pc, #236]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7ff f859 	bl	8001708 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265a:	f7ff f855 	bl	8001708 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1b7      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ef      	bne.n	800265a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80a6 	beq.w	80027d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800269e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6593      	str	r3, [r2, #88]	; 0x58
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b0:	2301      	movs	r3, #1
 80026b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x508>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d118      	bne.n	80026f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_RCC_OscConfig+0x508>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_RCC_OscConfig+0x508>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026cc:	f7ff f81c 	bl	8001708 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7ff f818 	bl	8001708 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e17a      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCC_OscConfig+0x508>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d108      	bne.n	800270c <HAL_RCC_OscConfig+0x4d8>
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270a:	e029      	b.n	8002760 <HAL_RCC_OscConfig+0x52c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d115      	bne.n	8002740 <HAL_RCC_OscConfig+0x50c>
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002734:	e014      	b.n	8002760 <HAL_RCC_OscConfig+0x52c>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	4b9c      	ldr	r3, [pc, #624]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a9b      	ldr	r2, [pc, #620]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002750:	4b98      	ldr	r3, [pc, #608]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	4a97      	ldr	r2, [pc, #604]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d016      	beq.n	8002796 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe ffce 	bl	8001708 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe ffca 	bl	8001708 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e12a      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002786:	4b8b      	ldr	r3, [pc, #556]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ed      	beq.n	8002770 <HAL_RCC_OscConfig+0x53c>
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe ffb7 	bl	8001708 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe ffb3 	bl	8001708 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e113      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b4:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ed      	bne.n	800279e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b7a      	ldr	r3, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	4a79      	ldr	r2, [pc, #484]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80fe 	beq.w	80029da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	f040 80d0 	bne.w	8002988 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027e8:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d130      	bne.n	800285e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	3b01      	subs	r3, #1
 8002808:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d127      	bne.n	800285e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11f      	bne.n	800285e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002828:	2a07      	cmp	r2, #7
 800282a:	bf14      	ite	ne
 800282c:	2201      	movne	r2, #1
 800282e:	2200      	moveq	r2, #0
 8002830:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002832:	4293      	cmp	r3, r2
 8002834:	d113      	bne.n	800285e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d109      	bne.n	800285e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d06e      	beq.n	800293c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d069      	beq.n	8002938 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002864:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002870:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0ad      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002880:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a4b      	ldr	r2, [pc, #300]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800288c:	f7fe ff3c 	bl	8001708 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe ff38 	bl	8001708 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e09a      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b2:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <HAL_RCC_OscConfig+0x784>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028cc:	0212      	lsls	r2, r2, #8
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028d4:	0852      	lsrs	r2, r2, #1
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0552      	lsls	r2, r2, #21
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028e0:	0852      	lsrs	r2, r2, #1
 80028e2:	3a01      	subs	r2, #1
 80028e4:	0652      	lsls	r2, r2, #25
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028ec:	0912      	lsrs	r2, r2, #4
 80028ee:	0452      	lsls	r2, r2, #17
 80028f0:	430a      	orrs	r2, r1
 80028f2:	4930      	ldr	r1, [pc, #192]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028f8:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002902:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002904:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a2a      	ldr	r2, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 800290a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002910:	f7fe fefa 	bl	8001708 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fef6 	bl	8001708 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e058      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002936:	e050      	b.n	80029da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e04f      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d148      	bne.n	80029da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002960:	f7fe fed2 	bl	8001708 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fece 	bl	8001708 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e030      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x734>
 8002986:	e028      	b.n	80029da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d023      	beq.n	80029d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <HAL_RCC_OscConfig+0x780>)
 8002994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe feb5 	bl	8001708 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e00c      	b.n	80029bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe feb1 	bl	8001708 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d905      	bls.n	80029bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e013      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_OscConfig+0x7b0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ec      	bne.n	80029a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_OscConfig+0x7b0>)
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	4905      	ldr	r1, [pc, #20]	; (80029e4 <HAL_RCC_OscConfig+0x7b0>)
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_OscConfig+0x7b4>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	60cb      	str	r3, [r1, #12]
 80029d4:	e001      	b.n	80029da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	feeefffc 	.word	0xfeeefffc

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0e7      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b75      	ldr	r3, [pc, #468]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b72      	ldr	r3, [pc, #456]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4970      	ldr	r1, [pc, #448]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0cf      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d010      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d908      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4c:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4960      	ldr	r1, [pc, #384]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d04c      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a72:	4b5a      	ldr	r3, [pc, #360]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d121      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0a6      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8a:	4b54      	ldr	r3, [pc, #336]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e09a      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa2:	4b4e      	ldr	r3, [pc, #312]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08e      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab2:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e086      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4943      	ldr	r1, [pc, #268]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fe18 	bl	8001708 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fe14 	bl	8001708 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e06e      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b3a      	ldr	r3, [pc, #232]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d208      	bcs.n	8002b32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	492b      	ldr	r1, [pc, #172]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b32:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d210      	bcs.n	8002b62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 0207 	bic.w	r2, r3, #7
 8002b48:	4923      	ldr	r1, [pc, #140]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b50:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e036      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4918      	ldr	r1, [pc, #96]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4910      	ldr	r1, [pc, #64]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ba0:	f000 f824 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	490b      	ldr	r1, [pc, #44]	; (8002be0 <HAL_RCC_ClockConfig+0x1f4>)
 8002bb2:	5ccb      	ldrb	r3, [r1, r3]
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbc:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1fc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fd4f 	bl	8001668 <HAL_InitTick>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bce:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	080077a8 	.word	0x080077a8
 8002be4:	20000014 	.word	0x20000014
 8002be8:	20000018 	.word	0x20000018

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c04:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x34>
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d121      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d11e      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c20:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c2c:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e005      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c48:	4a2b      	ldr	r2, [pc, #172]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d102      	bne.n	8002c6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	e004      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d134      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d003      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0xac>
 8002c90:	e005      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c94:	617b      	str	r3, [r7, #20]
      break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c9a:	617b      	str	r3, [r7, #20]
      break;
 8002c9c:	e002      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	617b      	str	r3, [r7, #20]
      break;
 8002ca2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	3301      	adds	r3, #1
 8002cb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	fb03 f202 	mul.w	r2, r3, r2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cca:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	0e5b      	lsrs	r3, r3, #25
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	080077c0 	.word	0x080077c0
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	007a1200 	.word	0x007a1200

08002d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000014 	.word	0x20000014

08002d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	080077b8 	.word	0x080077b8

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d4c:	f7ff ffda 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4904      	ldr	r1, [pc, #16]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	080077b8 	.word	0x080077b8

08002d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d80:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d8c:	f7ff f94c 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002d90:	6178      	str	r0, [r7, #20]
 8002d92:	e014      	b.n	8002dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dac:	f7ff f93c 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc4:	d10b      	bne.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	d919      	bls.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2ba0      	cmp	r3, #160	; 0xa0
 8002dd0:	d902      	bls.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e013      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dd8:	2301      	movs	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	e010      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d902      	bls.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002de4:	2303      	movs	r3, #3
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	e00a      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d102      	bne.n	8002df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002df0:	2302      	movs	r3, #2
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e004      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b70      	cmp	r3, #112	; 0x70
 8002dfa:	d101      	bne.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	4909      	ldr	r1, [pc, #36]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40022000 	.word	0x40022000

08002e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e40:	2300      	movs	r3, #0
 8002e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d041      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e58:	d02a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e5e:	d824      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e64:	d008      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e6a:	d81e      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e74:	d010      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e76:	e018      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e78:	4b86      	ldr	r3, [pc, #536]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a85      	ldr	r2, [pc, #532]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e84:	e015      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fabb 	bl	8003408 <RCCEx_PLLSAI1_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e96:	e00c      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3320      	adds	r3, #32
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fba6 	bl	80035f0 <RCCEx_PLLSAI2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ea8:	e003      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	74fb      	strb	r3, [r7, #19]
      break;
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec6:	4973      	ldr	r1, [pc, #460]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ece:	e001      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d041      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ee8:	d02a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002eea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eee:	d824      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002efa:	d81e      	bhi.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f04:	d010      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f06:	e018      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f08:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f14:	e015      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fa73 	bl	8003408 <RCCEx_PLLSAI1_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f26:	e00c      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3320      	adds	r3, #32
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fb5e 	bl	80035f0 <RCCEx_PLLSAI2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f38:	e003      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f48:	4b52      	ldr	r3, [pc, #328]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f56:	494f      	ldr	r1, [pc, #316]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f5e:	e001      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a0 	beq.w	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	4a40      	ldr	r2, [pc, #256]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	; 0x58
 8002f98:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fba8 	bl	8001708 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fe fba4 	bl	8001708 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8002fce:	e005      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d15c      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01f      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d019      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fb63 	bl	8001708 <HAL_GetTick>
 8003042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003044:	e00b      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fe fb5f 	bl	8001708 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d902      	bls.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	74fb      	strb	r3, [r7, #19]
            break;
 800305c:	e006      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ec      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10c      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003082:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800308a:	e009      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	74bb      	strb	r3, [r7, #18]
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a0:	7c7b      	ldrb	r3, [r7, #17]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b9e      	ldr	r3, [pc, #632]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	4a9d      	ldr	r2, [pc, #628]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030be:	4b98      	ldr	r3, [pc, #608]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f023 0203 	bic.w	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	4994      	ldr	r1, [pc, #592]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030e0:	4b8f      	ldr	r3, [pc, #572]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	f023 020c 	bic.w	r2, r3, #12
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	498c      	ldr	r1, [pc, #560]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003102:	4b87      	ldr	r3, [pc, #540]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	4983      	ldr	r1, [pc, #524]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003124:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	497b      	ldr	r1, [pc, #492]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003154:	4972      	ldr	r1, [pc, #456]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003168:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	496a      	ldr	r1, [pc, #424]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800318a:	4b65      	ldr	r3, [pc, #404]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	4961      	ldr	r1, [pc, #388]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ac:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ba:	4959      	ldr	r1, [pc, #356]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ce:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	4950      	ldr	r1, [pc, #320]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f0:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	4948      	ldr	r1, [pc, #288]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	493f      	ldr	r1, [pc, #252]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d028      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003242:	4937      	ldr	r1, [pc, #220]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003252:	d106      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a31      	ldr	r2, [pc, #196]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325e:	60d3      	str	r3, [r2, #12]
 8003260:	e011      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326a:	d10c      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f8c8 	bl	8003408 <RCCEx_PLLSAI1_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d028      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003292:	4b23      	ldr	r3, [pc, #140]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	491f      	ldr	r1, [pc, #124]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b0:	d106      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032bc:	60d3      	str	r3, [r2, #12]
 80032be:	e011      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2101      	movs	r1, #1
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f899 	bl	8003408 <RCCEx_PLLSAI1_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02b      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800330e:	d109      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a02      	ldr	r2, [pc, #8]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331a:	60d3      	str	r3, [r2, #12]
 800331c:	e014      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800332c:	d10c      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f867 	bl	8003408 <RCCEx_PLLSAI1_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02f      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003362:	4928      	ldr	r1, [pc, #160]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003372:	d10d      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f844 	bl	8003408 <RCCEx_PLLSAI1_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d014      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	74bb      	strb	r3, [r7, #18]
 800338e:	e011      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3320      	adds	r3, #32
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f925 	bl	80035f0 <RCCEx_PLLSAI2_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ce:	490d      	ldr	r1, [pc, #52]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f2:	4904      	ldr	r1, [pc, #16]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000

08003408 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003416:	4b75      	ldr	r3, [pc, #468]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003422:	4b72      	ldr	r3, [pc, #456]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0203 	and.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d10d      	bne.n	800344e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
       ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800343a:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
       ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d047      	beq.n	80034de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e044      	b.n	80034de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d018      	beq.n	800348e <RCCEx_PLLSAI1_Config+0x86>
 800345c:	2b03      	cmp	r3, #3
 800345e:	d825      	bhi.n	80034ac <RCCEx_PLLSAI1_Config+0xa4>
 8003460:	2b01      	cmp	r3, #1
 8003462:	d002      	beq.n	800346a <RCCEx_PLLSAI1_Config+0x62>
 8003464:	2b02      	cmp	r3, #2
 8003466:	d009      	beq.n	800347c <RCCEx_PLLSAI1_Config+0x74>
 8003468:	e020      	b.n	80034ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800346a:	4b60      	ldr	r3, [pc, #384]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d11d      	bne.n	80034b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347a:	e01a      	b.n	80034b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800347c:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d116      	bne.n	80034b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348c:	e013      	b.n	80034b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800348e:	4b57      	ldr	r3, [pc, #348]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800349a:	4b54      	ldr	r3, [pc, #336]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034aa:	e006      	b.n	80034ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      break;
 80034b0:	e004      	b.n	80034bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034b2:	bf00      	nop
 80034b4:	e002      	b.n	80034bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034b6:	bf00      	nop
 80034b8:	e000      	b.n	80034bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	430b      	orrs	r3, r1
 80034d8:	4944      	ldr	r1, [pc, #272]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d17d      	bne.n	80035e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034e4:	4b41      	ldr	r3, [pc, #260]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a40      	ldr	r2, [pc, #256]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fe f90a 	bl	8001708 <HAL_GetTick>
 80034f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f6:	e009      	b.n	800350c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034f8:	f7fe f906 	bl	8001708 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d902      	bls.n	800350c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	73fb      	strb	r3, [r7, #15]
        break;
 800350a:	e005      	b.n	8003518 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1ef      	bne.n	80034f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d160      	bne.n	80035e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003524:	4b31      	ldr	r3, [pc, #196]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6892      	ldr	r2, [r2, #8]
 8003534:	0211      	lsls	r1, r2, #8
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68d2      	ldr	r2, [r2, #12]
 800353a:	0912      	lsrs	r2, r2, #4
 800353c:	0452      	lsls	r2, r2, #17
 800353e:	430a      	orrs	r2, r1
 8003540:	492a      	ldr	r1, [pc, #168]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	610b      	str	r3, [r1, #16]
 8003546:	e027      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d112      	bne.n	8003574 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800354e:	4b27      	ldr	r3, [pc, #156]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003556:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6892      	ldr	r2, [r2, #8]
 800355e:	0211      	lsls	r1, r2, #8
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6912      	ldr	r2, [r2, #16]
 8003564:	0852      	lsrs	r2, r2, #1
 8003566:	3a01      	subs	r2, #1
 8003568:	0552      	lsls	r2, r2, #21
 800356a:	430a      	orrs	r2, r1
 800356c:	491f      	ldr	r1, [pc, #124]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	610b      	str	r3, [r1, #16]
 8003572:	e011      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800357c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6892      	ldr	r2, [r2, #8]
 8003584:	0211      	lsls	r1, r2, #8
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6952      	ldr	r2, [r2, #20]
 800358a:	0852      	lsrs	r2, r2, #1
 800358c:	3a01      	subs	r2, #1
 800358e:	0652      	lsls	r2, r2, #25
 8003590:	430a      	orrs	r2, r1
 8003592:	4916      	ldr	r1, [pc, #88]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800359e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe f8b0 	bl	8001708 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035aa:	e009      	b.n	80035c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ac:	f7fe f8ac 	bl	8001708 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d902      	bls.n	80035c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	73fb      	strb	r3, [r7, #15]
          break;
 80035be:	e005      	b.n	80035cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ef      	beq.n	80035ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	4904      	ldr	r1, [pc, #16]	; (80035ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000

080035f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035fe:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d018      	beq.n	800363c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800360a:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0203 	and.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d10d      	bne.n	8003636 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
       ||
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003622:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
       ||
 8003632:	429a      	cmp	r2, r3
 8003634:	d047      	beq.n	80036c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e044      	b.n	80036c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d018      	beq.n	8003676 <RCCEx_PLLSAI2_Config+0x86>
 8003644:	2b03      	cmp	r3, #3
 8003646:	d825      	bhi.n	8003694 <RCCEx_PLLSAI2_Config+0xa4>
 8003648:	2b01      	cmp	r3, #1
 800364a:	d002      	beq.n	8003652 <RCCEx_PLLSAI2_Config+0x62>
 800364c:	2b02      	cmp	r3, #2
 800364e:	d009      	beq.n	8003664 <RCCEx_PLLSAI2_Config+0x74>
 8003650:	e020      	b.n	8003694 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003652:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11d      	bne.n	800369a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003662:	e01a      	b.n	800369a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003664:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	2b00      	cmp	r3, #0
 800366e:	d116      	bne.n	800369e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003674:	e013      	b.n	800369e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003682:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003692:	e006      	b.n	80036a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	e004      	b.n	80036a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10d      	bne.n	80036c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036aa:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	430b      	orrs	r3, r1
 80036c0:	4939      	ldr	r1, [pc, #228]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d167      	bne.n	800379c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d8:	f7fe f816 	bl	8001708 <HAL_GetTick>
 80036dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036de:	e009      	b.n	80036f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036e0:	f7fe f812 	bl	8001708 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d902      	bls.n	80036f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	73fb      	strb	r3, [r7, #15]
        break;
 80036f2:	e005      	b.n	8003700 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ef      	bne.n	80036e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d14a      	bne.n	800379c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d111      	bne.n	8003730 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800370c:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6892      	ldr	r2, [r2, #8]
 800371c:	0211      	lsls	r1, r2, #8
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	0912      	lsrs	r2, r2, #4
 8003724:	0452      	lsls	r2, r2, #17
 8003726:	430a      	orrs	r2, r1
 8003728:	491f      	ldr	r1, [pc, #124]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	614b      	str	r3, [r1, #20]
 800372e:	e011      	b.n	8003754 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6892      	ldr	r2, [r2, #8]
 8003740:	0211      	lsls	r1, r2, #8
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6912      	ldr	r2, [r2, #16]
 8003746:	0852      	lsrs	r2, r2, #1
 8003748:	3a01      	subs	r2, #1
 800374a:	0652      	lsls	r2, r2, #25
 800374c:	430a      	orrs	r2, r1
 800374e:	4916      	ldr	r1, [pc, #88]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fd ffd2 	bl	8001708 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003766:	e009      	b.n	800377c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003768:	f7fd ffce 	bl	8001708 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d902      	bls.n	800377c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	73fb      	strb	r3, [r7, #15]
          break;
 800377a:	e005      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ef      	beq.n	8003768 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4904      	ldr	r1, [pc, #16]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e095      	b.n	80038ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fc9e 	bl	8001140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003824:	d902      	bls.n	800382c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e002      	b.n	8003832 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800382c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003830:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800383a:	d007      	beq.n	800384c <HAL_SPI_Init+0xa0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003844:	d002      	beq.n	800384c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	ea42 0103 	orr.w	r1, r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	f003 0204 	and.w	r2, r3, #4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038c8:	ea42 0103 	orr.w	r1, r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b088      	sub	sp, #32
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_SPI_Transmit+0x22>
 8003910:	2302      	movs	r3, #2
 8003912:	e158      	b.n	8003bc6 <HAL_SPI_Transmit+0x2d4>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800391c:	f7fd fef4 	bl	8001708 <HAL_GetTick>
 8003920:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003932:	2302      	movs	r3, #2
 8003934:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003936:	e13d      	b.n	8003bb4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_SPI_Transmit+0x52>
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003948:	e134      	b.n	8003bb4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2203      	movs	r2, #3
 800394e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003994:	d10f      	bne.n	80039b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d007      	beq.n	80039d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039dc:	d94b      	bls.n	8003a76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_Transmit+0xfa>
 80039e6:	8afb      	ldrh	r3, [r7, #22]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d13e      	bne.n	8003a6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a10:	e02b      	b.n	8003a6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d112      	bne.n	8003a46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	1c9a      	adds	r2, r3, #2
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a44:	e011      	b.n	8003a6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a46:	f7fd fe5f 	bl	8001708 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d803      	bhi.n	8003a5e <HAL_SPI_Transmit+0x16c>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5c:	d102      	bne.n	8003a64 <HAL_SPI_Transmit+0x172>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a68:	e0a4      	b.n	8003bb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ce      	bne.n	8003a12 <HAL_SPI_Transmit+0x120>
 8003a74:	e07c      	b.n	8003b70 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_SPI_Transmit+0x192>
 8003a7e:	8afb      	ldrh	r3, [r7, #22]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d170      	bne.n	8003b66 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d912      	bls.n	8003ab4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	881a      	ldrh	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b02      	subs	r3, #2
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ab2:	e058      	b.n	8003b66 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ada:	e044      	b.n	8003b66 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d12b      	bne.n	8003b42 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d912      	bls.n	8003b1a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	1c9a      	adds	r2, r3, #2
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b02      	subs	r3, #2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b18:	e025      	b.n	8003b66 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	7812      	ldrb	r2, [r2, #0]
 8003b26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b40:	e011      	b.n	8003b66 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b42:	f7fd fde1 	bl	8001708 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d803      	bhi.n	8003b5a <HAL_SPI_Transmit+0x268>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d102      	bne.n	8003b60 <HAL_SPI_Transmit+0x26e>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b64:	e026      	b.n	8003bb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1b5      	bne.n	8003adc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	6839      	ldr	r1, [r7, #0]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fce3 	bl	8004540 <SPI_EndRxTxTransaction>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e000      	b.n	8003bb4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b088      	sub	sp, #32
 8003bd2:	af02      	add	r7, sp, #8
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d112      	bne.n	8003c12 <HAL_SPI_Receive+0x44>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10e      	bne.n	8003c12 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bfc:	88fa      	ldrh	r2, [r7, #6]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f910 	bl	8003e2e <HAL_SPI_TransmitReceive>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	e109      	b.n	8003e26 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_SPI_Receive+0x52>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e102      	b.n	8003e26 <HAL_SPI_Receive+0x258>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c28:	f7fd fd6e 	bl	8001708 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d002      	beq.n	8003c40 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c3e:	e0e9      	b.n	8003e14 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_SPI_Receive+0x7e>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c50:	e0e0      	b.n	8003e14 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2204      	movs	r2, #4
 8003c56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c9c:	d908      	bls.n	8003cb0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	e007      	b.n	8003cc0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc8:	d10f      	bne.n	8003cea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d007      	beq.n	8003d08 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d10:	d867      	bhi.n	8003de2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d12:	e030      	b.n	8003d76 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d117      	bne.n	8003d52 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f103 020c 	add.w	r2, r3, #12
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003d50:	e011      	b.n	8003d76 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d52:	f7fd fcd9 	bl	8001708 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d803      	bhi.n	8003d6a <HAL_SPI_Receive+0x19c>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d102      	bne.n	8003d70 <HAL_SPI_Receive+0x1a2>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d74:	e04e      	b.n	8003e14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1c8      	bne.n	8003d14 <HAL_SPI_Receive+0x146>
 8003d82:	e034      	b.n	8003dee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d115      	bne.n	8003dbe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	b292      	uxth	r2, r2
 8003d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003dbc:	e011      	b.n	8003de2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dbe:	f7fd fca3 	bl	8001708 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d803      	bhi.n	8003dd6 <HAL_SPI_Receive+0x208>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d102      	bne.n	8003ddc <HAL_SPI_Receive+0x20e>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003de0:	e018      	b.n	8003e14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ca      	bne.n	8003d84 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fb4c 	bl	8004490 <SPI_EndRxTransaction>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
 8003e10:	e000      	b.n	8003e14 <HAL_SPI_Receive+0x246>
  }

error :
 8003e12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b08a      	sub	sp, #40	; 0x28
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x26>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e1fb      	b.n	800424c <HAL_SPI_TransmitReceive+0x41e>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e5c:	f7fd fc54 	bl	8001708 <HAL_GetTick>
 8003e60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e74:	887b      	ldrh	r3, [r7, #2]
 8003e76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e78:	7efb      	ldrb	r3, [r7, #27]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d00e      	beq.n	8003e9c <HAL_SPI_TransmitReceive+0x6e>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e84:	d106      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x66>
 8003e8e:	7efb      	ldrb	r3, [r7, #27]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d003      	beq.n	8003e9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e9a:	e1cd      	b.n	8004238 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_SPI_TransmitReceive+0x80>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_SPI_TransmitReceive+0x80>
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003eb4:	e1c0      	b.n	8004238 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d003      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2205      	movs	r2, #5
 8003ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	887a      	ldrh	r2, [r7, #2]
 8003eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	887a      	ldrh	r2, [r7, #2]
 8003ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	887a      	ldrh	r2, [r7, #2]
 8003ef6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f0c:	d802      	bhi.n	8003f14 <HAL_SPI_TransmitReceive+0xe6>
 8003f0e:	8a3b      	ldrh	r3, [r7, #16]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d908      	bls.n	8003f26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	e007      	b.n	8003f36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d007      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f5c:	d97c      	bls.n	8004058 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0x13e>
 8003f66:	8a7b      	ldrh	r3, [r7, #18]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d169      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f90:	e056      	b.n	8004040 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x1aa>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x1aa>
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d113      	bne.n	8003fd8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	881a      	ldrh	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d11c      	bne.n	8004020 <HAL_SPI_TransmitReceive+0x1f2>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800401c:	2301      	movs	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004020:	f7fd fb72 	bl	8001708 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402c:	429a      	cmp	r2, r3
 800402e:	d807      	bhi.n	8004040 <HAL_SPI_TransmitReceive+0x212>
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d003      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800403e:	e0fb      	b.n	8004238 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1a3      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x164>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d19d      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x164>
 8004056:	e0df      	b.n	8004218 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x23a>
 8004060:	8a7b      	ldrh	r3, [r7, #18]
 8004062:	2b01      	cmp	r3, #1
 8004064:	f040 80cb 	bne.w	80041fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d912      	bls.n	8004098 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b02      	subs	r3, #2
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004096:	e0b2      	b.n	80041fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	7812      	ldrb	r2, [r2, #0]
 80040a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040be:	e09e      	b.n	80041fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d134      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x30a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d02f      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x30a>
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d12c      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d912      	bls.n	800410e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b02      	subs	r3, #2
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800410c:	e012      	b.n	8004134 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	330c      	adds	r3, #12
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b01      	cmp	r3, #1
 8004144:	d148      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x3aa>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d042      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d923      	bls.n	80041a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	b292      	uxth	r2, r2
 800416a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b02      	subs	r3, #2
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b01      	cmp	r3, #1
 8004192:	d81f      	bhi.n	80041d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	e016      	b.n	80041d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f103 020c 	add.w	r2, r3, #12
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	7812      	ldrb	r2, [r2, #0]
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041d8:	f7fd fa96 	bl	8001708 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d803      	bhi.n	80041f0 <HAL_SPI_TransmitReceive+0x3c2>
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d102      	bne.n	80041f6 <HAL_SPI_TransmitReceive+0x3c8>
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041fc:	e01c      	b.n	8004238 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f af5b 	bne.w	80040c0 <HAL_SPI_TransmitReceive+0x292>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	f47f af54 	bne.w	80040c0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f98f 	bl	8004540 <SPI_EndRxTxTransaction>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d006      	beq.n	8004236 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	661a      	str	r2, [r3, #96]	; 0x60
 8004234:	e000      	b.n	8004238 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800424c:	4618      	mov	r0, r3
 800424e:	3728      	adds	r7, #40	; 0x28
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004264:	f7fd fa50 	bl	8001708 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	4413      	add	r3, r2
 8004272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004274:	f7fd fa48 	bl	8001708 <HAL_GetTick>
 8004278:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	015b      	lsls	r3, r3, #5
 8004280:	0d1b      	lsrs	r3, r3, #20
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800428a:	e054      	b.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d050      	beq.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004294:	f7fd fa38 	bl	8001708 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d902      	bls.n	80042aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13d      	bne.n	8004326 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c2:	d111      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042cc:	d004      	beq.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d107      	bne.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	d10f      	bne.n	8004312 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e017      	b.n	8004356 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	3b01      	subs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d19b      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000014 	.word	0x20000014

08004364 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	; 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004376:	f7fd f9c7 	bl	8001708 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	4413      	add	r3, r2
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004386:	f7fd f9bf 	bl	8001708 <HAL_GetTick>
 800438a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004394:	4b3d      	ldr	r3, [pc, #244]	; (800448c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00da      	lsls	r2, r3, #3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	0d1b      	lsrs	r3, r3, #20
 80043a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043ac:	e060      	b.n	8004470 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043b4:	d107      	bne.n	80043c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d050      	beq.n	8004470 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043ce:	f7fd f99b 	bl	8001708 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	429a      	cmp	r2, r3
 80043dc:	d902      	bls.n	80043e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d13d      	bne.n	8004460 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fc:	d111      	bne.n	8004422 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004406:	d004      	beq.n	8004412 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004410:	d107      	bne.n	8004422 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004420:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442a:	d10f      	bne.n	800444c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800444a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e010      	b.n	8004482 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	3b01      	subs	r3, #1
 800446e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4013      	ands	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d196      	bne.n	80043ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3728      	adds	r7, #40	; 0x28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000014 	.word	0x20000014

08004490 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a4:	d111      	bne.n	80044ca <SPI_EndRxTransaction+0x3a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ae:	d004      	beq.n	80044ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d107      	bne.n	80044ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff febd 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e023      	b.n	8004538 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f8:	d11d      	bne.n	8004536 <SPI_EndRxTransaction+0xa6>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004502:	d004      	beq.n	800450e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450c:	d113      	bne.n	8004536 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff ff22 	bl	8004364 <SPI_WaitFifoStateUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e000      	b.n	8004538 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2200      	movs	r2, #0
 8004554:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff ff03 	bl	8004364 <SPI_WaitFifoStateUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e027      	b.n	80045c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff fe68 	bl	8004254 <SPI_WaitFlagStateUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458e:	f043 0220 	orr.w	r2, r3, #32
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e014      	b.n	80045c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff fedc 	bl	8004364 <SPI_WaitFifoStateUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e000      	b.n	80045c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e049      	b.n	8004672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc fde6 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 fab0 	bl	8004b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e049      	b.n	8004720 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f841 	bl	8004728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f000 fa59 	bl	8004b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <HAL_TIM_PWM_Start+0x24>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e03c      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b04      	cmp	r3, #4
 8004764:	d109      	bne.n	800477a <HAL_TIM_PWM_Start+0x3e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	e02f      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d109      	bne.n	8004794 <HAL_TIM_PWM_Start+0x58>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e022      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d109      	bne.n	80047ae <HAL_TIM_PWM_Start+0x72>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e015      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x8c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e008      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e09c      	b.n	800491c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Start+0xb6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	e023      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0xc6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004800:	e01b      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xd6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004810:	e013      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xe6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004820:	e00b      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b10      	cmp	r3, #16
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start+0xf6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004830:	e003      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fd04 	bl	8005250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a35      	ldr	r2, [pc, #212]	; (8004924 <HAL_TIM_PWM_Start+0x1e8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a34      	ldr	r2, [pc, #208]	; (8004928 <HAL_TIM_PWM_Start+0x1ec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a32      	ldr	r2, [pc, #200]	; (800492c <HAL_TIM_PWM_Start+0x1f0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a31      	ldr	r2, [pc, #196]	; (8004930 <HAL_TIM_PWM_Start+0x1f4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2f      	ldr	r2, [pc, #188]	; (8004934 <HAL_TIM_PWM_Start+0x1f8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_TIM_PWM_Start+0x142>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_TIM_PWM_Start+0x144>
 800487e:	2300      	movs	r3, #0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a22      	ldr	r2, [pc, #136]	; (8004924 <HAL_TIM_PWM_Start+0x1e8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01d      	beq.n	80048da <HAL_TIM_PWM_Start+0x19e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d018      	beq.n	80048da <HAL_TIM_PWM_Start+0x19e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a22      	ldr	r2, [pc, #136]	; (8004938 <HAL_TIM_PWM_Start+0x1fc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_TIM_PWM_Start+0x19e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a21      	ldr	r2, [pc, #132]	; (800493c <HAL_TIM_PWM_Start+0x200>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00e      	beq.n	80048da <HAL_TIM_PWM_Start+0x19e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <HAL_TIM_PWM_Start+0x204>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_TIM_PWM_Start+0x19e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <HAL_TIM_PWM_Start+0x1ec>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d004      	beq.n	80048da <HAL_TIM_PWM_Start+0x19e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a15      	ldr	r2, [pc, #84]	; (800492c <HAL_TIM_PWM_Start+0x1f0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d115      	bne.n	8004906 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_TIM_PWM_Start+0x208>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b06      	cmp	r3, #6
 80048ea:	d015      	beq.n	8004918 <HAL_TIM_PWM_Start+0x1dc>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d011      	beq.n	8004918 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	e008      	b.n	8004918 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e000      	b.n	800491a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	00010007 	.word	0x00010007

08004948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004962:	2302      	movs	r3, #2
 8004964:	e0ff      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b14      	cmp	r3, #20
 8004972:	f200 80f0 	bhi.w	8004b56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049d1 	.word	0x080049d1
 8004980:	08004b57 	.word	0x08004b57
 8004984:	08004b57 	.word	0x08004b57
 8004988:	08004b57 	.word	0x08004b57
 800498c:	08004a11 	.word	0x08004a11
 8004990:	08004b57 	.word	0x08004b57
 8004994:	08004b57 	.word	0x08004b57
 8004998:	08004b57 	.word	0x08004b57
 800499c:	08004a53 	.word	0x08004a53
 80049a0:	08004b57 	.word	0x08004b57
 80049a4:	08004b57 	.word	0x08004b57
 80049a8:	08004b57 	.word	0x08004b57
 80049ac:	08004a93 	.word	0x08004a93
 80049b0:	08004b57 	.word	0x08004b57
 80049b4:	08004b57 	.word	0x08004b57
 80049b8:	08004b57 	.word	0x08004b57
 80049bc:	08004ad5 	.word	0x08004ad5
 80049c0:	08004b57 	.word	0x08004b57
 80049c4:	08004b57 	.word	0x08004b57
 80049c8:	08004b57 	.word	0x08004b57
 80049cc:	08004b15 	.word	0x08004b15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f964 	bl	8004ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0208 	orr.w	r2, r2, #8
 80049ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6999      	ldr	r1, [r3, #24]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	619a      	str	r2, [r3, #24]
      break;
 8004a0e:	e0a5      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f9d4 	bl	8004dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	619a      	str	r2, [r3, #24]
      break;
 8004a50:	e084      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fa3d 	bl	8004ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0208 	orr.w	r2, r2, #8
 8004a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0204 	bic.w	r2, r2, #4
 8004a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69d9      	ldr	r1, [r3, #28]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	61da      	str	r2, [r3, #28]
      break;
 8004a90:	e064      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 faa5 	bl	8004fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	021a      	lsls	r2, r3, #8
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	61da      	str	r2, [r3, #28]
      break;
 8004ad2:	e043      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 faee 	bl	80050bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0208 	orr.w	r2, r2, #8
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b12:	e023      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fb32 	bl	8005184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b54:	e002      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop

08004b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a40      	ldr	r2, [pc, #256]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8e:	d00f      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3d      	ldr	r2, [pc, #244]	; (8004c88 <TIM_Base_SetConfig+0x118>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3c      	ldr	r2, [pc, #240]	; (8004c8c <TIM_Base_SetConfig+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d007      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <TIM_Base_SetConfig+0x120>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d108      	bne.n	8004bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2f      	ldr	r2, [pc, #188]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01f      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd0:	d01b      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2c      	ldr	r2, [pc, #176]	; (8004c88 <TIM_Base_SetConfig+0x118>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d017      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a2b      	ldr	r2, [pc, #172]	; (8004c8c <TIM_Base_SetConfig+0x11c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <TIM_Base_SetConfig+0x120>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00f      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a29      	ldr	r2, [pc, #164]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <TIM_Base_SetConfig+0x128>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <TIM_Base_SetConfig+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_Base_SetConfig+0x9a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <TIM_Base_SetConfig+0x130>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <TIM_Base_SetConfig+0x114>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00f      	beq.n	8004c68 <TIM_Base_SetConfig+0xf8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <TIM_Base_SetConfig+0x124>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <TIM_Base_SetConfig+0xf8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <TIM_Base_SetConfig+0x128>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d007      	beq.n	8004c68 <TIM_Base_SetConfig+0xf8>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a10      	ldr	r2, [pc, #64]	; (8004c9c <TIM_Base_SetConfig+0x12c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0xf8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a0f      	ldr	r2, [pc, #60]	; (8004ca0 <TIM_Base_SetConfig+0x130>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d103      	bne.n	8004c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	615a      	str	r2, [r3, #20]
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40000800 	.word	0x40000800
 8004c90:	40000c00 	.word	0x40000c00
 8004c94:	40013400 	.word	0x40013400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40014400 	.word	0x40014400
 8004ca0:	40014800 	.word	0x40014800

08004ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 0302 	bic.w	r3, r3, #2
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a2c      	ldr	r2, [pc, #176]	; (8004db0 <TIM_OC1_SetConfig+0x10c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00f      	beq.n	8004d24 <TIM_OC1_SetConfig+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <TIM_OC1_SetConfig+0x110>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_OC1_SetConfig+0x80>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <TIM_OC1_SetConfig+0x114>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC1_SetConfig+0x80>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <TIM_OC1_SetConfig+0x118>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC1_SetConfig+0x80>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a28      	ldr	r2, [pc, #160]	; (8004dc0 <TIM_OC1_SetConfig+0x11c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0308 	bic.w	r3, r3, #8
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <TIM_OC1_SetConfig+0x10c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00f      	beq.n	8004d66 <TIM_OC1_SetConfig+0xc2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <TIM_OC1_SetConfig+0x110>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_OC1_SetConfig+0xc2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <TIM_OC1_SetConfig+0x114>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_OC1_SetConfig+0xc2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a18      	ldr	r2, [pc, #96]	; (8004dbc <TIM_OC1_SetConfig+0x118>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_OC1_SetConfig+0xc2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a17      	ldr	r2, [pc, #92]	; (8004dc0 <TIM_OC1_SetConfig+0x11c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d111      	bne.n	8004d8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0210 	bic.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0320 	bic.w	r3, r3, #32
 8004e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <TIM_OC2_SetConfig+0x100>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_OC2_SetConfig+0x6c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <TIM_OC2_SetConfig+0x104>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10d      	bne.n	8004e4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <TIM_OC2_SetConfig+0x100>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00f      	beq.n	8004e74 <TIM_OC2_SetConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <TIM_OC2_SetConfig+0x104>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00b      	beq.n	8004e74 <TIM_OC2_SetConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <TIM_OC2_SetConfig+0x108>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <TIM_OC2_SetConfig+0xb0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <TIM_OC2_SetConfig+0x10c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC2_SetConfig+0xb0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <TIM_OC2_SetConfig+0x110>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d113      	bne.n	8004e9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	021b      	lsls	r3, r3, #8
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <TIM_OC3_SetConfig+0xfc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_OC3_SetConfig+0x6a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <TIM_OC3_SetConfig+0x100>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10d      	bne.n	8004f5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1c      	ldr	r2, [pc, #112]	; (8004fd4 <TIM_OC3_SetConfig+0xfc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00f      	beq.n	8004f86 <TIM_OC3_SetConfig+0xae>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <TIM_OC3_SetConfig+0x100>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00b      	beq.n	8004f86 <TIM_OC3_SetConfig+0xae>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1a      	ldr	r2, [pc, #104]	; (8004fdc <TIM_OC3_SetConfig+0x104>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d007      	beq.n	8004f86 <TIM_OC3_SetConfig+0xae>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a19      	ldr	r2, [pc, #100]	; (8004fe0 <TIM_OC3_SetConfig+0x108>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_OC3_SetConfig+0xae>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <TIM_OC3_SetConfig+0x10c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d113      	bne.n	8004fae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	621a      	str	r2, [r3, #32]
}
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800

08004fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	031b      	lsls	r3, r3, #12
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <TIM_OC4_SetConfig+0xc0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_OC4_SetConfig+0x84>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <TIM_OC4_SetConfig+0xc4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00b      	beq.n	800506c <TIM_OC4_SetConfig+0x84>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <TIM_OC4_SetConfig+0xc8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_OC4_SetConfig+0x84>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <TIM_OC4_SetConfig+0xcc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_OC4_SetConfig+0x84>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <TIM_OC4_SetConfig+0xd0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d109      	bne.n	8005080 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800

080050bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005100:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <TIM_OC5_SetConfig+0xb4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_OC5_SetConfig+0x7a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a16      	ldr	r2, [pc, #88]	; (8005174 <TIM_OC5_SetConfig+0xb8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_OC5_SetConfig+0x7a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a15      	ldr	r2, [pc, #84]	; (8005178 <TIM_OC5_SetConfig+0xbc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_OC5_SetConfig+0x7a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a14      	ldr	r2, [pc, #80]	; (800517c <TIM_OC5_SetConfig+0xc0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC5_SetConfig+0x7a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <TIM_OC5_SetConfig+0xc4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d109      	bne.n	800514a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40013400 	.word	0x40013400
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	051b      	lsls	r3, r3, #20
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <TIM_OC6_SetConfig+0xb8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00f      	beq.n	8005200 <TIM_OC6_SetConfig+0x7c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a17      	ldr	r2, [pc, #92]	; (8005240 <TIM_OC6_SetConfig+0xbc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00b      	beq.n	8005200 <TIM_OC6_SetConfig+0x7c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a16      	ldr	r2, [pc, #88]	; (8005244 <TIM_OC6_SetConfig+0xc0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_OC6_SetConfig+0x7c>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a15      	ldr	r2, [pc, #84]	; (8005248 <TIM_OC6_SetConfig+0xc4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_OC6_SetConfig+0x7c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a14      	ldr	r2, [pc, #80]	; (800524c <TIM_OC6_SetConfig+0xc8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d109      	bne.n	8005214 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	029b      	lsls	r3, r3, #10
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40013400 	.word	0x40013400
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2201      	movs	r2, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	431a      	orrs	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e065      	b.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d115      	bne.n	8005372 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	051b      	lsls	r3, r3, #20
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40013400 	.word	0x40013400

08005398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e040      	b.n	800542c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fb ff5a 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	; 0x24
 80053c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fd4c 	bl	8005e74 <UART_SetConfig>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e022      	b.n	800542c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fff8 	bl	80063e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f001 f87f 	bl	8006528 <UART_CheckIdleState>
 800542a:	4603      	mov	r3, r0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e02b      	b.n	800549e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2224      	movs	r2, #36	; 0x24
 800544a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2200      	movs	r2, #0
 800546a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2200      	movs	r2, #0
 8005472:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7fb ff63 	bl	8001340 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b08a      	sub	sp, #40	; 0x28
 80054aa:	af02      	add	r7, sp, #8
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	f040 8082 	bne.w	80055c4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_UART_Transmit+0x26>
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e07a      	b.n	80055c6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_UART_Transmit+0x38>
 80054da:	2302      	movs	r3, #2
 80054dc:	e073      	b.n	80055c6 <HAL_UART_Transmit+0x120>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f4:	f7fc f908 	bl	8001708 <HAL_GetTick>
 80054f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	88fa      	ldrh	r2, [r7, #6]
 80054fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005512:	d108      	bne.n	8005526 <HAL_UART_Transmit+0x80>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e003      	b.n	800552e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005536:	e02d      	b.n	8005594 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2200      	movs	r2, #0
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f001 f839 	bl	80065ba <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e039      	b.n	80055c6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	881a      	ldrh	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005564:	b292      	uxth	r2, r2
 8005566:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	3302      	adds	r3, #2
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	e008      	b.n	8005582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	b292      	uxth	r2, r2
 800557a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1cb      	bne.n	8005538 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f001 f805 	bl	80065ba <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e005      	b.n	80055c6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d142      	bne.n	800566c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_UART_Receive_IT+0x22>
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e03b      	b.n	800566e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Receive_IT+0x34>
 8005600:	2302      	movs	r3, #2
 8005602:	e034      	b.n	800566e <HAL_UART_Receive_IT+0x9e>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a18      	ldr	r2, [pc, #96]	; (8005678 <HAL_UART_Receive_IT+0xa8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d01f      	beq.n	800565c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	613b      	str	r3, [r7, #16]
   return(result);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	69f9      	ldr	r1, [r7, #28]
 800564e:	6a3a      	ldr	r2, [r7, #32]
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	61bb      	str	r3, [r7, #24]
   return(result);
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	461a      	mov	r2, r3
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f001 f86e 	bl	8006744 <UART_Start_Receive_IT>
 8005668:	4603      	mov	r3, r0
 800566a:	e000      	b.n	800566e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	4618      	mov	r0, r3
 8005670:	3728      	adds	r7, #40	; 0x28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40008000 	.word	0x40008000

0800567c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b0a0      	sub	sp, #128	; 0x80
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005694:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8005698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a4:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80056a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80056b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e6      	bne.n	8005684 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3308      	adds	r3, #8
 80056bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056d6:	657a      	str	r2, [r7, #84]	; 0x54
 80056d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e5      	bne.n	80056b6 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d118      	bne.n	8005724 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	677b      	str	r3, [r7, #116]	; 0x74
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005710:	643b      	str	r3, [r7, #64]	; 0x40
 8005712:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e6      	bne.n	80056f2 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b80      	cmp	r3, #128	; 0x80
 8005730:	d137      	bne.n	80057a2 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	61fb      	str	r3, [r7, #28]
   return(result);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005748:	673b      	str	r3, [r7, #112]	; 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e5      	bne.n	8005732 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d019      	beq.n	80057a2 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005772:	2200      	movs	r2, #0
 8005774:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577a:	4618      	mov	r0, r3
 800577c:	f7fc f913 	bl	80019a6 <HAL_DMA_Abort>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00d      	beq.n	80057a2 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800578a:	4618      	mov	r0, r3
 800578c:	f7fc f98a 	bl	8001aa4 <HAL_DMA_GetError>
 8005790:	4603      	mov	r3, r0
 8005792:	2b20      	cmp	r3, #32
 8005794:	d105      	bne.n	80057a2 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2210      	movs	r2, #16
 800579a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e062      	b.n	8005868 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d137      	bne.n	8005820 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3308      	adds	r3, #8
 80057ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057d0:	61ba      	str	r2, [r7, #24]
 80057d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	613b      	str	r3, [r7, #16]
   return(result);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e5      	bne.n	80057b0 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d019      	beq.n	8005820 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	2200      	movs	r2, #0
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fc f8d4 	bl	80019a6 <HAL_DMA_Abort>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00d      	beq.n	8005820 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005808:	4618      	mov	r0, r3
 800580a:	f7fc f94b 	bl	8001aa4 <HAL_DMA_GetError>
 800580e:	4603      	mov	r3, r0
 8005810:	2b20      	cmp	r3, #32
 8005812:	d105      	bne.n	8005820 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2210      	movs	r2, #16
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e023      	b.n	8005868 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	220f      	movs	r2, #15
 8005836:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	8b1b      	ldrh	r3, [r3, #24]
 800583e:	b29a      	uxth	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0208 	orr.w	r2, r2, #8
 8005848:	b292      	uxth	r2, r2
 800584a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3780      	adds	r7, #128	; 0x80
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b0ba      	sub	sp, #232	; 0xe8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800589a:	f640 030f 	movw	r3, #2063	; 0x80f
 800589e:	4013      	ands	r3, r2
 80058a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d115      	bne.n	80058d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00f      	beq.n	80058d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 82a6 	beq.w	8005e1a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
      }
      return;
 80058d6:	e2a0      	b.n	8005e1a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80058d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8117 	beq.w	8005b10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058f2:	4b85      	ldr	r3, [pc, #532]	; (8005b08 <HAL_UART_IRQHandler+0x298>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 810a 	beq.w	8005b10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d011      	beq.n	800592c <HAL_UART_IRQHandler+0xbc>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2201      	movs	r2, #1
 800591a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800592c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d011      	beq.n	800595c <HAL_UART_IRQHandler+0xec>
 8005938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2202      	movs	r2, #2
 800594a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005952:	f043 0204 	orr.w	r2, r3, #4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d011      	beq.n	800598c <HAL_UART_IRQHandler+0x11c>
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2204      	movs	r2, #4
 800597a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005982:	f043 0202 	orr.w	r2, r3, #2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800598c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2208      	movs	r2, #8
 80059b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059be:	f043 0208 	orr.w	r2, r3, #8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d012      	beq.n	80059fa <HAL_UART_IRQHandler+0x18a>
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 820c 	beq.w	8005e1e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d005      	beq.n	8005a52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d04f      	beq.n	8005af2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 ff40 	bl	80068d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d141      	bne.n	8005aea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1d9      	bne.n	8005a66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d013      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <HAL_UART_IRQHandler+0x29c>)
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fb ffab 	bl	8001a22 <HAL_DMA_Abort_IT>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d017      	beq.n	8005b02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e00f      	b.n	8005b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f9b0 	bl	8005e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00b      	b.n	8005b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9ac 	bl	8005e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e007      	b.n	8005b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9a8 	bl	8005e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b00:	e18d      	b.n	8005e1e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b02:	bf00      	nop
    return;
 8005b04:	e18b      	b.n	8005e1e <HAL_UART_IRQHandler+0x5ae>
 8005b06:	bf00      	nop
 8005b08:	04000120 	.word	0x04000120
 8005b0c:	0800699f 	.word	0x0800699f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f040 8146 	bne.w	8005da6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 813f 	beq.w	8005da6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8138 	beq.w	8005da6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2210      	movs	r2, #16
 8005b3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	f040 80b4 	bne.w	8005cb6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 815f 	beq.w	8005e22 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	f080 8157 	bcs.w	8005e22 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 8085 	bne.w	8005c9a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1da      	bne.n	8005b90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e1      	bne.n	8005bda <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3308      	adds	r3, #8
 8005c36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c42:	e841 2300 	strex	r3, r2, [r1]
 8005c46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e3      	bne.n	8005c16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6a:	f023 0310 	bic.w	r3, r3, #16
 8005c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e4      	bne.n	8005c5a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fb fe86 	bl	80019a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f8d4 	bl	8005e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cb4:	e0b5      	b.n	8005e22 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80a7 	beq.w	8005e26 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a2 	beq.w	8005e26 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d04:	647b      	str	r3, [r7, #68]	; 0x44
 8005d06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e4      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	623b      	str	r3, [r7, #32]
   return(result);
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3308      	adds	r3, #8
 8005d38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d3c:	633a      	str	r2, [r7, #48]	; 0x30
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e3      	bne.n	8005d18 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0310 	bic.w	r3, r3, #16
 8005d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	617b      	str	r3, [r7, #20]
   return(result);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e4      	bne.n	8005d62 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f85c 	bl	8005e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005da4:	e03f      	b.n	8005e26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00e      	beq.n	8005dd0 <HAL_UART_IRQHandler+0x560>
 8005db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 ff88 	bl	8006cde <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dce:	e02d      	b.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00e      	beq.n	8005dfa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d008      	beq.n	8005dfa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01c      	beq.n	8005e2a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
    }
    return;
 8005df8:	e017      	b.n	8005e2a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d012      	beq.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
 8005e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00c      	beq.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fdd9 	bl	80069ca <UART_EndTransmit_IT>
    return;
 8005e18:	e008      	b.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e1a:	bf00      	nop
 8005e1c:	e006      	b.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e1e:	bf00      	nop
 8005e20:	e004      	b.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e22:	bf00      	nop
 8005e24:	e002      	b.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e26:	bf00      	nop
 8005e28:	e000      	b.n	8005e2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e2a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e2c:	37e8      	adds	r7, #232	; 0xe8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e78:	b08a      	sub	sp, #40	; 0x28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4ba4      	ldr	r3, [pc, #656]	; (8006134 <UART_SetConfig+0x2c0>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eac:	430b      	orrs	r3, r1
 8005eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a99      	ldr	r2, [pc, #612]	; (8006138 <UART_SetConfig+0x2c4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	4313      	orrs	r3, r2
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a90      	ldr	r2, [pc, #576]	; (800613c <UART_SetConfig+0x2c8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d126      	bne.n	8005f4c <UART_SetConfig+0xd8>
 8005efe:	4b90      	ldr	r3, [pc, #576]	; (8006140 <UART_SetConfig+0x2cc>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d81b      	bhi.n	8005f44 <UART_SetConfig+0xd0>
 8005f0c:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <UART_SetConfig+0xa0>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f25 	.word	0x08005f25
 8005f18:	08005f35 	.word	0x08005f35
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f3d 	.word	0x08005f3d
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2a:	e116      	b.n	800615a <UART_SetConfig+0x2e6>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f32:	e112      	b.n	800615a <UART_SetConfig+0x2e6>
 8005f34:	2304      	movs	r3, #4
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3a:	e10e      	b.n	800615a <UART_SetConfig+0x2e6>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f42:	e10a      	b.n	800615a <UART_SetConfig+0x2e6>
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e106      	b.n	800615a <UART_SetConfig+0x2e6>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a7c      	ldr	r2, [pc, #496]	; (8006144 <UART_SetConfig+0x2d0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d138      	bne.n	8005fc8 <UART_SetConfig+0x154>
 8005f56:	4b7a      	ldr	r3, [pc, #488]	; (8006140 <UART_SetConfig+0x2cc>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f003 030c 	and.w	r3, r3, #12
 8005f60:	2b0c      	cmp	r3, #12
 8005f62:	d82d      	bhi.n	8005fc0 <UART_SetConfig+0x14c>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0xf8>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005fa1 	.word	0x08005fa1
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	08005fc1 	.word	0x08005fc1
 8005f78:	08005fc1 	.word	0x08005fc1
 8005f7c:	08005fb1 	.word	0x08005fb1
 8005f80:	08005fc1 	.word	0x08005fc1
 8005f84:	08005fc1 	.word	0x08005fc1
 8005f88:	08005fc1 	.word	0x08005fc1
 8005f8c:	08005fa9 	.word	0x08005fa9
 8005f90:	08005fc1 	.word	0x08005fc1
 8005f94:	08005fc1 	.word	0x08005fc1
 8005f98:	08005fc1 	.word	0x08005fc1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa6:	e0d8      	b.n	800615a <UART_SetConfig+0x2e6>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fae:	e0d4      	b.n	800615a <UART_SetConfig+0x2e6>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb6:	e0d0      	b.n	800615a <UART_SetConfig+0x2e6>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fbe:	e0cc      	b.n	800615a <UART_SetConfig+0x2e6>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc6:	e0c8      	b.n	800615a <UART_SetConfig+0x2e6>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a5e      	ldr	r2, [pc, #376]	; (8006148 <UART_SetConfig+0x2d4>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d125      	bne.n	800601e <UART_SetConfig+0x1aa>
 8005fd2:	4b5b      	ldr	r3, [pc, #364]	; (8006140 <UART_SetConfig+0x2cc>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fdc:	2b30      	cmp	r3, #48	; 0x30
 8005fde:	d016      	beq.n	800600e <UART_SetConfig+0x19a>
 8005fe0:	2b30      	cmp	r3, #48	; 0x30
 8005fe2:	d818      	bhi.n	8006016 <UART_SetConfig+0x1a2>
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d00a      	beq.n	8005ffe <UART_SetConfig+0x18a>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d814      	bhi.n	8006016 <UART_SetConfig+0x1a2>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <UART_SetConfig+0x182>
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d008      	beq.n	8006006 <UART_SetConfig+0x192>
 8005ff4:	e00f      	b.n	8006016 <UART_SetConfig+0x1a2>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffc:	e0ad      	b.n	800615a <UART_SetConfig+0x2e6>
 8005ffe:	2302      	movs	r3, #2
 8006000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006004:	e0a9      	b.n	800615a <UART_SetConfig+0x2e6>
 8006006:	2304      	movs	r3, #4
 8006008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600c:	e0a5      	b.n	800615a <UART_SetConfig+0x2e6>
 800600e:	2308      	movs	r3, #8
 8006010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006014:	e0a1      	b.n	800615a <UART_SetConfig+0x2e6>
 8006016:	2310      	movs	r3, #16
 8006018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601c:	e09d      	b.n	800615a <UART_SetConfig+0x2e6>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a4a      	ldr	r2, [pc, #296]	; (800614c <UART_SetConfig+0x2d8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d125      	bne.n	8006074 <UART_SetConfig+0x200>
 8006028:	4b45      	ldr	r3, [pc, #276]	; (8006140 <UART_SetConfig+0x2cc>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006032:	2bc0      	cmp	r3, #192	; 0xc0
 8006034:	d016      	beq.n	8006064 <UART_SetConfig+0x1f0>
 8006036:	2bc0      	cmp	r3, #192	; 0xc0
 8006038:	d818      	bhi.n	800606c <UART_SetConfig+0x1f8>
 800603a:	2b80      	cmp	r3, #128	; 0x80
 800603c:	d00a      	beq.n	8006054 <UART_SetConfig+0x1e0>
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d814      	bhi.n	800606c <UART_SetConfig+0x1f8>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <UART_SetConfig+0x1d8>
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d008      	beq.n	800605c <UART_SetConfig+0x1e8>
 800604a:	e00f      	b.n	800606c <UART_SetConfig+0x1f8>
 800604c:	2300      	movs	r3, #0
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006052:	e082      	b.n	800615a <UART_SetConfig+0x2e6>
 8006054:	2302      	movs	r3, #2
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605a:	e07e      	b.n	800615a <UART_SetConfig+0x2e6>
 800605c:	2304      	movs	r3, #4
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006062:	e07a      	b.n	800615a <UART_SetConfig+0x2e6>
 8006064:	2308      	movs	r3, #8
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606a:	e076      	b.n	800615a <UART_SetConfig+0x2e6>
 800606c:	2310      	movs	r3, #16
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006072:	e072      	b.n	800615a <UART_SetConfig+0x2e6>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a35      	ldr	r2, [pc, #212]	; (8006150 <UART_SetConfig+0x2dc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d12a      	bne.n	80060d4 <UART_SetConfig+0x260>
 800607e:	4b30      	ldr	r3, [pc, #192]	; (8006140 <UART_SetConfig+0x2cc>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608c:	d01a      	beq.n	80060c4 <UART_SetConfig+0x250>
 800608e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006092:	d81b      	bhi.n	80060cc <UART_SetConfig+0x258>
 8006094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006098:	d00c      	beq.n	80060b4 <UART_SetConfig+0x240>
 800609a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609e:	d815      	bhi.n	80060cc <UART_SetConfig+0x258>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <UART_SetConfig+0x238>
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d008      	beq.n	80060bc <UART_SetConfig+0x248>
 80060aa:	e00f      	b.n	80060cc <UART_SetConfig+0x258>
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b2:	e052      	b.n	800615a <UART_SetConfig+0x2e6>
 80060b4:	2302      	movs	r3, #2
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ba:	e04e      	b.n	800615a <UART_SetConfig+0x2e6>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060c2:	e04a      	b.n	800615a <UART_SetConfig+0x2e6>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ca:	e046      	b.n	800615a <UART_SetConfig+0x2e6>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d2:	e042      	b.n	800615a <UART_SetConfig+0x2e6>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <UART_SetConfig+0x2c4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d13a      	bne.n	8006154 <UART_SetConfig+0x2e0>
 80060de:	4b18      	ldr	r3, [pc, #96]	; (8006140 <UART_SetConfig+0x2cc>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ec:	d01a      	beq.n	8006124 <UART_SetConfig+0x2b0>
 80060ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060f2:	d81b      	bhi.n	800612c <UART_SetConfig+0x2b8>
 80060f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f8:	d00c      	beq.n	8006114 <UART_SetConfig+0x2a0>
 80060fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fe:	d815      	bhi.n	800612c <UART_SetConfig+0x2b8>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <UART_SetConfig+0x298>
 8006104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006108:	d008      	beq.n	800611c <UART_SetConfig+0x2a8>
 800610a:	e00f      	b.n	800612c <UART_SetConfig+0x2b8>
 800610c:	2300      	movs	r3, #0
 800610e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006112:	e022      	b.n	800615a <UART_SetConfig+0x2e6>
 8006114:	2302      	movs	r3, #2
 8006116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611a:	e01e      	b.n	800615a <UART_SetConfig+0x2e6>
 800611c:	2304      	movs	r3, #4
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006122:	e01a      	b.n	800615a <UART_SetConfig+0x2e6>
 8006124:	2308      	movs	r3, #8
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800612a:	e016      	b.n	800615a <UART_SetConfig+0x2e6>
 800612c:	2310      	movs	r3, #16
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006132:	e012      	b.n	800615a <UART_SetConfig+0x2e6>
 8006134:	efff69f3 	.word	0xefff69f3
 8006138:	40008000 	.word	0x40008000
 800613c:	40013800 	.word	0x40013800
 8006140:	40021000 	.word	0x40021000
 8006144:	40004400 	.word	0x40004400
 8006148:	40004800 	.word	0x40004800
 800614c:	40004c00 	.word	0x40004c00
 8006150:	40005000 	.word	0x40005000
 8006154:	2310      	movs	r3, #16
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a9f      	ldr	r2, [pc, #636]	; (80063dc <UART_SetConfig+0x568>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d17a      	bne.n	800625a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006168:	2b08      	cmp	r3, #8
 800616a:	d824      	bhi.n	80061b6 <UART_SetConfig+0x342>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x300>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006199 	.word	0x08006199
 8006178:	080061b7 	.word	0x080061b7
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061b7 	.word	0x080061b7
 8006184:	080061a7 	.word	0x080061a7
 8006188:	080061b7 	.word	0x080061b7
 800618c:	080061b7 	.word	0x080061b7
 8006190:	080061b7 	.word	0x080061b7
 8006194:	080061af 	.word	0x080061af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006198:	f7fc fdc0 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 800619c:	61f8      	str	r0, [r7, #28]
        break;
 800619e:	e010      	b.n	80061c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a0:	4b8f      	ldr	r3, [pc, #572]	; (80063e0 <UART_SetConfig+0x56c>)
 80061a2:	61fb      	str	r3, [r7, #28]
        break;
 80061a4:	e00d      	b.n	80061c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061a6:	f7fc fd21 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 80061aa:	61f8      	str	r0, [r7, #28]
        break;
 80061ac:	e009      	b.n	80061c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	61fb      	str	r3, [r7, #28]
        break;
 80061b4:	e005      	b.n	80061c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80fb 	beq.w	80063c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d305      	bcc.n	80061e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d903      	bls.n	80061ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061ec:	e0e8      	b.n	80063c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	2200      	movs	r2, #0
 80061f2:	461c      	mov	r4, r3
 80061f4:	4615      	mov	r5, r2
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	022b      	lsls	r3, r5, #8
 8006200:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006204:	0222      	lsls	r2, r4, #8
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6849      	ldr	r1, [r1, #4]
 800620a:	0849      	lsrs	r1, r1, #1
 800620c:	2000      	movs	r0, #0
 800620e:	4688      	mov	r8, r1
 8006210:	4681      	mov	r9, r0
 8006212:	eb12 0a08 	adds.w	sl, r2, r8
 8006216:	eb43 0b09 	adc.w	fp, r3, r9
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006228:	4650      	mov	r0, sl
 800622a:	4659      	mov	r1, fp
 800622c:	f7fa f838 	bl	80002a0 <__aeabi_uldivmod>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4613      	mov	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623e:	d308      	bcc.n	8006252 <UART_SetConfig+0x3de>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006246:	d204      	bcs.n	8006252 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e0b6      	b.n	80063c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006258:	e0b2      	b.n	80063c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006262:	d15e      	bne.n	8006322 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006268:	2b08      	cmp	r3, #8
 800626a:	d828      	bhi.n	80062be <UART_SetConfig+0x44a>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0x400>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062bf 	.word	0x080062bf
 8006284:	080062af 	.word	0x080062af
 8006288:	080062bf 	.word	0x080062bf
 800628c:	080062bf 	.word	0x080062bf
 8006290:	080062bf 	.word	0x080062bf
 8006294:	080062b7 	.word	0x080062b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fc fd40 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 800629c:	61f8      	str	r0, [r7, #28]
        break;
 800629e:	e014      	b.n	80062ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a0:	f7fc fd52 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 80062a4:	61f8      	str	r0, [r7, #28]
        break;
 80062a6:	e010      	b.n	80062ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b4d      	ldr	r3, [pc, #308]	; (80063e0 <UART_SetConfig+0x56c>)
 80062aa:	61fb      	str	r3, [r7, #28]
        break;
 80062ac:	e00d      	b.n	80062ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fc fc9d 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 80062b2:	61f8      	str	r0, [r7, #28]
        break;
 80062b4:	e009      	b.n	80062ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ba:	61fb      	str	r3, [r7, #28]
        break;
 80062bc:	e005      	b.n	80062ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d077      	beq.n	80063c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	005a      	lsls	r2, r3, #1
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	085b      	lsrs	r3, r3, #1
 80062da:	441a      	add	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b0f      	cmp	r3, #15
 80062ea:	d916      	bls.n	800631a <UART_SetConfig+0x4a6>
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f2:	d212      	bcs.n	800631a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f023 030f 	bic.w	r3, r3, #15
 80062fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	b29b      	uxth	r3, r3
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	b29a      	uxth	r2, r3
 800630a:	8afb      	ldrh	r3, [r7, #22]
 800630c:	4313      	orrs	r3, r2
 800630e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	8afa      	ldrh	r2, [r7, #22]
 8006316:	60da      	str	r2, [r3, #12]
 8006318:	e052      	b.n	80063c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006320:	e04e      	b.n	80063c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006326:	2b08      	cmp	r3, #8
 8006328:	d827      	bhi.n	800637a <UART_SetConfig+0x506>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <UART_SetConfig+0x4bc>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006355 	.word	0x08006355
 8006334:	0800635d 	.word	0x0800635d
 8006338:	08006365 	.word	0x08006365
 800633c:	0800637b 	.word	0x0800637b
 8006340:	0800636b 	.word	0x0800636b
 8006344:	0800637b 	.word	0x0800637b
 8006348:	0800637b 	.word	0x0800637b
 800634c:	0800637b 	.word	0x0800637b
 8006350:	08006373 	.word	0x08006373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006354:	f7fc fce2 	bl	8002d1c <HAL_RCC_GetPCLK1Freq>
 8006358:	61f8      	str	r0, [r7, #28]
        break;
 800635a:	e014      	b.n	8006386 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800635c:	f7fc fcf4 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8006360:	61f8      	str	r0, [r7, #28]
        break;
 8006362:	e010      	b.n	8006386 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006364:	4b1e      	ldr	r3, [pc, #120]	; (80063e0 <UART_SetConfig+0x56c>)
 8006366:	61fb      	str	r3, [r7, #28]
        break;
 8006368:	e00d      	b.n	8006386 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800636a:	f7fc fc3f 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 800636e:	61f8      	str	r0, [r7, #28]
        break;
 8006370:	e009      	b.n	8006386 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006376:	61fb      	str	r3, [r7, #28]
        break;
 8006378:	e005      	b.n	8006386 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006384:	bf00      	nop
    }

    if (pclk != 0U)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d019      	beq.n	80063c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	085a      	lsrs	r2, r3, #1
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	441a      	add	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b0f      	cmp	r3, #15
 80063a4:	d909      	bls.n	80063ba <UART_SetConfig+0x546>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ac:	d205      	bcs.n	80063ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60da      	str	r2, [r3, #12]
 80063b8:	e002      	b.n	80063c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3728      	adds	r7, #40	; 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063da:	bf00      	nop
 80063dc:	40008000 	.word	0x40008000
 80063e0:	00f42400 	.word	0x00f42400

080063e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00a      	beq.n	8006496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00a      	beq.n	80064b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d01a      	beq.n	80064fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e2:	d10a      	bne.n	80064fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  }
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af02      	add	r7, sp, #8
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006538:	f7fb f8e6 	bl	8001708 <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b08      	cmp	r3, #8
 800654a:	d10e      	bne.n	800656a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800654c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f82d 	bl	80065ba <UART_WaitOnFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e023      	b.n	80065b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b04      	cmp	r3, #4
 8006576:	d10e      	bne.n	8006596 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f817 	bl	80065ba <UART_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e00d      	b.n	80065b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b09c      	sub	sp, #112	; 0x70
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ca:	e0a5      	b.n	8006718 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d2:	f000 80a1 	beq.w	8006718 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fb f897 	bl	8001708 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <UART_WaitOnFlagUntilTimeout+0x32>
 80065e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d13e      	bne.n	800666a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006600:	667b      	str	r3, [r7, #100]	; 0x64
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800660a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800660c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006610:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e6      	bne.n	80065ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	663b      	str	r3, [r7, #96]	; 0x60
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800663e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006640:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e5      	bne.n	800661e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e067      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d04f      	beq.n	8006718 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006686:	d147      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006690:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
 80066b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e6      	bne.n	8006692 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	3308      	adds	r3, #8
 80066ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	613b      	str	r3, [r7, #16]
   return(result);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	66bb      	str	r3, [r7, #104]	; 0x68
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066e4:	623a      	str	r2, [r7, #32]
 80066e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	69f9      	ldr	r1, [r7, #28]
 80066ea:	6a3a      	ldr	r2, [r7, #32]
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e5      	bne.n	80066c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e010      	b.n	800673a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69da      	ldr	r2, [r3, #28]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4013      	ands	r3, r2
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	429a      	cmp	r2, r3
 8006734:	f43f af4a 	beq.w	80065cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3770      	adds	r7, #112	; 0x70
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006744:	b480      	push	{r7}
 8006746:	b097      	sub	sp, #92	; 0x5c
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d10e      	bne.n	8006796 <UART_Start_Receive_IT+0x52>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <UART_Start_Receive_IT+0x48>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800678a:	e02d      	b.n	80067e8 <UART_Start_Receive_IT+0xa4>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	22ff      	movs	r2, #255	; 0xff
 8006790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006794:	e028      	b.n	80067e8 <UART_Start_Receive_IT+0xa4>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10d      	bne.n	80067ba <UART_Start_Receive_IT+0x76>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <UART_Start_Receive_IT+0x6c>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ae:	e01b      	b.n	80067e8 <UART_Start_Receive_IT+0xa4>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	227f      	movs	r2, #127	; 0x7f
 80067b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067b8:	e016      	b.n	80067e8 <UART_Start_Receive_IT+0xa4>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c2:	d10d      	bne.n	80067e0 <UART_Start_Receive_IT+0x9c>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <UART_Start_Receive_IT+0x92>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	227f      	movs	r2, #127	; 0x7f
 80067d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067d4:	e008      	b.n	80067e8 <UART_Start_Receive_IT+0xa4>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	223f      	movs	r2, #63	; 0x3f
 80067da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067de:	e003      	b.n	80067e8 <UART_Start_Receive_IT+0xa4>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2222      	movs	r2, #34	; 0x22
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	657b      	str	r3, [r7, #84]	; 0x54
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006816:	64ba      	str	r2, [r7, #72]	; 0x48
 8006818:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800681c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006832:	d107      	bne.n	8006844 <UART_Start_Receive_IT+0x100>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d103      	bne.n	8006844 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <UART_Start_Receive_IT+0x18c>)
 8006840:	665a      	str	r2, [r3, #100]	; 0x64
 8006842:	e002      	b.n	800684a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a23      	ldr	r2, [pc, #140]	; (80068d4 <UART_Start_Receive_IT+0x190>)
 8006848:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d019      	beq.n	800688e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800686e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
 800687a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800687e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e6      	bne.n	800685a <UART_Start_Receive_IT+0x116>
 800688c:	e018      	b.n	80068c0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	613b      	str	r3, [r7, #16]
   return(result);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f043 0320 	orr.w	r3, r3, #32
 80068a2:	653b      	str	r3, [r7, #80]	; 0x50
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	69f9      	ldr	r1, [r7, #28]
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	375c      	adds	r7, #92	; 0x5c
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	08006b7f 	.word	0x08006b7f
 80068d4:	08006a1f 	.word	0x08006a1f

080068d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b095      	sub	sp, #84	; 0x54
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006900:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e6      	bne.n	80068e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3308      	adds	r3, #8
 8006918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	61fb      	str	r3, [r7, #28]
   return(result);
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	64bb      	str	r3, [r7, #72]	; 0x48
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694a:	2b01      	cmp	r3, #1
 800694c:	d118      	bne.n	8006980 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	60bb      	str	r3, [r7, #8]
   return(result);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f023 0310 	bic.w	r3, r3, #16
 8006962:	647b      	str	r3, [r7, #68]	; 0x44
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6979      	ldr	r1, [r7, #20]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	613b      	str	r3, [r7, #16]
   return(result);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006992:	bf00      	nop
 8006994:	3754      	adds	r7, #84	; 0x54
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff fa43 	bl	8005e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b088      	sub	sp, #32
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	613b      	str	r3, [r7, #16]
   return(result);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fa0f 	bl	8005e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a16:	bf00      	nop
 8006a18:	3720      	adds	r7, #32
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b096      	sub	sp, #88	; 0x58
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a34:	2b22      	cmp	r3, #34	; 0x22
 8006a36:	f040 8094 	bne.w	8006b62 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a40:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a44:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a48:	b2d9      	uxtb	r1, r3
 8006a4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a54:	400a      	ands	r2, r1
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d179      	bne.n	8006b76 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a96:	653b      	str	r3, [r7, #80]	; 0x50
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e6      	bne.n	8006a82 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d12e      	bne.n	8006b5a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0310 	bic.w	r3, r3, #16
 8006b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	69b9      	ldr	r1, [r7, #24]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d103      	bne.n	8006b4a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2210      	movs	r2, #16
 8006b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff f982 	bl	8005e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b58:	e00d      	b.n	8006b76 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7f9 ffe6 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8006b60:	e009      	b.n	8006b76 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	8b1b      	ldrh	r3, [r3, #24]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0208 	orr.w	r2, r2, #8
 8006b72:	b292      	uxth	r2, r2
 8006b74:	831a      	strh	r2, [r3, #24]
}
 8006b76:	bf00      	nop
 8006b78:	3758      	adds	r7, #88	; 0x58
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b096      	sub	sp, #88	; 0x58
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b94:	2b22      	cmp	r3, #34	; 0x22
 8006b96:	f040 8094 	bne.w	8006cc2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ba0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006baa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006bae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	1c9a      	adds	r2, r3, #2
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d179      	bne.n	8006cd6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c00:	643b      	str	r3, [r7, #64]	; 0x40
 8006c02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d12e      	bne.n	8006cba <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 0310 	bic.w	r3, r3, #16
 8006c76:	647b      	str	r3, [r7, #68]	; 0x44
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6979      	ldr	r1, [r7, #20]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e6      	bne.n	8006c62 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b10      	cmp	r3, #16
 8006ca0:	d103      	bne.n	8006caa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff f8d2 	bl	8005e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cb8:	e00d      	b.n	8006cd6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7f9 ff36 	bl	8000b2c <HAL_UART_RxCpltCallback>
}
 8006cc0:	e009      	b.n	8006cd6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	8b1b      	ldrh	r3, [r3, #24]
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0208 	orr.w	r2, r2, #8
 8006cd2:	b292      	uxth	r2, r2
 8006cd4:	831a      	strh	r2, [r3, #24]
}
 8006cd6:	bf00      	nop
 8006cd8:	3758      	adds	r7, #88	; 0x58
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <atoi>:
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f000 b8d5 	b.w	8006ea4 <strtol>
	...

08006cfc <__errno>:
 8006cfc:	4b01      	ldr	r3, [pc, #4]	; (8006d04 <__errno+0x8>)
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20000020 	.word	0x20000020

08006d08 <__libc_init_array>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4d0d      	ldr	r5, [pc, #52]	; (8006d40 <__libc_init_array+0x38>)
 8006d0c:	4c0d      	ldr	r4, [pc, #52]	; (8006d44 <__libc_init_array+0x3c>)
 8006d0e:	1b64      	subs	r4, r4, r5
 8006d10:	10a4      	asrs	r4, r4, #2
 8006d12:	2600      	movs	r6, #0
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d109      	bne.n	8006d2c <__libc_init_array+0x24>
 8006d18:	4d0b      	ldr	r5, [pc, #44]	; (8006d48 <__libc_init_array+0x40>)
 8006d1a:	4c0c      	ldr	r4, [pc, #48]	; (8006d4c <__libc_init_array+0x44>)
 8006d1c:	f000 fd1a 	bl	8007754 <_init>
 8006d20:	1b64      	subs	r4, r4, r5
 8006d22:	10a4      	asrs	r4, r4, #2
 8006d24:	2600      	movs	r6, #0
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	d105      	bne.n	8006d36 <__libc_init_array+0x2e>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d30:	4798      	blx	r3
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7ee      	b.n	8006d14 <__libc_init_array+0xc>
 8006d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3a:	4798      	blx	r3
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	e7f2      	b.n	8006d26 <__libc_init_array+0x1e>
 8006d40:	0800792c 	.word	0x0800792c
 8006d44:	0800792c 	.word	0x0800792c
 8006d48:	0800792c 	.word	0x0800792c
 8006d4c:	08007930 	.word	0x08007930

08006d50 <memset>:
 8006d50:	4402      	add	r2, r0
 8006d52:	4603      	mov	r3, r0
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d100      	bne.n	8006d5a <memset+0xa>
 8006d58:	4770      	bx	lr
 8006d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5e:	e7f9      	b.n	8006d54 <memset+0x4>

08006d60 <siprintf>:
 8006d60:	b40e      	push	{r1, r2, r3}
 8006d62:	b500      	push	{lr}
 8006d64:	b09c      	sub	sp, #112	; 0x70
 8006d66:	ab1d      	add	r3, sp, #116	; 0x74
 8006d68:	9002      	str	r0, [sp, #8]
 8006d6a:	9006      	str	r0, [sp, #24]
 8006d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d70:	4809      	ldr	r0, [pc, #36]	; (8006d98 <siprintf+0x38>)
 8006d72:	9107      	str	r1, [sp, #28]
 8006d74:	9104      	str	r1, [sp, #16]
 8006d76:	4909      	ldr	r1, [pc, #36]	; (8006d9c <siprintf+0x3c>)
 8006d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d7c:	9105      	str	r1, [sp, #20]
 8006d7e:	6800      	ldr	r0, [r0, #0]
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	a902      	add	r1, sp, #8
 8006d84:	f000 f8f4 	bl	8006f70 <_svfiprintf_r>
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	b01c      	add	sp, #112	; 0x70
 8006d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d94:	b003      	add	sp, #12
 8006d96:	4770      	bx	lr
 8006d98:	20000020 	.word	0x20000020
 8006d9c:	ffff0208 	.word	0xffff0208

08006da0 <_strtol_l.constprop.0>:
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da6:	d001      	beq.n	8006dac <_strtol_l.constprop.0+0xc>
 8006da8:	2b24      	cmp	r3, #36	; 0x24
 8006daa:	d906      	bls.n	8006dba <_strtol_l.constprop.0+0x1a>
 8006dac:	f7ff ffa6 	bl	8006cfc <__errno>
 8006db0:	2316      	movs	r3, #22
 8006db2:	6003      	str	r3, [r0, #0]
 8006db4:	2000      	movs	r0, #0
 8006db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006ea0 <_strtol_l.constprop.0+0x100>
 8006dbe:	460d      	mov	r5, r1
 8006dc0:	462e      	mov	r6, r5
 8006dc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006dc6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006dca:	f017 0708 	ands.w	r7, r7, #8
 8006dce:	d1f7      	bne.n	8006dc0 <_strtol_l.constprop.0+0x20>
 8006dd0:	2c2d      	cmp	r4, #45	; 0x2d
 8006dd2:	d132      	bne.n	8006e3a <_strtol_l.constprop.0+0x9a>
 8006dd4:	782c      	ldrb	r4, [r5, #0]
 8006dd6:	2701      	movs	r7, #1
 8006dd8:	1cb5      	adds	r5, r6, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d05b      	beq.n	8006e96 <_strtol_l.constprop.0+0xf6>
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	d109      	bne.n	8006df6 <_strtol_l.constprop.0+0x56>
 8006de2:	2c30      	cmp	r4, #48	; 0x30
 8006de4:	d107      	bne.n	8006df6 <_strtol_l.constprop.0+0x56>
 8006de6:	782c      	ldrb	r4, [r5, #0]
 8006de8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006dec:	2c58      	cmp	r4, #88	; 0x58
 8006dee:	d14d      	bne.n	8006e8c <_strtol_l.constprop.0+0xec>
 8006df0:	786c      	ldrb	r4, [r5, #1]
 8006df2:	2310      	movs	r3, #16
 8006df4:	3502      	adds	r5, #2
 8006df6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006dfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dfe:	f04f 0c00 	mov.w	ip, #0
 8006e02:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e06:	4666      	mov	r6, ip
 8006e08:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e10:	f1be 0f09 	cmp.w	lr, #9
 8006e14:	d816      	bhi.n	8006e44 <_strtol_l.constprop.0+0xa4>
 8006e16:	4674      	mov	r4, lr
 8006e18:	42a3      	cmp	r3, r4
 8006e1a:	dd24      	ble.n	8006e66 <_strtol_l.constprop.0+0xc6>
 8006e1c:	f1bc 0f00 	cmp.w	ip, #0
 8006e20:	db1e      	blt.n	8006e60 <_strtol_l.constprop.0+0xc0>
 8006e22:	45b1      	cmp	r9, r6
 8006e24:	d31c      	bcc.n	8006e60 <_strtol_l.constprop.0+0xc0>
 8006e26:	d101      	bne.n	8006e2c <_strtol_l.constprop.0+0x8c>
 8006e28:	45a2      	cmp	sl, r4
 8006e2a:	db19      	blt.n	8006e60 <_strtol_l.constprop.0+0xc0>
 8006e2c:	fb06 4603 	mla	r6, r6, r3, r4
 8006e30:	f04f 0c01 	mov.w	ip, #1
 8006e34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e38:	e7e8      	b.n	8006e0c <_strtol_l.constprop.0+0x6c>
 8006e3a:	2c2b      	cmp	r4, #43	; 0x2b
 8006e3c:	bf04      	itt	eq
 8006e3e:	782c      	ldrbeq	r4, [r5, #0]
 8006e40:	1cb5      	addeq	r5, r6, #2
 8006e42:	e7ca      	b.n	8006dda <_strtol_l.constprop.0+0x3a>
 8006e44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006e48:	f1be 0f19 	cmp.w	lr, #25
 8006e4c:	d801      	bhi.n	8006e52 <_strtol_l.constprop.0+0xb2>
 8006e4e:	3c37      	subs	r4, #55	; 0x37
 8006e50:	e7e2      	b.n	8006e18 <_strtol_l.constprop.0+0x78>
 8006e52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006e56:	f1be 0f19 	cmp.w	lr, #25
 8006e5a:	d804      	bhi.n	8006e66 <_strtol_l.constprop.0+0xc6>
 8006e5c:	3c57      	subs	r4, #87	; 0x57
 8006e5e:	e7db      	b.n	8006e18 <_strtol_l.constprop.0+0x78>
 8006e60:	f04f 3cff 	mov.w	ip, #4294967295
 8006e64:	e7e6      	b.n	8006e34 <_strtol_l.constprop.0+0x94>
 8006e66:	f1bc 0f00 	cmp.w	ip, #0
 8006e6a:	da05      	bge.n	8006e78 <_strtol_l.constprop.0+0xd8>
 8006e6c:	2322      	movs	r3, #34	; 0x22
 8006e6e:	6003      	str	r3, [r0, #0]
 8006e70:	4646      	mov	r6, r8
 8006e72:	b942      	cbnz	r2, 8006e86 <_strtol_l.constprop.0+0xe6>
 8006e74:	4630      	mov	r0, r6
 8006e76:	e79e      	b.n	8006db6 <_strtol_l.constprop.0+0x16>
 8006e78:	b107      	cbz	r7, 8006e7c <_strtol_l.constprop.0+0xdc>
 8006e7a:	4276      	negs	r6, r6
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	d0f9      	beq.n	8006e74 <_strtol_l.constprop.0+0xd4>
 8006e80:	f1bc 0f00 	cmp.w	ip, #0
 8006e84:	d000      	beq.n	8006e88 <_strtol_l.constprop.0+0xe8>
 8006e86:	1e69      	subs	r1, r5, #1
 8006e88:	6011      	str	r1, [r2, #0]
 8006e8a:	e7f3      	b.n	8006e74 <_strtol_l.constprop.0+0xd4>
 8006e8c:	2430      	movs	r4, #48	; 0x30
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1b1      	bne.n	8006df6 <_strtol_l.constprop.0+0x56>
 8006e92:	2308      	movs	r3, #8
 8006e94:	e7af      	b.n	8006df6 <_strtol_l.constprop.0+0x56>
 8006e96:	2c30      	cmp	r4, #48	; 0x30
 8006e98:	d0a5      	beq.n	8006de6 <_strtol_l.constprop.0+0x46>
 8006e9a:	230a      	movs	r3, #10
 8006e9c:	e7ab      	b.n	8006df6 <_strtol_l.constprop.0+0x56>
 8006e9e:	bf00      	nop
 8006ea0:	080077f1 	.word	0x080077f1

08006ea4 <strtol>:
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	460a      	mov	r2, r1
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	4802      	ldr	r0, [pc, #8]	; (8006eb4 <strtol+0x10>)
 8006eac:	6800      	ldr	r0, [r0, #0]
 8006eae:	f7ff bf77 	b.w	8006da0 <_strtol_l.constprop.0>
 8006eb2:	bf00      	nop
 8006eb4:	20000020 	.word	0x20000020

08006eb8 <__ssputs_r>:
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	688e      	ldr	r6, [r1, #8]
 8006ebe:	429e      	cmp	r6, r3
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	4690      	mov	r8, r2
 8006ec6:	461f      	mov	r7, r3
 8006ec8:	d838      	bhi.n	8006f3c <__ssputs_r+0x84>
 8006eca:	898a      	ldrh	r2, [r1, #12]
 8006ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ed0:	d032      	beq.n	8006f38 <__ssputs_r+0x80>
 8006ed2:	6825      	ldr	r5, [r4, #0]
 8006ed4:	6909      	ldr	r1, [r1, #16]
 8006ed6:	eba5 0901 	sub.w	r9, r5, r1
 8006eda:	6965      	ldr	r5, [r4, #20]
 8006edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	444b      	add	r3, r9
 8006ee8:	106d      	asrs	r5, r5, #1
 8006eea:	429d      	cmp	r5, r3
 8006eec:	bf38      	it	cc
 8006eee:	461d      	movcc	r5, r3
 8006ef0:	0553      	lsls	r3, r2, #21
 8006ef2:	d531      	bpl.n	8006f58 <__ssputs_r+0xa0>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f000 fb63 	bl	80075c0 <_malloc_r>
 8006efa:	4606      	mov	r6, r0
 8006efc:	b950      	cbnz	r0, 8006f14 <__ssputs_r+0x5c>
 8006efe:	230c      	movs	r3, #12
 8006f00:	f8ca 3000 	str.w	r3, [sl]
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	6921      	ldr	r1, [r4, #16]
 8006f16:	464a      	mov	r2, r9
 8006f18:	f000 fabe 	bl	8007498 <memcpy>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	6126      	str	r6, [r4, #16]
 8006f2a:	6165      	str	r5, [r4, #20]
 8006f2c:	444e      	add	r6, r9
 8006f2e:	eba5 0509 	sub.w	r5, r5, r9
 8006f32:	6026      	str	r6, [r4, #0]
 8006f34:	60a5      	str	r5, [r4, #8]
 8006f36:	463e      	mov	r6, r7
 8006f38:	42be      	cmp	r6, r7
 8006f3a:	d900      	bls.n	8006f3e <__ssputs_r+0x86>
 8006f3c:	463e      	mov	r6, r7
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	4632      	mov	r2, r6
 8006f42:	4641      	mov	r1, r8
 8006f44:	f000 fab6 	bl	80074b4 <memmove>
 8006f48:	68a3      	ldr	r3, [r4, #8]
 8006f4a:	1b9b      	subs	r3, r3, r6
 8006f4c:	60a3      	str	r3, [r4, #8]
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	4433      	add	r3, r6
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	2000      	movs	r0, #0
 8006f56:	e7db      	b.n	8006f10 <__ssputs_r+0x58>
 8006f58:	462a      	mov	r2, r5
 8006f5a:	f000 fba5 	bl	80076a8 <_realloc_r>
 8006f5e:	4606      	mov	r6, r0
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d1e1      	bne.n	8006f28 <__ssputs_r+0x70>
 8006f64:	6921      	ldr	r1, [r4, #16]
 8006f66:	4650      	mov	r0, sl
 8006f68:	f000 fabe 	bl	80074e8 <_free_r>
 8006f6c:	e7c7      	b.n	8006efe <__ssputs_r+0x46>
	...

08006f70 <_svfiprintf_r>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	4698      	mov	r8, r3
 8006f76:	898b      	ldrh	r3, [r1, #12]
 8006f78:	061b      	lsls	r3, r3, #24
 8006f7a:	b09d      	sub	sp, #116	; 0x74
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	4614      	mov	r4, r2
 8006f82:	d50e      	bpl.n	8006fa2 <_svfiprintf_r+0x32>
 8006f84:	690b      	ldr	r3, [r1, #16]
 8006f86:	b963      	cbnz	r3, 8006fa2 <_svfiprintf_r+0x32>
 8006f88:	2140      	movs	r1, #64	; 0x40
 8006f8a:	f000 fb19 	bl	80075c0 <_malloc_r>
 8006f8e:	6028      	str	r0, [r5, #0]
 8006f90:	6128      	str	r0, [r5, #16]
 8006f92:	b920      	cbnz	r0, 8006f9e <_svfiprintf_r+0x2e>
 8006f94:	230c      	movs	r3, #12
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	e0d1      	b.n	8007142 <_svfiprintf_r+0x1d2>
 8006f9e:	2340      	movs	r3, #64	; 0x40
 8006fa0:	616b      	str	r3, [r5, #20]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa6:	2320      	movs	r3, #32
 8006fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb0:	2330      	movs	r3, #48	; 0x30
 8006fb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800715c <_svfiprintf_r+0x1ec>
 8006fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fba:	f04f 0901 	mov.w	r9, #1
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	469a      	mov	sl, r3
 8006fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc6:	b10a      	cbz	r2, 8006fcc <_svfiprintf_r+0x5c>
 8006fc8:	2a25      	cmp	r2, #37	; 0x25
 8006fca:	d1f9      	bne.n	8006fc0 <_svfiprintf_r+0x50>
 8006fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8006fd0:	d00b      	beq.n	8006fea <_svfiprintf_r+0x7a>
 8006fd2:	465b      	mov	r3, fp
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff ff6d 	bl	8006eb8 <__ssputs_r>
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f000 80aa 	beq.w	8007138 <_svfiprintf_r+0x1c8>
 8006fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fe6:	445a      	add	r2, fp
 8006fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8006fea:	f89a 3000 	ldrb.w	r3, [sl]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 80a2 	beq.w	8007138 <_svfiprintf_r+0x1c8>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ffe:	f10a 0a01 	add.w	sl, sl, #1
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	9307      	str	r3, [sp, #28]
 8007006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800700a:	931a      	str	r3, [sp, #104]	; 0x68
 800700c:	4654      	mov	r4, sl
 800700e:	2205      	movs	r2, #5
 8007010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007014:	4851      	ldr	r0, [pc, #324]	; (800715c <_svfiprintf_r+0x1ec>)
 8007016:	f7f9 f8f3 	bl	8000200 <memchr>
 800701a:	9a04      	ldr	r2, [sp, #16]
 800701c:	b9d8      	cbnz	r0, 8007056 <_svfiprintf_r+0xe6>
 800701e:	06d0      	lsls	r0, r2, #27
 8007020:	bf44      	itt	mi
 8007022:	2320      	movmi	r3, #32
 8007024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007028:	0711      	lsls	r1, r2, #28
 800702a:	bf44      	itt	mi
 800702c:	232b      	movmi	r3, #43	; 0x2b
 800702e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007032:	f89a 3000 	ldrb.w	r3, [sl]
 8007036:	2b2a      	cmp	r3, #42	; 0x2a
 8007038:	d015      	beq.n	8007066 <_svfiprintf_r+0xf6>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	4654      	mov	r4, sl
 800703e:	2000      	movs	r0, #0
 8007040:	f04f 0c0a 	mov.w	ip, #10
 8007044:	4621      	mov	r1, r4
 8007046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800704a:	3b30      	subs	r3, #48	; 0x30
 800704c:	2b09      	cmp	r3, #9
 800704e:	d94e      	bls.n	80070ee <_svfiprintf_r+0x17e>
 8007050:	b1b0      	cbz	r0, 8007080 <_svfiprintf_r+0x110>
 8007052:	9207      	str	r2, [sp, #28]
 8007054:	e014      	b.n	8007080 <_svfiprintf_r+0x110>
 8007056:	eba0 0308 	sub.w	r3, r0, r8
 800705a:	fa09 f303 	lsl.w	r3, r9, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	46a2      	mov	sl, r4
 8007064:	e7d2      	b.n	800700c <_svfiprintf_r+0x9c>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	1d19      	adds	r1, r3, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	9103      	str	r1, [sp, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfbb      	ittet	lt
 8007072:	425b      	neglt	r3, r3
 8007074:	f042 0202 	orrlt.w	r2, r2, #2
 8007078:	9307      	strge	r3, [sp, #28]
 800707a:	9307      	strlt	r3, [sp, #28]
 800707c:	bfb8      	it	lt
 800707e:	9204      	strlt	r2, [sp, #16]
 8007080:	7823      	ldrb	r3, [r4, #0]
 8007082:	2b2e      	cmp	r3, #46	; 0x2e
 8007084:	d10c      	bne.n	80070a0 <_svfiprintf_r+0x130>
 8007086:	7863      	ldrb	r3, [r4, #1]
 8007088:	2b2a      	cmp	r3, #42	; 0x2a
 800708a:	d135      	bne.n	80070f8 <_svfiprintf_r+0x188>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	1d1a      	adds	r2, r3, #4
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	9203      	str	r2, [sp, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	bfb8      	it	lt
 8007098:	f04f 33ff 	movlt.w	r3, #4294967295
 800709c:	3402      	adds	r4, #2
 800709e:	9305      	str	r3, [sp, #20]
 80070a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800716c <_svfiprintf_r+0x1fc>
 80070a4:	7821      	ldrb	r1, [r4, #0]
 80070a6:	2203      	movs	r2, #3
 80070a8:	4650      	mov	r0, sl
 80070aa:	f7f9 f8a9 	bl	8000200 <memchr>
 80070ae:	b140      	cbz	r0, 80070c2 <_svfiprintf_r+0x152>
 80070b0:	2340      	movs	r3, #64	; 0x40
 80070b2:	eba0 000a 	sub.w	r0, r0, sl
 80070b6:	fa03 f000 	lsl.w	r0, r3, r0
 80070ba:	9b04      	ldr	r3, [sp, #16]
 80070bc:	4303      	orrs	r3, r0
 80070be:	3401      	adds	r4, #1
 80070c0:	9304      	str	r3, [sp, #16]
 80070c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c6:	4826      	ldr	r0, [pc, #152]	; (8007160 <_svfiprintf_r+0x1f0>)
 80070c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070cc:	2206      	movs	r2, #6
 80070ce:	f7f9 f897 	bl	8000200 <memchr>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d038      	beq.n	8007148 <_svfiprintf_r+0x1d8>
 80070d6:	4b23      	ldr	r3, [pc, #140]	; (8007164 <_svfiprintf_r+0x1f4>)
 80070d8:	bb1b      	cbnz	r3, 8007122 <_svfiprintf_r+0x1b2>
 80070da:	9b03      	ldr	r3, [sp, #12]
 80070dc:	3307      	adds	r3, #7
 80070de:	f023 0307 	bic.w	r3, r3, #7
 80070e2:	3308      	adds	r3, #8
 80070e4:	9303      	str	r3, [sp, #12]
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	4433      	add	r3, r6
 80070ea:	9309      	str	r3, [sp, #36]	; 0x24
 80070ec:	e767      	b.n	8006fbe <_svfiprintf_r+0x4e>
 80070ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80070f2:	460c      	mov	r4, r1
 80070f4:	2001      	movs	r0, #1
 80070f6:	e7a5      	b.n	8007044 <_svfiprintf_r+0xd4>
 80070f8:	2300      	movs	r3, #0
 80070fa:	3401      	adds	r4, #1
 80070fc:	9305      	str	r3, [sp, #20]
 80070fe:	4619      	mov	r1, r3
 8007100:	f04f 0c0a 	mov.w	ip, #10
 8007104:	4620      	mov	r0, r4
 8007106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800710a:	3a30      	subs	r2, #48	; 0x30
 800710c:	2a09      	cmp	r2, #9
 800710e:	d903      	bls.n	8007118 <_svfiprintf_r+0x1a8>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0c5      	beq.n	80070a0 <_svfiprintf_r+0x130>
 8007114:	9105      	str	r1, [sp, #20]
 8007116:	e7c3      	b.n	80070a0 <_svfiprintf_r+0x130>
 8007118:	fb0c 2101 	mla	r1, ip, r1, r2
 800711c:	4604      	mov	r4, r0
 800711e:	2301      	movs	r3, #1
 8007120:	e7f0      	b.n	8007104 <_svfiprintf_r+0x194>
 8007122:	ab03      	add	r3, sp, #12
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	462a      	mov	r2, r5
 8007128:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <_svfiprintf_r+0x1f8>)
 800712a:	a904      	add	r1, sp, #16
 800712c:	4638      	mov	r0, r7
 800712e:	f3af 8000 	nop.w
 8007132:	1c42      	adds	r2, r0, #1
 8007134:	4606      	mov	r6, r0
 8007136:	d1d6      	bne.n	80070e6 <_svfiprintf_r+0x176>
 8007138:	89ab      	ldrh	r3, [r5, #12]
 800713a:	065b      	lsls	r3, r3, #25
 800713c:	f53f af2c 	bmi.w	8006f98 <_svfiprintf_r+0x28>
 8007140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007142:	b01d      	add	sp, #116	; 0x74
 8007144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007148:	ab03      	add	r3, sp, #12
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	462a      	mov	r2, r5
 800714e:	4b06      	ldr	r3, [pc, #24]	; (8007168 <_svfiprintf_r+0x1f8>)
 8007150:	a904      	add	r1, sp, #16
 8007152:	4638      	mov	r0, r7
 8007154:	f000 f87a 	bl	800724c <_printf_i>
 8007158:	e7eb      	b.n	8007132 <_svfiprintf_r+0x1c2>
 800715a:	bf00      	nop
 800715c:	080078f1 	.word	0x080078f1
 8007160:	080078fb 	.word	0x080078fb
 8007164:	00000000 	.word	0x00000000
 8007168:	08006eb9 	.word	0x08006eb9
 800716c:	080078f7 	.word	0x080078f7

08007170 <_printf_common>:
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	4616      	mov	r6, r2
 8007176:	4699      	mov	r9, r3
 8007178:	688a      	ldr	r2, [r1, #8]
 800717a:	690b      	ldr	r3, [r1, #16]
 800717c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007180:	4293      	cmp	r3, r2
 8007182:	bfb8      	it	lt
 8007184:	4613      	movlt	r3, r2
 8007186:	6033      	str	r3, [r6, #0]
 8007188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800718c:	4607      	mov	r7, r0
 800718e:	460c      	mov	r4, r1
 8007190:	b10a      	cbz	r2, 8007196 <_printf_common+0x26>
 8007192:	3301      	adds	r3, #1
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	0699      	lsls	r1, r3, #26
 800719a:	bf42      	ittt	mi
 800719c:	6833      	ldrmi	r3, [r6, #0]
 800719e:	3302      	addmi	r3, #2
 80071a0:	6033      	strmi	r3, [r6, #0]
 80071a2:	6825      	ldr	r5, [r4, #0]
 80071a4:	f015 0506 	ands.w	r5, r5, #6
 80071a8:	d106      	bne.n	80071b8 <_printf_common+0x48>
 80071aa:	f104 0a19 	add.w	sl, r4, #25
 80071ae:	68e3      	ldr	r3, [r4, #12]
 80071b0:	6832      	ldr	r2, [r6, #0]
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	42ab      	cmp	r3, r5
 80071b6:	dc26      	bgt.n	8007206 <_printf_common+0x96>
 80071b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071bc:	1e13      	subs	r3, r2, #0
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	bf18      	it	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	0692      	lsls	r2, r2, #26
 80071c6:	d42b      	bmi.n	8007220 <_printf_common+0xb0>
 80071c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071cc:	4649      	mov	r1, r9
 80071ce:	4638      	mov	r0, r7
 80071d0:	47c0      	blx	r8
 80071d2:	3001      	adds	r0, #1
 80071d4:	d01e      	beq.n	8007214 <_printf_common+0xa4>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	68e5      	ldr	r5, [r4, #12]
 80071da:	6832      	ldr	r2, [r6, #0]
 80071dc:	f003 0306 	and.w	r3, r3, #6
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	bf08      	it	eq
 80071e4:	1aad      	subeq	r5, r5, r2
 80071e6:	68a3      	ldr	r3, [r4, #8]
 80071e8:	6922      	ldr	r2, [r4, #16]
 80071ea:	bf0c      	ite	eq
 80071ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071f0:	2500      	movne	r5, #0
 80071f2:	4293      	cmp	r3, r2
 80071f4:	bfc4      	itt	gt
 80071f6:	1a9b      	subgt	r3, r3, r2
 80071f8:	18ed      	addgt	r5, r5, r3
 80071fa:	2600      	movs	r6, #0
 80071fc:	341a      	adds	r4, #26
 80071fe:	42b5      	cmp	r5, r6
 8007200:	d11a      	bne.n	8007238 <_printf_common+0xc8>
 8007202:	2000      	movs	r0, #0
 8007204:	e008      	b.n	8007218 <_printf_common+0xa8>
 8007206:	2301      	movs	r3, #1
 8007208:	4652      	mov	r2, sl
 800720a:	4649      	mov	r1, r9
 800720c:	4638      	mov	r0, r7
 800720e:	47c0      	blx	r8
 8007210:	3001      	adds	r0, #1
 8007212:	d103      	bne.n	800721c <_printf_common+0xac>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721c:	3501      	adds	r5, #1
 800721e:	e7c6      	b.n	80071ae <_printf_common+0x3e>
 8007220:	18e1      	adds	r1, r4, r3
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	2030      	movs	r0, #48	; 0x30
 8007226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800722a:	4422      	add	r2, r4
 800722c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007234:	3302      	adds	r3, #2
 8007236:	e7c7      	b.n	80071c8 <_printf_common+0x58>
 8007238:	2301      	movs	r3, #1
 800723a:	4622      	mov	r2, r4
 800723c:	4649      	mov	r1, r9
 800723e:	4638      	mov	r0, r7
 8007240:	47c0      	blx	r8
 8007242:	3001      	adds	r0, #1
 8007244:	d0e6      	beq.n	8007214 <_printf_common+0xa4>
 8007246:	3601      	adds	r6, #1
 8007248:	e7d9      	b.n	80071fe <_printf_common+0x8e>
	...

0800724c <_printf_i>:
 800724c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	7e0f      	ldrb	r7, [r1, #24]
 8007252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007254:	2f78      	cmp	r7, #120	; 0x78
 8007256:	4691      	mov	r9, r2
 8007258:	4680      	mov	r8, r0
 800725a:	460c      	mov	r4, r1
 800725c:	469a      	mov	sl, r3
 800725e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007262:	d807      	bhi.n	8007274 <_printf_i+0x28>
 8007264:	2f62      	cmp	r7, #98	; 0x62
 8007266:	d80a      	bhi.n	800727e <_printf_i+0x32>
 8007268:	2f00      	cmp	r7, #0
 800726a:	f000 80d8 	beq.w	800741e <_printf_i+0x1d2>
 800726e:	2f58      	cmp	r7, #88	; 0x58
 8007270:	f000 80a3 	beq.w	80073ba <_printf_i+0x16e>
 8007274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800727c:	e03a      	b.n	80072f4 <_printf_i+0xa8>
 800727e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007282:	2b15      	cmp	r3, #21
 8007284:	d8f6      	bhi.n	8007274 <_printf_i+0x28>
 8007286:	a101      	add	r1, pc, #4	; (adr r1, 800728c <_printf_i+0x40>)
 8007288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800728c:	080072e5 	.word	0x080072e5
 8007290:	080072f9 	.word	0x080072f9
 8007294:	08007275 	.word	0x08007275
 8007298:	08007275 	.word	0x08007275
 800729c:	08007275 	.word	0x08007275
 80072a0:	08007275 	.word	0x08007275
 80072a4:	080072f9 	.word	0x080072f9
 80072a8:	08007275 	.word	0x08007275
 80072ac:	08007275 	.word	0x08007275
 80072b0:	08007275 	.word	0x08007275
 80072b4:	08007275 	.word	0x08007275
 80072b8:	08007405 	.word	0x08007405
 80072bc:	08007329 	.word	0x08007329
 80072c0:	080073e7 	.word	0x080073e7
 80072c4:	08007275 	.word	0x08007275
 80072c8:	08007275 	.word	0x08007275
 80072cc:	08007427 	.word	0x08007427
 80072d0:	08007275 	.word	0x08007275
 80072d4:	08007329 	.word	0x08007329
 80072d8:	08007275 	.word	0x08007275
 80072dc:	08007275 	.word	0x08007275
 80072e0:	080073ef 	.word	0x080073ef
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	602a      	str	r2, [r5, #0]
 80072ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0a3      	b.n	8007440 <_printf_i+0x1f4>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	6829      	ldr	r1, [r5, #0]
 80072fc:	0606      	lsls	r6, r0, #24
 80072fe:	f101 0304 	add.w	r3, r1, #4
 8007302:	d50a      	bpl.n	800731a <_printf_i+0xce>
 8007304:	680e      	ldr	r6, [r1, #0]
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	2e00      	cmp	r6, #0
 800730a:	da03      	bge.n	8007314 <_printf_i+0xc8>
 800730c:	232d      	movs	r3, #45	; 0x2d
 800730e:	4276      	negs	r6, r6
 8007310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007314:	485e      	ldr	r0, [pc, #376]	; (8007490 <_printf_i+0x244>)
 8007316:	230a      	movs	r3, #10
 8007318:	e019      	b.n	800734e <_printf_i+0x102>
 800731a:	680e      	ldr	r6, [r1, #0]
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007322:	bf18      	it	ne
 8007324:	b236      	sxthne	r6, r6
 8007326:	e7ef      	b.n	8007308 <_printf_i+0xbc>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	1d19      	adds	r1, r3, #4
 800732e:	6029      	str	r1, [r5, #0]
 8007330:	0601      	lsls	r1, r0, #24
 8007332:	d501      	bpl.n	8007338 <_printf_i+0xec>
 8007334:	681e      	ldr	r6, [r3, #0]
 8007336:	e002      	b.n	800733e <_printf_i+0xf2>
 8007338:	0646      	lsls	r6, r0, #25
 800733a:	d5fb      	bpl.n	8007334 <_printf_i+0xe8>
 800733c:	881e      	ldrh	r6, [r3, #0]
 800733e:	4854      	ldr	r0, [pc, #336]	; (8007490 <_printf_i+0x244>)
 8007340:	2f6f      	cmp	r7, #111	; 0x6f
 8007342:	bf0c      	ite	eq
 8007344:	2308      	moveq	r3, #8
 8007346:	230a      	movne	r3, #10
 8007348:	2100      	movs	r1, #0
 800734a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800734e:	6865      	ldr	r5, [r4, #4]
 8007350:	60a5      	str	r5, [r4, #8]
 8007352:	2d00      	cmp	r5, #0
 8007354:	bfa2      	ittt	ge
 8007356:	6821      	ldrge	r1, [r4, #0]
 8007358:	f021 0104 	bicge.w	r1, r1, #4
 800735c:	6021      	strge	r1, [r4, #0]
 800735e:	b90e      	cbnz	r6, 8007364 <_printf_i+0x118>
 8007360:	2d00      	cmp	r5, #0
 8007362:	d04d      	beq.n	8007400 <_printf_i+0x1b4>
 8007364:	4615      	mov	r5, r2
 8007366:	fbb6 f1f3 	udiv	r1, r6, r3
 800736a:	fb03 6711 	mls	r7, r3, r1, r6
 800736e:	5dc7      	ldrb	r7, [r0, r7]
 8007370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007374:	4637      	mov	r7, r6
 8007376:	42bb      	cmp	r3, r7
 8007378:	460e      	mov	r6, r1
 800737a:	d9f4      	bls.n	8007366 <_printf_i+0x11a>
 800737c:	2b08      	cmp	r3, #8
 800737e:	d10b      	bne.n	8007398 <_printf_i+0x14c>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	07de      	lsls	r6, r3, #31
 8007384:	d508      	bpl.n	8007398 <_printf_i+0x14c>
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	6861      	ldr	r1, [r4, #4]
 800738a:	4299      	cmp	r1, r3
 800738c:	bfde      	ittt	le
 800738e:	2330      	movle	r3, #48	; 0x30
 8007390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007394:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007398:	1b52      	subs	r2, r2, r5
 800739a:	6122      	str	r2, [r4, #16]
 800739c:	f8cd a000 	str.w	sl, [sp]
 80073a0:	464b      	mov	r3, r9
 80073a2:	aa03      	add	r2, sp, #12
 80073a4:	4621      	mov	r1, r4
 80073a6:	4640      	mov	r0, r8
 80073a8:	f7ff fee2 	bl	8007170 <_printf_common>
 80073ac:	3001      	adds	r0, #1
 80073ae:	d14c      	bne.n	800744a <_printf_i+0x1fe>
 80073b0:	f04f 30ff 	mov.w	r0, #4294967295
 80073b4:	b004      	add	sp, #16
 80073b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ba:	4835      	ldr	r0, [pc, #212]	; (8007490 <_printf_i+0x244>)
 80073bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073c0:	6829      	ldr	r1, [r5, #0]
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80073c8:	6029      	str	r1, [r5, #0]
 80073ca:	061d      	lsls	r5, r3, #24
 80073cc:	d514      	bpl.n	80073f8 <_printf_i+0x1ac>
 80073ce:	07df      	lsls	r7, r3, #31
 80073d0:	bf44      	itt	mi
 80073d2:	f043 0320 	orrmi.w	r3, r3, #32
 80073d6:	6023      	strmi	r3, [r4, #0]
 80073d8:	b91e      	cbnz	r6, 80073e2 <_printf_i+0x196>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	f023 0320 	bic.w	r3, r3, #32
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	2310      	movs	r3, #16
 80073e4:	e7b0      	b.n	8007348 <_printf_i+0xfc>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f043 0320 	orr.w	r3, r3, #32
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	2378      	movs	r3, #120	; 0x78
 80073f0:	4828      	ldr	r0, [pc, #160]	; (8007494 <_printf_i+0x248>)
 80073f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073f6:	e7e3      	b.n	80073c0 <_printf_i+0x174>
 80073f8:	0659      	lsls	r1, r3, #25
 80073fa:	bf48      	it	mi
 80073fc:	b2b6      	uxthmi	r6, r6
 80073fe:	e7e6      	b.n	80073ce <_printf_i+0x182>
 8007400:	4615      	mov	r5, r2
 8007402:	e7bb      	b.n	800737c <_printf_i+0x130>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	6826      	ldr	r6, [r4, #0]
 8007408:	6961      	ldr	r1, [r4, #20]
 800740a:	1d18      	adds	r0, r3, #4
 800740c:	6028      	str	r0, [r5, #0]
 800740e:	0635      	lsls	r5, r6, #24
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	d501      	bpl.n	8007418 <_printf_i+0x1cc>
 8007414:	6019      	str	r1, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0x1d2>
 8007418:	0670      	lsls	r0, r6, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0x1c8>
 800741c:	8019      	strh	r1, [r3, #0]
 800741e:	2300      	movs	r3, #0
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	4615      	mov	r5, r2
 8007424:	e7ba      	b.n	800739c <_printf_i+0x150>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	1d1a      	adds	r2, r3, #4
 800742a:	602a      	str	r2, [r5, #0]
 800742c:	681d      	ldr	r5, [r3, #0]
 800742e:	6862      	ldr	r2, [r4, #4]
 8007430:	2100      	movs	r1, #0
 8007432:	4628      	mov	r0, r5
 8007434:	f7f8 fee4 	bl	8000200 <memchr>
 8007438:	b108      	cbz	r0, 800743e <_printf_i+0x1f2>
 800743a:	1b40      	subs	r0, r0, r5
 800743c:	6060      	str	r0, [r4, #4]
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	6123      	str	r3, [r4, #16]
 8007442:	2300      	movs	r3, #0
 8007444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007448:	e7a8      	b.n	800739c <_printf_i+0x150>
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	462a      	mov	r2, r5
 800744e:	4649      	mov	r1, r9
 8007450:	4640      	mov	r0, r8
 8007452:	47d0      	blx	sl
 8007454:	3001      	adds	r0, #1
 8007456:	d0ab      	beq.n	80073b0 <_printf_i+0x164>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	079b      	lsls	r3, r3, #30
 800745c:	d413      	bmi.n	8007486 <_printf_i+0x23a>
 800745e:	68e0      	ldr	r0, [r4, #12]
 8007460:	9b03      	ldr	r3, [sp, #12]
 8007462:	4298      	cmp	r0, r3
 8007464:	bfb8      	it	lt
 8007466:	4618      	movlt	r0, r3
 8007468:	e7a4      	b.n	80073b4 <_printf_i+0x168>
 800746a:	2301      	movs	r3, #1
 800746c:	4632      	mov	r2, r6
 800746e:	4649      	mov	r1, r9
 8007470:	4640      	mov	r0, r8
 8007472:	47d0      	blx	sl
 8007474:	3001      	adds	r0, #1
 8007476:	d09b      	beq.n	80073b0 <_printf_i+0x164>
 8007478:	3501      	adds	r5, #1
 800747a:	68e3      	ldr	r3, [r4, #12]
 800747c:	9903      	ldr	r1, [sp, #12]
 800747e:	1a5b      	subs	r3, r3, r1
 8007480:	42ab      	cmp	r3, r5
 8007482:	dcf2      	bgt.n	800746a <_printf_i+0x21e>
 8007484:	e7eb      	b.n	800745e <_printf_i+0x212>
 8007486:	2500      	movs	r5, #0
 8007488:	f104 0619 	add.w	r6, r4, #25
 800748c:	e7f5      	b.n	800747a <_printf_i+0x22e>
 800748e:	bf00      	nop
 8007490:	08007902 	.word	0x08007902
 8007494:	08007913 	.word	0x08007913

08007498 <memcpy>:
 8007498:	440a      	add	r2, r1
 800749a:	4291      	cmp	r1, r2
 800749c:	f100 33ff 	add.w	r3, r0, #4294967295
 80074a0:	d100      	bne.n	80074a4 <memcpy+0xc>
 80074a2:	4770      	bx	lr
 80074a4:	b510      	push	{r4, lr}
 80074a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ae:	4291      	cmp	r1, r2
 80074b0:	d1f9      	bne.n	80074a6 <memcpy+0xe>
 80074b2:	bd10      	pop	{r4, pc}

080074b4 <memmove>:
 80074b4:	4288      	cmp	r0, r1
 80074b6:	b510      	push	{r4, lr}
 80074b8:	eb01 0402 	add.w	r4, r1, r2
 80074bc:	d902      	bls.n	80074c4 <memmove+0x10>
 80074be:	4284      	cmp	r4, r0
 80074c0:	4623      	mov	r3, r4
 80074c2:	d807      	bhi.n	80074d4 <memmove+0x20>
 80074c4:	1e43      	subs	r3, r0, #1
 80074c6:	42a1      	cmp	r1, r4
 80074c8:	d008      	beq.n	80074dc <memmove+0x28>
 80074ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074d2:	e7f8      	b.n	80074c6 <memmove+0x12>
 80074d4:	4402      	add	r2, r0
 80074d6:	4601      	mov	r1, r0
 80074d8:	428a      	cmp	r2, r1
 80074da:	d100      	bne.n	80074de <memmove+0x2a>
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074e6:	e7f7      	b.n	80074d8 <memmove+0x24>

080074e8 <_free_r>:
 80074e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ea:	2900      	cmp	r1, #0
 80074ec:	d044      	beq.n	8007578 <_free_r+0x90>
 80074ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f2:	9001      	str	r0, [sp, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f1a1 0404 	sub.w	r4, r1, #4
 80074fa:	bfb8      	it	lt
 80074fc:	18e4      	addlt	r4, r4, r3
 80074fe:	f000 f913 	bl	8007728 <__malloc_lock>
 8007502:	4a1e      	ldr	r2, [pc, #120]	; (800757c <_free_r+0x94>)
 8007504:	9801      	ldr	r0, [sp, #4]
 8007506:	6813      	ldr	r3, [r2, #0]
 8007508:	b933      	cbnz	r3, 8007518 <_free_r+0x30>
 800750a:	6063      	str	r3, [r4, #4]
 800750c:	6014      	str	r4, [r2, #0]
 800750e:	b003      	add	sp, #12
 8007510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007514:	f000 b90e 	b.w	8007734 <__malloc_unlock>
 8007518:	42a3      	cmp	r3, r4
 800751a:	d908      	bls.n	800752e <_free_r+0x46>
 800751c:	6825      	ldr	r5, [r4, #0]
 800751e:	1961      	adds	r1, r4, r5
 8007520:	428b      	cmp	r3, r1
 8007522:	bf01      	itttt	eq
 8007524:	6819      	ldreq	r1, [r3, #0]
 8007526:	685b      	ldreq	r3, [r3, #4]
 8007528:	1949      	addeq	r1, r1, r5
 800752a:	6021      	streq	r1, [r4, #0]
 800752c:	e7ed      	b.n	800750a <_free_r+0x22>
 800752e:	461a      	mov	r2, r3
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	b10b      	cbz	r3, 8007538 <_free_r+0x50>
 8007534:	42a3      	cmp	r3, r4
 8007536:	d9fa      	bls.n	800752e <_free_r+0x46>
 8007538:	6811      	ldr	r1, [r2, #0]
 800753a:	1855      	adds	r5, r2, r1
 800753c:	42a5      	cmp	r5, r4
 800753e:	d10b      	bne.n	8007558 <_free_r+0x70>
 8007540:	6824      	ldr	r4, [r4, #0]
 8007542:	4421      	add	r1, r4
 8007544:	1854      	adds	r4, r2, r1
 8007546:	42a3      	cmp	r3, r4
 8007548:	6011      	str	r1, [r2, #0]
 800754a:	d1e0      	bne.n	800750e <_free_r+0x26>
 800754c:	681c      	ldr	r4, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	6053      	str	r3, [r2, #4]
 8007552:	4421      	add	r1, r4
 8007554:	6011      	str	r1, [r2, #0]
 8007556:	e7da      	b.n	800750e <_free_r+0x26>
 8007558:	d902      	bls.n	8007560 <_free_r+0x78>
 800755a:	230c      	movs	r3, #12
 800755c:	6003      	str	r3, [r0, #0]
 800755e:	e7d6      	b.n	800750e <_free_r+0x26>
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	1961      	adds	r1, r4, r5
 8007564:	428b      	cmp	r3, r1
 8007566:	bf04      	itt	eq
 8007568:	6819      	ldreq	r1, [r3, #0]
 800756a:	685b      	ldreq	r3, [r3, #4]
 800756c:	6063      	str	r3, [r4, #4]
 800756e:	bf04      	itt	eq
 8007570:	1949      	addeq	r1, r1, r5
 8007572:	6021      	streq	r1, [r4, #0]
 8007574:	6054      	str	r4, [r2, #4]
 8007576:	e7ca      	b.n	800750e <_free_r+0x26>
 8007578:	b003      	add	sp, #12
 800757a:	bd30      	pop	{r4, r5, pc}
 800757c:	20000210 	.word	0x20000210

08007580 <sbrk_aligned>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	4e0e      	ldr	r6, [pc, #56]	; (80075bc <sbrk_aligned+0x3c>)
 8007584:	460c      	mov	r4, r1
 8007586:	6831      	ldr	r1, [r6, #0]
 8007588:	4605      	mov	r5, r0
 800758a:	b911      	cbnz	r1, 8007592 <sbrk_aligned+0x12>
 800758c:	f000 f8bc 	bl	8007708 <_sbrk_r>
 8007590:	6030      	str	r0, [r6, #0]
 8007592:	4621      	mov	r1, r4
 8007594:	4628      	mov	r0, r5
 8007596:	f000 f8b7 	bl	8007708 <_sbrk_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	d00a      	beq.n	80075b4 <sbrk_aligned+0x34>
 800759e:	1cc4      	adds	r4, r0, #3
 80075a0:	f024 0403 	bic.w	r4, r4, #3
 80075a4:	42a0      	cmp	r0, r4
 80075a6:	d007      	beq.n	80075b8 <sbrk_aligned+0x38>
 80075a8:	1a21      	subs	r1, r4, r0
 80075aa:	4628      	mov	r0, r5
 80075ac:	f000 f8ac 	bl	8007708 <_sbrk_r>
 80075b0:	3001      	adds	r0, #1
 80075b2:	d101      	bne.n	80075b8 <sbrk_aligned+0x38>
 80075b4:	f04f 34ff 	mov.w	r4, #4294967295
 80075b8:	4620      	mov	r0, r4
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	20000214 	.word	0x20000214

080075c0 <_malloc_r>:
 80075c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c4:	1ccd      	adds	r5, r1, #3
 80075c6:	f025 0503 	bic.w	r5, r5, #3
 80075ca:	3508      	adds	r5, #8
 80075cc:	2d0c      	cmp	r5, #12
 80075ce:	bf38      	it	cc
 80075d0:	250c      	movcc	r5, #12
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	4607      	mov	r7, r0
 80075d6:	db01      	blt.n	80075dc <_malloc_r+0x1c>
 80075d8:	42a9      	cmp	r1, r5
 80075da:	d905      	bls.n	80075e8 <_malloc_r+0x28>
 80075dc:	230c      	movs	r3, #12
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	2600      	movs	r6, #0
 80075e2:	4630      	mov	r0, r6
 80075e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e8:	4e2e      	ldr	r6, [pc, #184]	; (80076a4 <_malloc_r+0xe4>)
 80075ea:	f000 f89d 	bl	8007728 <__malloc_lock>
 80075ee:	6833      	ldr	r3, [r6, #0]
 80075f0:	461c      	mov	r4, r3
 80075f2:	bb34      	cbnz	r4, 8007642 <_malloc_r+0x82>
 80075f4:	4629      	mov	r1, r5
 80075f6:	4638      	mov	r0, r7
 80075f8:	f7ff ffc2 	bl	8007580 <sbrk_aligned>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	4604      	mov	r4, r0
 8007600:	d14d      	bne.n	800769e <_malloc_r+0xde>
 8007602:	6834      	ldr	r4, [r6, #0]
 8007604:	4626      	mov	r6, r4
 8007606:	2e00      	cmp	r6, #0
 8007608:	d140      	bne.n	800768c <_malloc_r+0xcc>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	4631      	mov	r1, r6
 800760e:	4638      	mov	r0, r7
 8007610:	eb04 0803 	add.w	r8, r4, r3
 8007614:	f000 f878 	bl	8007708 <_sbrk_r>
 8007618:	4580      	cmp	r8, r0
 800761a:	d13a      	bne.n	8007692 <_malloc_r+0xd2>
 800761c:	6821      	ldr	r1, [r4, #0]
 800761e:	3503      	adds	r5, #3
 8007620:	1a6d      	subs	r5, r5, r1
 8007622:	f025 0503 	bic.w	r5, r5, #3
 8007626:	3508      	adds	r5, #8
 8007628:	2d0c      	cmp	r5, #12
 800762a:	bf38      	it	cc
 800762c:	250c      	movcc	r5, #12
 800762e:	4629      	mov	r1, r5
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff ffa5 	bl	8007580 <sbrk_aligned>
 8007636:	3001      	adds	r0, #1
 8007638:	d02b      	beq.n	8007692 <_malloc_r+0xd2>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	442b      	add	r3, r5
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	e00e      	b.n	8007660 <_malloc_r+0xa0>
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	1b52      	subs	r2, r2, r5
 8007646:	d41e      	bmi.n	8007686 <_malloc_r+0xc6>
 8007648:	2a0b      	cmp	r2, #11
 800764a:	d916      	bls.n	800767a <_malloc_r+0xba>
 800764c:	1961      	adds	r1, r4, r5
 800764e:	42a3      	cmp	r3, r4
 8007650:	6025      	str	r5, [r4, #0]
 8007652:	bf18      	it	ne
 8007654:	6059      	strne	r1, [r3, #4]
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	bf08      	it	eq
 800765a:	6031      	streq	r1, [r6, #0]
 800765c:	5162      	str	r2, [r4, r5]
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	4638      	mov	r0, r7
 8007662:	f104 060b 	add.w	r6, r4, #11
 8007666:	f000 f865 	bl	8007734 <__malloc_unlock>
 800766a:	f026 0607 	bic.w	r6, r6, #7
 800766e:	1d23      	adds	r3, r4, #4
 8007670:	1af2      	subs	r2, r6, r3
 8007672:	d0b6      	beq.n	80075e2 <_malloc_r+0x22>
 8007674:	1b9b      	subs	r3, r3, r6
 8007676:	50a3      	str	r3, [r4, r2]
 8007678:	e7b3      	b.n	80075e2 <_malloc_r+0x22>
 800767a:	6862      	ldr	r2, [r4, #4]
 800767c:	42a3      	cmp	r3, r4
 800767e:	bf0c      	ite	eq
 8007680:	6032      	streq	r2, [r6, #0]
 8007682:	605a      	strne	r2, [r3, #4]
 8007684:	e7ec      	b.n	8007660 <_malloc_r+0xa0>
 8007686:	4623      	mov	r3, r4
 8007688:	6864      	ldr	r4, [r4, #4]
 800768a:	e7b2      	b.n	80075f2 <_malloc_r+0x32>
 800768c:	4634      	mov	r4, r6
 800768e:	6876      	ldr	r6, [r6, #4]
 8007690:	e7b9      	b.n	8007606 <_malloc_r+0x46>
 8007692:	230c      	movs	r3, #12
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	4638      	mov	r0, r7
 8007698:	f000 f84c 	bl	8007734 <__malloc_unlock>
 800769c:	e7a1      	b.n	80075e2 <_malloc_r+0x22>
 800769e:	6025      	str	r5, [r4, #0]
 80076a0:	e7de      	b.n	8007660 <_malloc_r+0xa0>
 80076a2:	bf00      	nop
 80076a4:	20000210 	.word	0x20000210

080076a8 <_realloc_r>:
 80076a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ac:	4680      	mov	r8, r0
 80076ae:	4614      	mov	r4, r2
 80076b0:	460e      	mov	r6, r1
 80076b2:	b921      	cbnz	r1, 80076be <_realloc_r+0x16>
 80076b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b8:	4611      	mov	r1, r2
 80076ba:	f7ff bf81 	b.w	80075c0 <_malloc_r>
 80076be:	b92a      	cbnz	r2, 80076cc <_realloc_r+0x24>
 80076c0:	f7ff ff12 	bl	80074e8 <_free_r>
 80076c4:	4625      	mov	r5, r4
 80076c6:	4628      	mov	r0, r5
 80076c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076cc:	f000 f838 	bl	8007740 <_malloc_usable_size_r>
 80076d0:	4284      	cmp	r4, r0
 80076d2:	4607      	mov	r7, r0
 80076d4:	d802      	bhi.n	80076dc <_realloc_r+0x34>
 80076d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076da:	d812      	bhi.n	8007702 <_realloc_r+0x5a>
 80076dc:	4621      	mov	r1, r4
 80076de:	4640      	mov	r0, r8
 80076e0:	f7ff ff6e 	bl	80075c0 <_malloc_r>
 80076e4:	4605      	mov	r5, r0
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d0ed      	beq.n	80076c6 <_realloc_r+0x1e>
 80076ea:	42bc      	cmp	r4, r7
 80076ec:	4622      	mov	r2, r4
 80076ee:	4631      	mov	r1, r6
 80076f0:	bf28      	it	cs
 80076f2:	463a      	movcs	r2, r7
 80076f4:	f7ff fed0 	bl	8007498 <memcpy>
 80076f8:	4631      	mov	r1, r6
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7ff fef4 	bl	80074e8 <_free_r>
 8007700:	e7e1      	b.n	80076c6 <_realloc_r+0x1e>
 8007702:	4635      	mov	r5, r6
 8007704:	e7df      	b.n	80076c6 <_realloc_r+0x1e>
	...

08007708 <_sbrk_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d06      	ldr	r5, [pc, #24]	; (8007724 <_sbrk_r+0x1c>)
 800770c:	2300      	movs	r3, #0
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	f7f9 fe68 	bl	80013e8 <_sbrk>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_sbrk_r+0x1a>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_sbrk_r+0x1a>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20000218 	.word	0x20000218

08007728 <__malloc_lock>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__malloc_lock+0x8>)
 800772a:	f000 b811 	b.w	8007750 <__retarget_lock_acquire_recursive>
 800772e:	bf00      	nop
 8007730:	2000021c 	.word	0x2000021c

08007734 <__malloc_unlock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_unlock+0x8>)
 8007736:	f000 b80c 	b.w	8007752 <__retarget_lock_release_recursive>
 800773a:	bf00      	nop
 800773c:	2000021c 	.word	0x2000021c

08007740 <_malloc_usable_size_r>:
 8007740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007744:	1f18      	subs	r0, r3, #4
 8007746:	2b00      	cmp	r3, #0
 8007748:	bfbc      	itt	lt
 800774a:	580b      	ldrlt	r3, [r1, r0]
 800774c:	18c0      	addlt	r0, r0, r3
 800774e:	4770      	bx	lr

08007750 <__retarget_lock_acquire_recursive>:
 8007750:	4770      	bx	lr

08007752 <__retarget_lock_release_recursive>:
 8007752:	4770      	bx	lr

08007754 <_init>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr

08007760 <_fini>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr
