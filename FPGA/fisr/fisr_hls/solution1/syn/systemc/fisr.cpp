// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fisr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fisr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fisr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<21> fisr::ap_ST_fsm_state1 = "1";
const sc_lv<21> fisr::ap_ST_fsm_state2 = "10";
const sc_lv<21> fisr::ap_ST_fsm_state3 = "100";
const sc_lv<21> fisr::ap_ST_fsm_state4 = "1000";
const sc_lv<21> fisr::ap_ST_fsm_state5 = "10000";
const sc_lv<21> fisr::ap_ST_fsm_state6 = "100000";
const sc_lv<21> fisr::ap_ST_fsm_state7 = "1000000";
const sc_lv<21> fisr::ap_ST_fsm_state8 = "10000000";
const sc_lv<21> fisr::ap_ST_fsm_state9 = "100000000";
const sc_lv<21> fisr::ap_ST_fsm_state10 = "1000000000";
const sc_lv<21> fisr::ap_ST_fsm_state11 = "10000000000";
const sc_lv<21> fisr::ap_ST_fsm_state12 = "100000000000";
const sc_lv<21> fisr::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<21> fisr::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<32> fisr::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fisr::ap_const_lv32_3 = "11";
const sc_lv<32> fisr::ap_const_lv32_7 = "111";
const sc_lv<32> fisr::ap_const_lv32_B = "1011";
const sc_lv<32> fisr::ap_const_lv32_4 = "100";
const sc_lv<32> fisr::ap_const_lv32_10 = "10000";
const sc_lv<32> fisr::ap_const_lv32_14 = "10100";
const sc_lv<32> fisr::ap_const_lv32_3FC00000 = "111111110000000000000000000000";
const sc_lv<32> fisr::ap_const_lv32_C = "1100";
const sc_lv<32> fisr::ap_const_lv32_3F000000 = "111111000000000000000000000000";
const sc_lv<32> fisr::ap_const_lv32_8 = "1000";
const sc_lv<32> fisr::ap_const_lv32_11 = "10001";
const sc_lv<32> fisr::ap_const_lv32_1 = "1";
const sc_lv<32> fisr::ap_const_lv32_1F = "11111";
const sc_lv<32> fisr::ap_const_lv32_5F3759DF = "1011111001101110101100111011111";
const bool fisr::ap_const_boolean_1 = true;

fisr::fisr(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fisr_fsub_32ns_32bkb_U1 = new fisr_fsub_32ns_32bkb<1,5,32,32,32>("fisr_fsub_32ns_32bkb_U1");
    fisr_fsub_32ns_32bkb_U1->clk(ap_clk);
    fisr_fsub_32ns_32bkb_U1->reset(ap_rst);
    fisr_fsub_32ns_32bkb_U1->din0(ap_var_for_const0);
    fisr_fsub_32ns_32bkb_U1->din1(reg_51);
    fisr_fsub_32ns_32bkb_U1->ce(ap_var_for_const1);
    fisr_fsub_32ns_32bkb_U1->dout(grp_fu_39_p2);
    fisr_fmul_32ns_32cud_U2 = new fisr_fmul_32ns_32cud<1,4,32,32,32>("fisr_fmul_32ns_32cud_U2");
    fisr_fmul_32ns_32cud_U2->clk(ap_clk);
    fisr_fmul_32ns_32cud_U2->reset(ap_rst);
    fisr_fmul_32ns_32cud_U2->din0(grp_fu_44_p0);
    fisr_fmul_32ns_32cud_U2->din1(grp_fu_44_p1);
    fisr_fmul_32ns_32cud_U2->ce(ap_var_for_const1);
    fisr_fmul_32ns_32cud_U2->dout(grp_fu_44_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_bitcast_ln13_fu_80_p1);
    sensitive << ( i_fu_74_p2 );

    SC_METHOD(thread_grp_fu_44_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x );
    sensitive << ( reg_51 );
    sensitive << ( bitcast_ln13_reg_91 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_grp_fu_44_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bitcast_ln13_fu_80_p1 );
    sensitive << ( bitcast_ln13_reg_91 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_2_reg_97 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_i_1_fu_57_p1);
    sensitive << ( x );

    SC_METHOD(thread_i_fu_74_p2);
    sensitive << ( sext_ln11_fu_70_p1 );

    SC_METHOD(thread_sext_ln11_fu_70_p1);
    sensitive << ( trunc_ln_fu_60_p4 );

    SC_METHOD(thread_trunc_ln_fu_60_p4);
    sensitive << ( i_1_fu_57_p1 );

    SC_METHOD(thread_y);
    sensitive << ( grp_fu_44_p2 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fisr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, y_ap_vld, "(port)y_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_44_p2, "grp_fu_44_p2");
    sc_trace(mVcdFile, reg_51, "reg_51");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, bitcast_ln13_fu_80_p1, "bitcast_ln13_fu_80_p1");
    sc_trace(mVcdFile, bitcast_ln13_reg_91, "bitcast_ln13_reg_91");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_39_p2, "grp_fu_39_p2");
    sc_trace(mVcdFile, tmp_2_reg_97, "tmp_2_reg_97");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_fu_44_p0, "grp_fu_44_p0");
    sc_trace(mVcdFile, grp_fu_44_p1, "grp_fu_44_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, i_1_fu_57_p1, "i_1_fu_57_p1");
    sc_trace(mVcdFile, trunc_ln_fu_60_p4, "trunc_ln_fu_60_p4");
    sc_trace(mVcdFile, sext_ln11_fu_70_p1, "sext_ln11_fu_70_p1");
    sc_trace(mVcdFile, i_fu_74_p2, "i_fu_74_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fisr.hdltvin.dat");
    mHdltvoutHandle.open("fisr.hdltvout.dat");
}

fisr::~fisr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fisr_fsub_32ns_32bkb_U1;
    delete fisr_fmul_32ns_32cud_U2;
}

void fisr::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_1;
}

void fisr::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_3FC00000;
}

void fisr::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        bitcast_ln13_reg_91 = bitcast_ln13_fu_80_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        reg_51 = grp_fu_44_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        tmp_2_reg_97 = grp_fu_39_p2.read();
    }
}

void fisr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fisr::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void fisr::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void fisr::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void fisr::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fisr::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void fisr::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fisr::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fisr::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fisr::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fisr::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fisr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fisr::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fisr::thread_bitcast_ln13_fu_80_p1() {
    bitcast_ln13_fu_80_p1 = i_fu_74_p2.read();
}

void fisr::thread_grp_fu_44_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_44_p0 = bitcast_ln13_reg_91.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        grp_fu_44_p0 = reg_51.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_44_p0 = x.read();
    } else {
        grp_fu_44_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fisr::thread_grp_fu_44_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        grp_fu_44_p1 = tmp_2_reg_97.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_44_p1 = bitcast_ln13_reg_91.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        grp_fu_44_p1 = bitcast_ln13_fu_80_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_44_p1 = ap_const_lv32_3F000000;
    } else {
        grp_fu_44_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void fisr::thread_i_1_fu_57_p1() {
    i_1_fu_57_p1 = x.read();
}

void fisr::thread_i_fu_74_p2() {
    i_fu_74_p2 = (!ap_const_lv32_5F3759DF.is_01() || !sext_ln11_fu_70_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_5F3759DF) - sc_bigint<32>(sext_ln11_fu_70_p1.read()));
}

void fisr::thread_sext_ln11_fu_70_p1() {
    sext_ln11_fu_70_p1 = esl_sext<32,31>(trunc_ln_fu_60_p4.read());
}

void fisr::thread_trunc_ln_fu_60_p4() {
    trunc_ln_fu_60_p4 = i_1_fu_57_p1.read().range(31, 1);
}

void fisr::thread_y() {
    y = grp_fu_44_p2.read();
}

void fisr::thread_y_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void fisr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<21>) ("XXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void fisr::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ap_vld\" :  \"" << y_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

